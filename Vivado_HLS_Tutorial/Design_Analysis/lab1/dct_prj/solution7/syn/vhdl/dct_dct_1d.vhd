-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src1_ce0 : OUT STD_LOGIC;
    src1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src1_ce1 : OUT STD_LOGIC;
    src1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src2_ce0 : OUT STD_LOGIC;
    src2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src2_ce1 : OUT STD_LOGIC;
    src2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src3_ce0 : OUT STD_LOGIC;
    src3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src3_ce1 : OUT STD_LOGIC;
    src3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_8 : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_81 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv29_1151 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000101010001";
    constant ap_const_lv29_29CF : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010100111001111";
    constant ap_const_lv29_1FFFEEAF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111110111010101111";
    constant ap_const_lv29_1FFFD631 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101011000110001";
    constant ap_const_lv29_2C63 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010110001100011";
    constant ap_const_lv29_25A1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010010110100001";
    constant ap_const_lv29_1FFFD39E : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101001110011110";
    constant ap_const_lv29_1FFFE6DC : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111110011011011100";
    constant ap_const_lv28_FFFF72C : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111011100101100";
    constant ap_const_lv28_1000 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_const_lv29_1924 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001100100100100";
    constant ap_const_lv29_8D4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100011010100";
    constant ap_const_lv29_1FFFDA60 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101101001100000";
    constant ap_const_lv29_1FFFF72C : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111011100101100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_46 : BOOLEAN;
    signal src_load_reg_1153 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal src_load_1_reg_1158 : STD_LOGIC_VECTOR (15 downto 0);
    signal src1_load_reg_1163 : STD_LOGIC_VECTOR (15 downto 0);
    signal src1_load_1_reg_1168 : STD_LOGIC_VECTOR (15 downto 0);
    signal src2_load_reg_1173 : STD_LOGIC_VECTOR (15 downto 0);
    signal src2_load_1_reg_1178 : STD_LOGIC_VECTOR (15 downto 0);
    signal src3_load_reg_1183 : STD_LOGIC_VECTOR (15 downto 0);
    signal src3_load_1_reg_1188 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_387_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_reg_1194 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_reg_1199 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp29_fu_447_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp29_reg_1204 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp30_fu_475_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp30_reg_1209 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_23_fu_481_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_reg_1214 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_reg_ppstg_tmp_23_reg_1214_pp0_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_1_1_cast_fu_509_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_1_cast_reg_1224 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_1_fu_1107_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_1_reg_1230 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_3_cast_fu_512_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_3_cast_reg_1235 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_3_fu_1101_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_3_reg_1241 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_5_cast_fu_515_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_5_cast_reg_1246 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_5_fu_1095_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_5_reg_1252 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_1_fu_1049_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_1_reg_1257 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_3_fu_1043_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_3_reg_1262 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_5_fu_1037_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_5_reg_1267 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_1_fu_956_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_1_reg_1272 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_3_fu_950_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_3_reg_1277 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_5_fu_944_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_5_reg_1282 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_1_fu_901_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_1_reg_1287 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_3_fu_895_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_3_reg_1292 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_5_fu_889_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_5_reg_1297 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_6_cast_fu_538_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_6_cast_reg_1302 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_7_cast_fu_541_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_7_cast_reg_1309 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1055_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp13_reg_1315 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_962_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp20_reg_1320 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_907_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp27_reg_1325 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_1_fu_804_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_1_reg_1330 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_3_fu_799_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_3_reg_1335 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_5_fu_794_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_5_reg_1340 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_1_fu_828_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_1_reg_1345 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_3_fu_823_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_3_reg_1350 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_5_fu_884_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_5_reg_1355 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_cast_fu_544_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_cast_reg_1360 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_2_cast_fu_547_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_2_cast_reg_1368 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_4_cast_fu_550_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_4_cast_reg_1376 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_1_reg_1384 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_2_reg_1389 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_978_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp39_reg_1394 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_833_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp46_reg_1399 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp53_reg_1404 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_3_reg_1409 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_5_reg_1414 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_6_reg_1419 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_7_reg_1424 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal ap_reg_ptbuf_tmp_81 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_287_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_500_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_612_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_626_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_736_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_750_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_764_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_778_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_265_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_41_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_0_1_fu_307_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_fu_299_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_0_3_fu_323_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_0_2_fu_315_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_fu_363_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_369_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_0_5_fu_339_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_0_4_fu_331_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_0_7_fu_355_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_0_6_fu_347_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_fu_381_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_fu_393_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_375_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_399_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_fu_405_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_4_1_fu_429_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_4_2_fu_435_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp28_fu_441_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_1_6_cast_cast_fu_425_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_1_5_cast_cast_fu_421_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_4_s_fu_453_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_43_fu_463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_4_557_cast_fu_459_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl_fu_467_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_31_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp32_fu_518_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_522_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1087_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1079_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1071_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp9_fu_553_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp9_fu_553_p2 : signal is "no";
    signal tmp12_fu_557_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp12_fu_557_p2 : signal is "no";
    signal tmp_1_fu_561_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1029_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1021_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1013_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp16_fu_577_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp16_fu_577_p2 : signal is "no";
    signal tmp19_fu_581_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp19_fu_581_p2 : signal is "no";
    signal tmp_2_fu_585_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_861_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_25_fu_607_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_621_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_937_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_930_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_923_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp23_fu_635_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp23_fu_635_p2 : signal is "no";
    signal tmp26_fu_639_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp26_fu_639_p2 : signal is "no";
    signal tmp_3_10_fu_643_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1006_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_999_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_992_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp35_fu_659_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp35_fu_659_p2 : signal is "no";
    signal tmp38_fu_663_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp38_fu_663_p2 : signal is "no";
    signal tmp_5_fu_667_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_787_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_854_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_847_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp42_fu_683_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp42_fu_683_p2 : signal is "no";
    signal tmp45_fu_687_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp45_fu_687_p2 : signal is "no";
    signal tmp_6_11_fu_691_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_877_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_809_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp49_fu_707_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp49_fu_707_p2 : signal is "no";
    signal tmp52_fu_711_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp52_fu_711_p2 : signal is "no";
    signal tmp_7_fu_715_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_29_fu_731_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_745_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_759_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_773_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_787_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_787_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_6_5_fu_794_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_6_5_fu_794_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_6_3_fu_799_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_6_3_fu_799_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_6_1_fu_804_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_6_1_fu_804_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_809_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_809_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_7_3_fu_823_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_7_3_fu_823_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_7_1_fu_828_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_7_1_fu_828_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_833_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_833_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_839_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_839_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_839_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_839_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_847_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_854_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_861_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_861_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_877_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_7_5_fu_884_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_7_5_fu_884_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_5_5_fu_889_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_5_5_fu_889_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_5_3_fu_895_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_5_3_fu_895_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_5_1_fu_901_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_5_1_fu_901_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_907_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_907_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_914_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_914_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_914_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_914_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_923_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_930_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_930_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_937_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_937_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_3_5_fu_944_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_3_5_fu_944_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_3_3_fu_950_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_3_3_fu_950_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_3_1_fu_956_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_3_1_fu_956_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_962_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_969_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_969_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_969_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_969_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_978_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_978_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_984_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_984_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_992_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_999_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_999_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1006_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1006_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1013_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1013_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1021_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1021_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1029_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1029_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_2_5_fu_1037_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_2_5_fu_1037_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_2_3_fu_1043_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_2_3_fu_1043_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_2_1_fu_1049_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_2_1_fu_1049_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1055_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1055_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1062_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1062_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1062_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1062_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1071_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1071_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1079_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1079_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1087_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1087_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_1_5_fu_1095_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_1_5_fu_1095_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_1_3_fu_1101_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_1_3_fu_1101_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_1_1_fu_1107_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_1_1_fu_1107_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component dct_mac_muladd_14ns_16s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_15ns_16s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_14s_16s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_15s_16s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15ns_16s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15s_16s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14ns_16s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14s_16s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_13s_16s_14ns_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component dct_mac_muladd_14ns_16s_28s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_13ns_16s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_13s_16s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15s_16s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15ns_16s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14s_16s_14ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_14ns_16s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_13s_16s_29s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_13ns_16s_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    dct_mac_muladd_14ns_16s_29s_29_1_U6 : component dct_mac_muladd_14ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_787_p0,
        din1 => grp_fu_787_p1,
        din2 => tmp_6_6_1_reg_1330,
        dout => grp_fu_787_p3);

    dct_mul_mul_15ns_16s_29_1_U7 : component dct_mul_mul_15ns_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_6_5_fu_794_p0,
        din1 => tmp_6_6_5_fu_794_p1,
        dout => tmp_6_6_5_fu_794_p2);

    dct_mul_mul_14s_16s_29_1_U8 : component dct_mul_mul_14s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_6_3_fu_799_p0,
        din1 => tmp_6_6_3_fu_799_p1,
        dout => tmp_6_6_3_fu_799_p2);

    dct_mul_mul_15s_16s_29_1_U9 : component dct_mul_mul_15s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_6_1_fu_804_p0,
        din1 => tmp_6_6_1_fu_804_p1,
        dout => tmp_6_6_1_fu_804_p2);

    dct_mac_muladd_15ns_16s_29s_29_1_U10 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_809_p0,
        din1 => grp_fu_809_p1,
        din2 => tmp_6_7_5_reg_1355,
        dout => grp_fu_809_p3);

    dct_mac_muladd_15ns_16s_29s_29_1_U11 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_816_p0,
        din1 => grp_fu_816_p1,
        din2 => tmp_6_7_3_reg_1350,
        dout => grp_fu_816_p3);

    dct_mul_mul_15s_16s_29_1_U12 : component dct_mul_mul_15s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_7_3_fu_823_p0,
        din1 => tmp_6_7_3_fu_823_p1,
        dout => tmp_6_7_3_fu_823_p2);

    dct_mul_mul_14s_16s_29_1_U13 : component dct_mul_mul_14s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_7_1_fu_828_p0,
        din1 => tmp_6_7_1_fu_828_p1,
        dout => tmp_6_7_1_fu_828_p2);

    dct_mac_muladd_15s_16s_29s_29_1_U14 : component dct_mac_muladd_15s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_833_p0,
        din1 => grp_fu_833_p1,
        din2 => grp_fu_839_p3,
        dout => grp_fu_833_p3);

    dct_mac_muladd_14ns_16s_14ns_29_1_U15 : component dct_mac_muladd_14ns_16s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_839_p0,
        din1 => grp_fu_839_p1,
        din2 => grp_fu_839_p2,
        dout => grp_fu_839_p3);

    dct_mac_muladd_14s_16s_29s_29_1_U16 : component dct_mac_muladd_14s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_847_p0,
        din1 => grp_fu_847_p1,
        din2 => tmp_6_6_5_reg_1340,
        dout => grp_fu_847_p3);

    dct_mac_muladd_15ns_16s_29s_29_1_U17 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_854_p0,
        din1 => grp_fu_854_p1,
        din2 => tmp_6_6_3_reg_1335,
        dout => grp_fu_854_p3);

    dct_mac_muladd_13s_16s_14ns_28_1_U18 : component dct_mac_muladd_13s_16s_14ns_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_861_p0,
        din1 => src3_load_1_reg_1188,
        din2 => grp_fu_861_p2,
        dout => grp_fu_861_p3);

    dct_mac_muladd_14ns_16s_28s_29_1_U19 : component dct_mac_muladd_14ns_16s_28s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_870_p0,
        din1 => grp_fu_870_p1,
        din2 => grp_fu_861_p3,
        dout => grp_fu_870_p3);

    dct_mac_muladd_13ns_16s_29s_29_1_U20 : component dct_mac_muladd_13ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_877_p0,
        din1 => grp_fu_877_p1,
        din2 => tmp_6_7_1_reg_1345,
        dout => grp_fu_877_p3);

    dct_mul_mul_15s_16s_29_1_U21 : component dct_mul_mul_15s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_7_5_fu_884_p0,
        din1 => tmp_6_7_5_fu_884_p1,
        dout => tmp_6_7_5_fu_884_p2);

    dct_mul_mul_13s_16s_29_1_U22 : component dct_mul_mul_13s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_5_5_fu_889_p0,
        din1 => tmp_6_5_5_fu_889_p1,
        dout => tmp_6_5_5_fu_889_p2);

    dct_mul_mul_15ns_16s_29_1_U23 : component dct_mul_mul_15ns_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_5_3_fu_895_p0,
        din1 => tmp_6_5_3_fu_895_p1,
        dout => tmp_6_5_3_fu_895_p2);

    dct_mul_mul_15s_16s_29_1_U24 : component dct_mul_mul_15s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_5_1_fu_901_p0,
        din1 => tmp_6_5_1_fu_901_p1,
        dout => tmp_6_5_1_fu_901_p2);

    dct_mac_muladd_13ns_16s_29s_29_1_U25 : component dct_mac_muladd_13ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_907_p0,
        din1 => grp_fu_907_p1,
        din2 => grp_fu_914_p3,
        dout => grp_fu_907_p3);

    dct_mac_muladd_15s_16s_14ns_29_1_U26 : component dct_mac_muladd_15s_16s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_914_p0,
        din1 => grp_fu_914_p1,
        din2 => grp_fu_914_p2,
        dout => grp_fu_914_p3);

    dct_mac_muladd_14ns_16s_29s_29_1_U27 : component dct_mac_muladd_14ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_923_p0,
        din1 => grp_fu_923_p1,
        din2 => tmp_6_3_5_reg_1282,
        dout => grp_fu_923_p3);

    dct_mac_muladd_15s_16s_29s_29_1_U28 : component dct_mac_muladd_15s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_930_p0,
        din1 => grp_fu_930_p1,
        din2 => tmp_6_3_3_reg_1277,
        dout => grp_fu_930_p3);

    dct_mac_muladd_15ns_16s_29s_29_1_U29 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_937_p0,
        din1 => grp_fu_937_p1,
        din2 => tmp_6_3_1_reg_1272,
        dout => grp_fu_937_p3);

    dct_mul_mul_15ns_16s_29_1_U30 : component dct_mul_mul_15ns_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_3_5_fu_944_p0,
        din1 => tmp_6_3_5_fu_944_p1,
        dout => tmp_6_3_5_fu_944_p2);

    dct_mul_mul_14s_16s_29_1_U31 : component dct_mul_mul_14s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_3_3_fu_950_p0,
        din1 => tmp_6_3_3_fu_950_p1,
        dout => tmp_6_3_3_fu_950_p2);

    dct_mul_mul_13s_16s_29_1_U32 : component dct_mul_mul_13s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_3_1_fu_956_p0,
        din1 => tmp_6_3_1_fu_956_p1,
        dout => tmp_6_3_1_fu_956_p2);

    dct_mac_muladd_14ns_16s_29s_29_1_U33 : component dct_mac_muladd_14ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_962_p0,
        din1 => grp_fu_962_p1,
        din2 => grp_fu_969_p3,
        dout => grp_fu_962_p3);

    dct_mac_muladd_15ns_16s_14ns_29_1_U34 : component dct_mac_muladd_15ns_16s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_969_p0,
        din1 => grp_fu_969_p1,
        din2 => grp_fu_969_p2,
        dout => grp_fu_969_p3);

    dct_mac_muladd_15ns_16s_29s_29_1_U35 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_978_p0,
        din1 => grp_fu_978_p1,
        din2 => grp_fu_984_p3,
        dout => grp_fu_978_p3);

    dct_mac_muladd_14s_16s_14ns_29_1_U36 : component dct_mac_muladd_14s_16s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_984_p0,
        din1 => grp_fu_984_p1,
        din2 => grp_fu_984_p2,
        dout => grp_fu_984_p3);

    dct_mac_muladd_15s_16s_29s_29_1_U37 : component dct_mac_muladd_15s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_992_p0,
        din1 => grp_fu_992_p1,
        din2 => tmp_6_5_5_reg_1297,
        dout => grp_fu_992_p3);

    dct_mac_muladd_13ns_16s_29s_29_1_U38 : component dct_mac_muladd_13ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_999_p0,
        din1 => grp_fu_999_p1,
        din2 => tmp_6_5_3_reg_1292,
        dout => grp_fu_999_p3);

    dct_mac_muladd_14ns_16s_29s_29_1_U39 : component dct_mac_muladd_14ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1006_p0,
        din1 => grp_fu_1006_p1,
        din2 => tmp_6_5_1_reg_1287,
        dout => grp_fu_1006_p3);

    dct_mac_muladd_15s_16s_29s_29_1_U40 : component dct_mac_muladd_15s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1013_p0,
        din1 => grp_fu_1013_p1,
        din2 => tmp_6_2_5_reg_1267,
        dout => grp_fu_1013_p3);

    dct_mac_muladd_14s_16s_29s_29_1_U41 : component dct_mac_muladd_14s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1021_p0,
        din1 => grp_fu_1021_p1,
        din2 => tmp_6_2_3_reg_1262,
        dout => grp_fu_1021_p3);

    dct_mac_muladd_15ns_16s_29s_29_1_U42 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1029_p0,
        din1 => grp_fu_1029_p1,
        din2 => tmp_6_2_1_reg_1257,
        dout => grp_fu_1029_p3);

    dct_mul_mul_14s_16s_29_1_U43 : component dct_mul_mul_14s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_2_5_fu_1037_p0,
        din1 => tmp_6_2_5_fu_1037_p1,
        dout => tmp_6_2_5_fu_1037_p2);

    dct_mul_mul_15s_16s_29_1_U44 : component dct_mul_mul_15s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_2_3_fu_1043_p0,
        din1 => tmp_6_2_3_fu_1043_p1,
        dout => tmp_6_2_3_fu_1043_p2);

    dct_mul_mul_14ns_16s_29_1_U45 : component dct_mul_mul_14ns_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_2_1_fu_1049_p0,
        din1 => tmp_6_2_1_fu_1049_p1,
        dout => tmp_6_2_1_fu_1049_p2);

    dct_mac_muladd_15s_16s_29s_29_1_U46 : component dct_mac_muladd_15s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1055_p0,
        din1 => grp_fu_1055_p1,
        din2 => grp_fu_1062_p3,
        dout => grp_fu_1055_p3);

    dct_mac_muladd_15s_16s_14ns_29_1_U47 : component dct_mac_muladd_15s_16s_14ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1062_p0,
        din1 => grp_fu_1062_p1,
        din2 => grp_fu_1062_p2,
        dout => grp_fu_1062_p3);

    dct_mac_muladd_13s_16s_29s_29_1_U48 : component dct_mac_muladd_13s_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1071_p0,
        din1 => grp_fu_1071_p1,
        din2 => tmp_6_1_5_reg_1252,
        dout => grp_fu_1071_p3);

    dct_mac_muladd_14ns_16s_29s_29_1_U49 : component dct_mac_muladd_14ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1079_p0,
        din1 => grp_fu_1079_p1,
        din2 => tmp_6_1_3_reg_1241,
        dout => grp_fu_1079_p3);

    dct_mac_muladd_15ns_16s_29s_29_1_U50 : component dct_mac_muladd_15ns_16s_29s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1087_p0,
        din1 => grp_fu_1087_p1,
        din2 => tmp_6_1_1_reg_1230,
        dout => grp_fu_1087_p3);

    dct_mul_mul_14s_16s_29_1_U51 : component dct_mul_mul_14s_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_1_5_fu_1095_p0,
        din1 => tmp_6_1_5_fu_1095_p1,
        dout => tmp_6_1_5_fu_1095_p2);

    dct_mul_mul_13ns_16s_29_1_U52 : component dct_mul_mul_13ns_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_1_3_fu_1101_p0,
        din1 => tmp_6_1_3_fu_1101_p1,
        dout => tmp_6_1_3_fu_1101_p2);

    dct_mul_mul_15ns_16s_29_1_U53 : component dct_mul_mul_15ns_16s_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_6_1_1_fu_1107_p0,
        din1 => tmp_6_1_1_fu_1107_p1,
        dout => tmp_6_1_1_fu_1107_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                    ap_reg_ppstg_tmp_23_reg_1214_pp0_it1(6 downto 3) <= tmp_23_reg_1214(6 downto 3);
                    tmp_23_reg_1214(6 downto 3) <= tmp_23_fu_481_p3(6 downto 3);
                tmp_5_1_1_cast_reg_1224 <= tmp_5_1_1_cast_fu_509_p1;
                tmp_5_1_3_cast_reg_1235 <= tmp_5_1_3_cast_fu_512_p1;
                tmp_5_1_5_cast_reg_1246 <= tmp_5_1_5_cast_fu_515_p1;
                tmp_6_1_1_reg_1230 <= tmp_6_1_1_fu_1107_p2;
                tmp_6_1_3_reg_1241 <= tmp_6_1_3_fu_1101_p2;
                tmp_6_1_5_reg_1252 <= tmp_6_1_5_fu_1095_p2;
                tmp_6_2_1_reg_1257 <= tmp_6_2_1_fu_1049_p2;
                tmp_6_2_3_reg_1262 <= tmp_6_2_3_fu_1043_p2;
                tmp_6_2_5_reg_1267 <= tmp_6_2_5_fu_1037_p2;
                tmp_6_3_1_reg_1272 <= tmp_6_3_1_fu_956_p2;
                tmp_6_3_3_reg_1277 <= tmp_6_3_3_fu_950_p2;
                tmp_6_3_5_reg_1282 <= tmp_6_3_5_fu_944_p2;
                tmp_6_5_1_reg_1287 <= tmp_6_5_1_fu_901_p2;
                tmp_6_5_3_reg_1292 <= tmp_6_5_3_fu_895_p2;
                tmp_6_5_5_reg_1297 <= tmp_6_5_5_fu_889_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                ap_reg_ptbuf_tmp_81 <= tmp_81;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                src1_load_1_reg_1168 <= src1_q1;
                src1_load_reg_1163 <= src1_q0;
                src2_load_1_reg_1178 <= src2_q1;
                src2_load_reg_1173 <= src2_q0;
                src3_load_1_reg_1188 <= src3_q1;
                src3_load_reg_1183 <= src3_q0;
                src_load_1_reg_1158 <= src_q1;
                src_load_reg_1153 <= src_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce))) then
                tmp13_reg_1315 <= grp_fu_1055_p3;
                tmp20_reg_1320 <= grp_fu_962_p3;
                tmp27_reg_1325 <= grp_fu_907_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                    tmp1_reg_1194(28 downto 13) <= tmp1_fu_387_p2(28 downto 13);
                    tmp29_reg_1204(28 downto 13) <= tmp29_fu_447_p2(28 downto 13);
                tmp30_reg_1209 <= tmp30_fu_475_p2;
                tmp_3_3_reg_1409 <= tmp_3_10_fu_643_p2(28 downto 13);
                tmp_3_5_reg_1414 <= tmp_5_fu_667_p2(28 downto 13);
                tmp_3_6_reg_1419 <= tmp_6_11_fu_691_p2(28 downto 13);
                tmp_3_7_reg_1424 <= tmp_7_fu_715_p2(28 downto 13);
                tmp_3_reg_1199 <= tmp_s_fu_405_p2(28 downto 13);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp39_reg_1394 <= grp_fu_978_p3;
                tmp46_reg_1399 <= grp_fu_833_p3;
                tmp53_reg_1404 <= grp_fu_870_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_3_1_reg_1384 <= tmp_1_fu_561_p2(28 downto 13);
                tmp_3_2_reg_1389 <= tmp_2_fu_585_p2(28 downto 13);
                tmp_5_1_2_cast_reg_1368 <= tmp_5_1_2_cast_fu_547_p1;
                tmp_5_1_4_cast_reg_1376 <= tmp_5_1_4_cast_fu_550_p1;
                tmp_5_1_cast_reg_1360 <= tmp_5_1_cast_fu_544_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce))) then
                tmp_5_1_6_cast_reg_1302 <= tmp_5_1_6_cast_fu_538_p1;
                tmp_5_1_7_cast_reg_1309 <= tmp_5_1_7_cast_fu_541_p1;
                tmp_6_6_1_reg_1330 <= tmp_6_6_1_fu_804_p2;
                tmp_6_6_3_reg_1335 <= tmp_6_6_3_fu_799_p2;
                tmp_6_6_5_reg_1340 <= tmp_6_6_5_fu_794_p2;
                tmp_6_7_1_reg_1345 <= tmp_6_7_1_fu_828_p2;
                tmp_6_7_3_reg_1350 <= tmp_6_7_3_fu_823_p2;
                tmp_6_7_5_reg_1355 <= tmp_6_7_5_fu_884_p2;
            end if;
        end if;
    end process;
    tmp1_reg_1194(12 downto 0) <= "1000000000000";
    tmp29_reg_1204(12 downto 0) <= "0000000000000";
    tmp_23_reg_1214(2 downto 0) <= "000";
    ap_reg_ppstg_tmp_23_reg_1214_pp0_it1(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_ce, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and not((ap_const_logic_1 = ap_sig_pprstidle_pp0)) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                elsif ((not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and (ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                end if;
            when ap_ST_pp0_stg2_fsm_2 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                end if;
            when ap_ST_pp0_stg3_fsm_3 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_ce)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_46 assign process. --
    ap_sig_bdd_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_46 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_46)
    begin
        if (ap_sig_bdd_46) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- dst_address0 assign process. --
    dst_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, tmp_24_fu_489_p1, tmp_26_fu_612_p3, tmp_30_fu_736_p3, tmp_36_fu_764_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            dst_address0 <= tmp_36_fu_764_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            dst_address0 <= tmp_30_fu_736_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            dst_address0 <= tmp_26_fu_612_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            dst_address0 <= tmp_24_fu_489_p1(6 - 1 downto 0);
        else 
            dst_address0 <= "XXXXXX";
        end if; 
    end process;


    -- dst_address1 assign process. --
    dst_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, tmp_32_fu_500_p3, tmp_28_fu_626_p3, tmp_34_fu_750_p3, tmp_38_fu_778_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            dst_address1 <= tmp_38_fu_778_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            dst_address1 <= tmp_34_fu_750_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            dst_address1 <= tmp_28_fu_626_p3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            dst_address1 <= tmp_32_fu_500_p3(6 - 1 downto 0);
        else 
            dst_address1 <= "XXXXXX";
        end if; 
    end process;


    -- dst_ce0 assign process. --
    dst_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_ce, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- dst_ce1 assign process. --
    dst_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_ce, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- dst_d0 assign process. --
    dst_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg1_fsm_1, tmp_3_reg_1199, ap_sig_cseq_ST_pp0_stg2_fsm_2, tmp_3_1_reg_1384, tmp_3_3_reg_1409, tmp_3_6_reg_1419)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            dst_d0 <= tmp_3_6_reg_1419;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            dst_d0 <= tmp_3_3_reg_1409;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            dst_d0 <= tmp_3_1_reg_1384;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            dst_d0 <= tmp_3_reg_1199;
        else 
            dst_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- dst_d1 assign process. --
    dst_d1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, tmp_3_2_reg_1389, tmp_3_5_reg_1414, tmp_3_7_reg_1424, tmp_4_fu_522_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            dst_d1 <= tmp_3_7_reg_1424;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            dst_d1 <= tmp_3_5_reg_1414;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            dst_d1 <= tmp_3_2_reg_1389;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            dst_d1 <= tmp_4_fu_522_p2(28 downto 13);
        else 
            dst_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- dst_we0 assign process. --
    dst_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_ce, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- dst_we1 assign process. --
    dst_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_ce, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1006_p0 <= ap_const_lv29_1924(14 - 1 downto 0);
    grp_fu_1006_p1 <= tmp_5_1_cast_reg_1360(16 - 1 downto 0);
    grp_fu_1013_p0 <= ap_const_lv29_1FFFD631(15 - 1 downto 0);
    grp_fu_1013_p1 <= tmp_5_1_4_cast_fu_550_p1(16 - 1 downto 0);
    grp_fu_1021_p0 <= ap_const_lv29_1FFFEEAF(14 - 1 downto 0);
    grp_fu_1021_p1 <= tmp_5_1_2_cast_fu_547_p1(16 - 1 downto 0);
    grp_fu_1029_p0 <= ap_const_lv29_29CF(15 - 1 downto 0);
    grp_fu_1029_p1 <= tmp_5_1_cast_fu_544_p1(16 - 1 downto 0);
    grp_fu_1055_p0 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_1055_p1 <= tmp_5_1_6_cast_fu_538_p1(16 - 1 downto 0);
    grp_fu_1062_p0 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_1062_p1 <= tmp_5_1_7_cast_fu_541_p1(16 - 1 downto 0);
    grp_fu_1062_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_1071_p0 <= ap_const_lv29_1FFFF72C(13 - 1 downto 0);
    grp_fu_1071_p1 <= tmp_5_1_4_cast_fu_550_p1(16 - 1 downto 0);
    grp_fu_1079_p0 <= ap_const_lv29_1924(14 - 1 downto 0);
    grp_fu_1079_p1 <= tmp_5_1_2_cast_fu_547_p1(16 - 1 downto 0);
    grp_fu_1087_p0 <= ap_const_lv29_2C63(15 - 1 downto 0);
    grp_fu_1087_p1 <= tmp_5_1_cast_fu_544_p1(16 - 1 downto 0);
    grp_fu_787_p0 <= ap_const_lv29_1151(14 - 1 downto 0);
    grp_fu_787_p1 <= tmp_5_1_cast_reg_1360(16 - 1 downto 0);
    grp_fu_809_p0 <= ap_const_lv29_2C63(15 - 1 downto 0);
    grp_fu_809_p1 <= tmp_5_1_4_cast_reg_1376(16 - 1 downto 0);
    grp_fu_816_p0 <= ap_const_lv29_25A1(15 - 1 downto 0);
    grp_fu_816_p1 <= tmp_5_1_2_cast_reg_1368(16 - 1 downto 0);
    grp_fu_833_p0 <= ap_const_lv29_1FFFD631(15 - 1 downto 0);
    grp_fu_833_p1 <= tmp_5_1_6_cast_reg_1302(16 - 1 downto 0);
    grp_fu_839_p0 <= ap_const_lv29_1151(14 - 1 downto 0);
    grp_fu_839_p1 <= tmp_5_1_7_cast_reg_1309(16 - 1 downto 0);
    grp_fu_839_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_847_p0 <= ap_const_lv29_1FFFEEAF(14 - 1 downto 0);
    grp_fu_847_p1 <= tmp_5_1_4_cast_reg_1376(16 - 1 downto 0);
    grp_fu_854_p0 <= ap_const_lv29_29CF(15 - 1 downto 0);
    grp_fu_854_p1 <= tmp_5_1_2_cast_reg_1368(16 - 1 downto 0);
    grp_fu_861_p0 <= ap_const_lv28_FFFF72C(13 - 1 downto 0);
    grp_fu_861_p2 <= ap_const_lv28_1000(14 - 1 downto 0);
    grp_fu_870_p0 <= ap_const_lv29_1924(14 - 1 downto 0);
    grp_fu_870_p1 <= tmp_5_1_6_cast_reg_1302(16 - 1 downto 0);
    grp_fu_877_p0 <= ap_const_lv29_8D4(13 - 1 downto 0);
    grp_fu_877_p1 <= tmp_5_1_cast_reg_1360(16 - 1 downto 0);
    grp_fu_907_p0 <= ap_const_lv29_8D4(13 - 1 downto 0);
    grp_fu_907_p1 <= tmp_5_1_6_cast_fu_538_p1(16 - 1 downto 0);
    grp_fu_914_p0 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_914_p1 <= tmp_5_1_7_cast_fu_541_p1(16 - 1 downto 0);
    grp_fu_914_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_923_p0 <= ap_const_lv29_1924(14 - 1 downto 0);
    grp_fu_923_p1 <= tmp_5_1_4_cast_reg_1376(16 - 1 downto 0);
    grp_fu_930_p0 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_930_p1 <= tmp_5_1_2_cast_reg_1368(16 - 1 downto 0);
    grp_fu_937_p0 <= ap_const_lv29_25A1(15 - 1 downto 0);
    grp_fu_937_p1 <= tmp_5_1_cast_reg_1360(16 - 1 downto 0);
    grp_fu_962_p0 <= ap_const_lv29_1151(14 - 1 downto 0);
    grp_fu_962_p1 <= tmp_5_1_6_cast_fu_538_p1(16 - 1 downto 0);
    grp_fu_969_p0 <= ap_const_lv29_29CF(15 - 1 downto 0);
    grp_fu_969_p1 <= tmp_5_1_7_cast_fu_541_p1(16 - 1 downto 0);
    grp_fu_969_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_978_p0 <= ap_const_lv29_2C63(15 - 1 downto 0);
    grp_fu_978_p1 <= tmp_5_1_6_cast_reg_1302(16 - 1 downto 0);
    grp_fu_984_p0 <= ap_const_lv29_1FFFE6DC(14 - 1 downto 0);
    grp_fu_984_p1 <= tmp_5_1_7_cast_reg_1309(16 - 1 downto 0);
    grp_fu_984_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_992_p0 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_992_p1 <= tmp_5_1_4_cast_reg_1376(16 - 1 downto 0);
    grp_fu_999_p0 <= ap_const_lv29_8D4(13 - 1 downto 0);
    grp_fu_999_p1 <= tmp_5_1_2_cast_reg_1368(16 - 1 downto 0);
    p_shl_fu_467_p3 <= (tmp_43_fu_463_p1 & ap_const_lv13_0);
    src1_address0 <= tmp_40_fu_273_p1(4 - 1 downto 0);
    src1_address1 <= tmp_42_fu_287_p3(4 - 1 downto 0);

    -- src1_ce0 assign process. --
    src1_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src1_ce0 <= ap_const_logic_1;
        else 
            src1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- src1_ce1 assign process. --
    src1_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src1_ce1 <= ap_const_logic_1;
        else 
            src1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    src2_address0 <= tmp_40_fu_273_p1(4 - 1 downto 0);
    src2_address1 <= tmp_42_fu_287_p3(4 - 1 downto 0);

    -- src2_ce0 assign process. --
    src2_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src2_ce0 <= ap_const_logic_1;
        else 
            src2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- src2_ce1 assign process. --
    src2_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src2_ce1 <= ap_const_logic_1;
        else 
            src2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    src3_address0 <= tmp_40_fu_273_p1(4 - 1 downto 0);
    src3_address1 <= tmp_42_fu_287_p3(4 - 1 downto 0);

    -- src3_ce0 assign process. --
    src3_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src3_ce0 <= ap_const_logic_1;
        else 
            src3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- src3_ce1 assign process. --
    src3_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src3_ce1 <= ap_const_logic_1;
        else 
            src3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    src_address0 <= tmp_40_fu_273_p1(4 - 1 downto 0);
    src_address1 <= tmp_42_fu_287_p3(4 - 1 downto 0);

    -- src_ce0 assign process. --
    src_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- src_ce1 assign process. --
    src_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp12_fu_557_p2 <= std_logic_vector(signed(grp_fu_1071_p3) + signed(tmp13_reg_1315));
    tmp16_fu_577_p2 <= std_logic_vector(signed(grp_fu_1029_p3) + signed(grp_fu_1021_p3));
    tmp19_fu_581_p2 <= std_logic_vector(signed(grp_fu_1013_p3) + signed(tmp20_reg_1320));
    tmp1_fu_387_p2 <= (tmp_6_0_7_fu_355_p3 or ap_const_lv29_1000);
    tmp23_fu_635_p2 <= std_logic_vector(signed(grp_fu_937_p3) + signed(grp_fu_930_p3));
    tmp26_fu_639_p2 <= std_logic_vector(signed(grp_fu_923_p3) + signed(tmp27_reg_1325));
    tmp28_fu_441_p2 <= std_logic_vector(unsigned(tmp_6_0_4_fu_331_p3) + unsigned(tmp_6_0_3_fu_323_p3));
    tmp29_fu_447_p2 <= std_logic_vector(unsigned(tmp_7_4_2_fu_435_p2) + unsigned(tmp28_fu_441_p2));
    tmp30_fu_475_p2 <= std_logic_vector(signed(tmp_6_4_557_cast_fu_459_p1) - signed(p_shl_fu_467_p3));
    tmp32_fu_518_p2 <= std_logic_vector(unsigned(tmp30_reg_1209) + unsigned(tmp1_reg_1194));
    tmp35_fu_659_p2 <= std_logic_vector(signed(grp_fu_1006_p3) + signed(grp_fu_999_p3));
    tmp38_fu_663_p2 <= std_logic_vector(signed(grp_fu_992_p3) + signed(tmp39_reg_1394));
    tmp3_fu_363_p2 <= std_logic_vector(unsigned(tmp_6_0_1_fu_307_p3) + unsigned(tmp_6_fu_299_p3));
    tmp42_fu_683_p2 <= std_logic_vector(signed(grp_fu_787_p3) + signed(grp_fu_854_p3));
    tmp45_fu_687_p2 <= std_logic_vector(signed(grp_fu_847_p3) + signed(tmp46_reg_1399));
    tmp49_fu_707_p2 <= std_logic_vector(signed(grp_fu_877_p3) + signed(grp_fu_816_p3));
    tmp4_fu_369_p2 <= std_logic_vector(unsigned(tmp_6_0_3_fu_323_p3) + unsigned(tmp_6_0_2_fu_315_p3));
    tmp52_fu_711_p2 <= std_logic_vector(signed(grp_fu_809_p3) + signed(tmp53_reg_1404));
    tmp5_fu_399_p2 <= std_logic_vector(unsigned(tmp6_fu_381_p2) + unsigned(tmp7_fu_393_p2));
    tmp6_fu_381_p2 <= std_logic_vector(unsigned(tmp_6_0_5_fu_339_p3) + unsigned(tmp_6_0_4_fu_331_p3));
    tmp7_fu_393_p2 <= std_logic_vector(unsigned(tmp_6_0_6_fu_347_p3) + unsigned(tmp1_fu_387_p2));
    tmp9_fu_553_p2 <= std_logic_vector(signed(grp_fu_1087_p3) + signed(grp_fu_1079_p3));
    tmp_1_fu_561_p2 <= std_logic_vector(unsigned(tmp9_fu_553_p2) + unsigned(tmp12_fu_557_p2));
    tmp_23_fu_481_p3 <= (ap_reg_ptbuf_tmp_81 & ap_const_lv3_0);
    tmp_24_fu_489_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_481_p3),64));
    tmp_25_fu_607_p2 <= (tmp_23_reg_1214 or ap_const_lv7_1);
    tmp_26_fu_612_p3 <= (ap_const_lv57_0 & tmp_25_fu_607_p2);
    tmp_27_fu_621_p2 <= (tmp_23_reg_1214 or ap_const_lv7_2);
    tmp_28_fu_626_p3 <= (ap_const_lv57_0 & tmp_27_fu_621_p2);
    tmp_29_fu_731_p2 <= (ap_reg_ppstg_tmp_23_reg_1214_pp0_it1 or ap_const_lv7_3);
    tmp_2_fu_585_p2 <= std_logic_vector(unsigned(tmp16_fu_577_p2) + unsigned(tmp19_fu_581_p2));
    tmp_30_fu_736_p3 <= (ap_const_lv57_0 & tmp_29_fu_731_p2);
    tmp_31_fu_494_p2 <= (tmp_23_fu_481_p3 or ap_const_lv7_4);
    tmp_32_fu_500_p3 <= (ap_const_lv57_0 & tmp_31_fu_494_p2);
    tmp_33_fu_745_p2 <= (ap_reg_ppstg_tmp_23_reg_1214_pp0_it1 or ap_const_lv7_5);
    tmp_34_fu_750_p3 <= (ap_const_lv57_0 & tmp_33_fu_745_p2);
    tmp_35_fu_759_p2 <= (ap_reg_ppstg_tmp_23_reg_1214_pp0_it1 or ap_const_lv7_6);
    tmp_36_fu_764_p3 <= (ap_const_lv57_0 & tmp_35_fu_759_p2);
    tmp_37_fu_773_p2 <= (ap_reg_ppstg_tmp_23_reg_1214_pp0_it1 or ap_const_lv7_7);
    tmp_38_fu_778_p3 <= (ap_const_lv57_0 & tmp_37_fu_773_p2);
    tmp_39_fu_265_p3 <= (tmp_8 & ap_const_lv1_0);
    tmp_3_10_fu_643_p2 <= std_logic_vector(unsigned(tmp23_fu_635_p2) + unsigned(tmp26_fu_639_p2));
    tmp_40_fu_273_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_265_p3),64));
    tmp_41_fu_281_p2 <= (tmp_39_fu_265_p3 or ap_const_lv5_1);
    tmp_42_fu_287_p3 <= (ap_const_lv59_0 & tmp_41_fu_281_p2);
    tmp_43_fu_463_p1 <= tmp_6_4_s_fu_453_p2(16 - 1 downto 0);
    tmp_4_fu_522_p2 <= std_logic_vector(unsigned(tmp29_reg_1204) + unsigned(tmp32_fu_518_p2));
        tmp_5_1_1_cast_fu_509_p1 <= std_logic_vector(resize(signed(src_load_1_reg_1158),29));

        tmp_5_1_2_cast_fu_547_p1 <= std_logic_vector(resize(signed(src1_load_reg_1163),29));

        tmp_5_1_3_cast_fu_512_p1 <= std_logic_vector(resize(signed(src1_load_1_reg_1168),29));

        tmp_5_1_4_cast_fu_550_p1 <= std_logic_vector(resize(signed(src2_load_reg_1173),29));

        tmp_5_1_5_cast_cast_fu_421_p1 <= std_logic_vector(resize(signed(src2_q1),17));

        tmp_5_1_5_cast_fu_515_p1 <= std_logic_vector(resize(signed(src2_load_1_reg_1178),29));

        tmp_5_1_6_cast_cast_fu_425_p1 <= std_logic_vector(resize(signed(src3_q0),17));

        tmp_5_1_6_cast_fu_538_p1 <= std_logic_vector(resize(signed(src3_load_reg_1183),29));

        tmp_5_1_7_cast_fu_541_p1 <= std_logic_vector(resize(signed(src3_load_1_reg_1188),29));

        tmp_5_1_cast_fu_544_p1 <= std_logic_vector(resize(signed(src_load_reg_1153),29));

    tmp_5_fu_667_p2 <= std_logic_vector(unsigned(tmp35_fu_659_p2) + unsigned(tmp38_fu_663_p2));
    tmp_6_0_1_fu_307_p3 <= (src_q1 & ap_const_lv13_0);
    tmp_6_0_2_fu_315_p3 <= (src1_q0 & ap_const_lv13_0);
    tmp_6_0_3_fu_323_p3 <= (src1_q1 & ap_const_lv13_0);
    tmp_6_0_4_fu_331_p3 <= (src2_q0 & ap_const_lv13_0);
    tmp_6_0_5_fu_339_p3 <= (src2_q1 & ap_const_lv13_0);
    tmp_6_0_6_fu_347_p3 <= (src3_q0 & ap_const_lv13_0);
    tmp_6_0_7_fu_355_p3 <= (src3_q1 & ap_const_lv13_0);
    tmp_6_11_fu_691_p2 <= std_logic_vector(unsigned(tmp42_fu_683_p2) + unsigned(tmp45_fu_687_p2));
    tmp_6_1_1_fu_1107_p0 <= ap_const_lv29_25A1(15 - 1 downto 0);
    tmp_6_1_1_fu_1107_p1 <= tmp_5_1_1_cast_fu_509_p1(16 - 1 downto 0);
    tmp_6_1_3_fu_1101_p0 <= ap_const_lv29_8D4(13 - 1 downto 0);
    tmp_6_1_3_fu_1101_p1 <= tmp_5_1_3_cast_fu_512_p1(16 - 1 downto 0);
    tmp_6_1_5_fu_1095_p0 <= ap_const_lv29_1FFFE6DC(14 - 1 downto 0);
    tmp_6_1_5_fu_1095_p1 <= tmp_5_1_5_cast_fu_515_p1(16 - 1 downto 0);
    tmp_6_2_1_fu_1049_p0 <= ap_const_lv29_1151(14 - 1 downto 0);
    tmp_6_2_1_fu_1049_p1 <= tmp_5_1_1_cast_fu_509_p1(16 - 1 downto 0);
    tmp_6_2_3_fu_1043_p0 <= ap_const_lv29_1FFFD631(15 - 1 downto 0);
    tmp_6_2_3_fu_1043_p1 <= tmp_5_1_3_cast_fu_512_p1(16 - 1 downto 0);
    tmp_6_2_5_fu_1037_p0 <= ap_const_lv29_1FFFEEAF(14 - 1 downto 0);
    tmp_6_2_5_fu_1037_p1 <= tmp_5_1_5_cast_fu_515_p1(16 - 1 downto 0);
    tmp_6_3_1_fu_956_p0 <= ap_const_lv29_1FFFF72C(13 - 1 downto 0);
    tmp_6_3_1_fu_956_p1 <= tmp_5_1_1_cast_fu_509_p1(16 - 1 downto 0);
    tmp_6_3_3_fu_950_p0 <= ap_const_lv29_1FFFE6DC(14 - 1 downto 0);
    tmp_6_3_3_fu_950_p1 <= tmp_5_1_3_cast_fu_512_p1(16 - 1 downto 0);
    tmp_6_3_5_fu_944_p0 <= ap_const_lv29_2C63(15 - 1 downto 0);
    tmp_6_3_5_fu_944_p1 <= tmp_5_1_5_cast_fu_515_p1(16 - 1 downto 0);
        tmp_6_4_557_cast_fu_459_p1 <= std_logic_vector(resize(signed(tmp_6_4_s_fu_453_p2),29));

    tmp_6_4_s_fu_453_p2 <= std_logic_vector(signed(tmp_5_1_6_cast_cast_fu_425_p1) + signed(tmp_5_1_5_cast_cast_fu_421_p1));
    tmp_6_5_1_fu_901_p0 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    tmp_6_5_1_fu_901_p1 <= tmp_5_1_1_cast_fu_509_p1(16 - 1 downto 0);
    tmp_6_5_3_fu_895_p0 <= ap_const_lv29_25A1(15 - 1 downto 0);
    tmp_6_5_3_fu_895_p1 <= tmp_5_1_3_cast_fu_512_p1(16 - 1 downto 0);
    tmp_6_5_5_fu_889_p0 <= ap_const_lv29_1FFFF72C(13 - 1 downto 0);
    tmp_6_5_5_fu_889_p1 <= tmp_5_1_5_cast_fu_515_p1(16 - 1 downto 0);
    tmp_6_6_1_fu_804_p0 <= ap_const_lv29_1FFFD631(15 - 1 downto 0);
    tmp_6_6_1_fu_804_p1 <= tmp_5_1_1_cast_reg_1224(16 - 1 downto 0);
    tmp_6_6_3_fu_799_p0 <= ap_const_lv29_1FFFEEAF(14 - 1 downto 0);
    tmp_6_6_3_fu_799_p1 <= tmp_5_1_3_cast_reg_1235(16 - 1 downto 0);
    tmp_6_6_5_fu_794_p0 <= ap_const_lv29_29CF(15 - 1 downto 0);
    tmp_6_6_5_fu_794_p1 <= tmp_5_1_5_cast_reg_1246(16 - 1 downto 0);
    tmp_6_7_1_fu_828_p0 <= ap_const_lv29_1FFFE6DC(14 - 1 downto 0);
    tmp_6_7_1_fu_828_p1 <= tmp_5_1_1_cast_reg_1224(16 - 1 downto 0);
    tmp_6_7_3_fu_823_p0 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    tmp_6_7_3_fu_823_p1 <= tmp_5_1_3_cast_reg_1235(16 - 1 downto 0);
    tmp_6_7_5_fu_884_p0 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    tmp_6_7_5_fu_884_p1 <= tmp_5_1_5_cast_reg_1246(16 - 1 downto 0);
    tmp_6_fu_299_p3 <= (src_q0 & ap_const_lv13_0);
    tmp_7_4_1_fu_429_p2 <= std_logic_vector(unsigned(tmp_6_fu_299_p3) - unsigned(tmp_6_0_1_fu_307_p3));
    tmp_7_4_2_fu_435_p2 <= std_logic_vector(unsigned(tmp_7_4_1_fu_429_p2) - unsigned(tmp_6_0_2_fu_315_p3));
    tmp_7_fu_715_p2 <= std_logic_vector(unsigned(tmp49_fu_707_p2) + unsigned(tmp52_fu_711_p2));
    tmp_fu_375_p2 <= std_logic_vector(unsigned(tmp3_fu_363_p2) + unsigned(tmp4_fu_369_p2));
    tmp_s_fu_405_p2 <= std_logic_vector(unsigned(tmp_fu_375_p2) + unsigned(tmp5_fu_399_p2));
end behav;
