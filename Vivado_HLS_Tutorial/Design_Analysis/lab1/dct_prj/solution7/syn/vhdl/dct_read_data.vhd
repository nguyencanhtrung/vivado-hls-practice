-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_read_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_0_ce0 : OUT STD_LOGIC;
    buf_0_we0 : OUT STD_LOGIC;
    buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_0_ce1 : OUT STD_LOGIC;
    buf_0_we1 : OUT STD_LOGIC;
    buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_1_ce0 : OUT STD_LOGIC;
    buf_1_we0 : OUT STD_LOGIC;
    buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_1_ce1 : OUT STD_LOGIC;
    buf_1_we1 : OUT STD_LOGIC;
    buf_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2_ce0 : OUT STD_LOGIC;
    buf_2_we0 : OUT STD_LOGIC;
    buf_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2_ce1 : OUT STD_LOGIC;
    buf_2_we1 : OUT STD_LOGIC;
    buf_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_3_ce0 : OUT STD_LOGIC;
    buf_3_we0 : OUT STD_LOGIC;
    buf_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buf_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_3_ce1 : OUT STD_LOGIC;
    buf_3_we1 : OUT STD_LOGIC;
    buf_3_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_read_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal r_reg_231 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal r_2_fu_248_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_2_reg_378 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_258_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_383 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_266_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_load_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal input_load_1_reg_414 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_2_reg_429 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal input_load_3_reg_434 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_4_reg_449 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal input_load_5_reg_454 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_bdd_166 : BOOLEAN;
    signal r_phi_fu_235_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_8_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_362_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_254_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_s_fu_279_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_1_fu_290_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_2_fu_300_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_3_fu_310_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_4_fu_320_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_5_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_6_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_286 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond1_fu_242_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_166))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_166)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((exitcond1_reg_374 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- r_reg_231 assign process. --
    r_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0))) then 
                r_reg_231 <= r_2_reg_378;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_166))) then 
                r_reg_231 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                exitcond1_reg_374 <= exitcond1_fu_242_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_374 = ap_const_lv1_0))) then
                input_load_1_reg_414 <= input_r_q1;
                input_load_reg_409 <= input_r_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                input_load_2_reg_429 <= input_r_q0;
                input_load_3_reg_434 <= input_r_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                input_load_4_reg_449 <= input_r_q0;
                input_load_5_reg_454 <= input_r_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                r_2_reg_378 <= r_2_fu_248_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_fu_242_p2 = ap_const_lv1_0))) then
                    tmp_18_reg_393(4 downto 1) <= tmp_18_fu_266_p3(4 downto 1);
                    tmp_reg_383(5 downto 3) <= tmp_fu_258_p3(5 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_383(2 downto 0) <= "000";
    tmp_18_reg_393(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond1_fu_242_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_166)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_166)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond1_fu_242_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st7_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_166 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_286 assign process. --
    ap_sig_bdd_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_286 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_286)
    begin
        if (ap_sig_bdd_286) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_address0 <= tmp_20_fu_350_p1(4 - 1 downto 0);
    buf_0_address1 <= tmp_22_fu_362_p3(4 - 1 downto 0);

    -- buf_0_ce0 assign process. --
    buf_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_0_ce0 <= ap_const_logic_1;
        else 
            buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_0_ce1 assign process. --
    buf_0_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_0_ce1 <= ap_const_logic_1;
        else 
            buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_d0 <= input_load_reg_409;
    buf_0_d1 <= input_load_1_reg_414;

    -- buf_0_we0 assign process. --
    buf_0_we0_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_0_we0 <= ap_const_logic_1;
        else 
            buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_0_we1 assign process. --
    buf_0_we1_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_0_we1 <= ap_const_logic_1;
        else 
            buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_address0 <= tmp_20_fu_350_p1(4 - 1 downto 0);
    buf_1_address1 <= tmp_22_fu_362_p3(4 - 1 downto 0);

    -- buf_1_ce0 assign process. --
    buf_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_1_ce0 <= ap_const_logic_1;
        else 
            buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_1_ce1 assign process. --
    buf_1_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_1_ce1 <= ap_const_logic_1;
        else 
            buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_d0 <= input_load_2_reg_429;
    buf_1_d1 <= input_load_3_reg_434;

    -- buf_1_we0 assign process. --
    buf_1_we0_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_1_we0 <= ap_const_logic_1;
        else 
            buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_1_we1 assign process. --
    buf_1_we1_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_1_we1 <= ap_const_logic_1;
        else 
            buf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_address0 <= tmp_20_fu_350_p1(4 - 1 downto 0);
    buf_2_address1 <= tmp_22_fu_362_p3(4 - 1 downto 0);

    -- buf_2_ce0 assign process. --
    buf_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_2_ce0 <= ap_const_logic_1;
        else 
            buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2_ce1 assign process. --
    buf_2_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_2_ce1 <= ap_const_logic_1;
        else 
            buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2_d0 <= input_load_4_reg_449;
    buf_2_d1 <= input_load_5_reg_454;

    -- buf_2_we0 assign process. --
    buf_2_we0_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_2_we0 <= ap_const_logic_1;
        else 
            buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2_we1 assign process. --
    buf_2_we1_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_2_we1 <= ap_const_logic_1;
        else 
            buf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_address0 <= tmp_20_fu_350_p1(4 - 1 downto 0);
    buf_3_address1 <= tmp_22_fu_362_p3(4 - 1 downto 0);

    -- buf_3_ce0 assign process. --
    buf_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_3_ce0 <= ap_const_logic_1;
        else 
            buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_3_ce1 assign process. --
    buf_3_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            buf_3_ce1 <= ap_const_logic_1;
        else 
            buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_3_d0 <= input_r_q0;
    buf_3_d1 <= input_r_q1;

    -- buf_3_we0 assign process. --
    buf_3_we0_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_3_we0 <= ap_const_logic_1;
        else 
            buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_3_we1 assign process. --
    buf_3_we1_assign_proc : process(exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0)))) then 
            buf_3_we1 <= ap_const_logic_1;
        else 
            buf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_242_p2 <= "1" when (r_phi_fu_235_p4 = ap_const_lv4_8) else "0";

    -- input_r_address0 assign process. --
    input_r_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_s_fu_274_p1, tmp_2_fu_295_p1, tmp_4_fu_315_p1, tmp_6_fu_335_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                input_r_address0 <= tmp_6_fu_335_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                input_r_address0 <= tmp_4_fu_315_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                input_r_address0 <= tmp_2_fu_295_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                input_r_address0 <= tmp_s_fu_274_p1(6 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- input_r_address1 assign process. --
    input_r_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_1_8_fu_285_p1, tmp_3_fu_305_p1, tmp_5_fu_325_p1, tmp_7_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                input_r_address1 <= tmp_7_fu_345_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                input_r_address1 <= tmp_5_fu_325_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                input_r_address1 <= tmp_3_fu_305_p1(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                input_r_address1 <= tmp_1_8_fu_285_p1(6 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- input_r_ce0 assign process. --
    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- input_r_ce1 assign process. --
    input_r_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_2_fu_248_p2 <= std_logic_vector(unsigned(r_phi_fu_235_p4) + unsigned(ap_const_lv4_1));

    -- r_phi_fu_235_p4 assign process. --
    r_phi_fu_235_p4_assign_proc : process(r_reg_231, exitcond1_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, r_2_reg_378)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_374 = ap_const_lv1_0))) then 
            r_phi_fu_235_p4 <= r_2_reg_378;
        else 
            r_phi_fu_235_p4 <= r_reg_231;
        end if; 
    end process;

    tmp_18_fu_266_p3 <= (r_phi_fu_235_p4 & ap_const_lv1_0);
    tmp_19_fu_254_p1 <= r_phi_fu_235_p4(3 - 1 downto 0);
    tmp_1_8_fu_285_p1 <= std_logic_vector(resize(unsigned(tmp_9_s_fu_279_p2),64));
    tmp_20_fu_350_p1 <= std_logic_vector(resize(unsigned(tmp_18_reg_393),64));
    tmp_21_fu_357_p2 <= (tmp_18_reg_393 or ap_const_lv5_1);
    tmp_22_fu_362_p3 <= (ap_const_lv59_0 & tmp_21_fu_357_p2);
    tmp_2_fu_295_p1 <= std_logic_vector(resize(unsigned(tmp_9_1_fu_290_p2),64));
    tmp_3_fu_305_p1 <= std_logic_vector(resize(unsigned(tmp_9_2_fu_300_p2),64));
    tmp_4_fu_315_p1 <= std_logic_vector(resize(unsigned(tmp_9_3_fu_310_p2),64));
    tmp_5_fu_325_p1 <= std_logic_vector(resize(unsigned(tmp_9_4_fu_320_p2),64));
    tmp_6_fu_335_p1 <= std_logic_vector(resize(unsigned(tmp_9_5_fu_330_p2),64));
    tmp_7_fu_345_p1 <= std_logic_vector(resize(unsigned(tmp_9_6_fu_340_p2),64));
    tmp_9_1_fu_290_p2 <= (tmp_reg_383 or ap_const_lv6_2);
    tmp_9_2_fu_300_p2 <= (tmp_reg_383 or ap_const_lv6_3);
    tmp_9_3_fu_310_p2 <= (tmp_reg_383 or ap_const_lv6_4);
    tmp_9_4_fu_320_p2 <= (tmp_reg_383 or ap_const_lv6_5);
    tmp_9_5_fu_330_p2 <= (tmp_reg_383 or ap_const_lv6_6);
    tmp_9_6_fu_340_p2 <= (tmp_reg_383 or ap_const_lv6_7);
    tmp_9_s_fu_279_p2 <= (tmp_fu_258_p3 or ap_const_lv6_1);
    tmp_fu_258_p3 <= (tmp_19_fu_254_p1 & ap_const_lv3_0);
    tmp_s_fu_274_p1 <= std_logic_vector(resize(unsigned(tmp_fu_258_p3),64));
end behav;
