// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hamming_window,hls_ip_2015_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=260,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=88,HLS_SYN_LUT=34}" *)

module hamming_window (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outdata_address0,
        outdata_ce0,
        outdata_we0,
        outdata_d0,
        indata_address0,
        indata_ce0,
        indata_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st6_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] outdata_address0;
output   outdata_ce0;
output   outdata_we0;
output  [31:0] outdata_d0;
output  [7:0] indata_address0;
output   indata_ce0;
input  [15:0] indata_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outdata_ce0;
reg outdata_we0;
reg indata_ce0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_19;
wire   [7:0] window_coeff_address0;
reg    window_coeff_ce0;
wire   [13:0] window_coeff_q0;
reg   [8:0] i_1_reg_74;
wire   [0:0] exitcond_fu_85_p2;
reg   [0:0] exitcond_reg_115;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_55;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_115_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_reg_115_pp0_it2;
wire   [8:0] i_fu_91_p2;
wire   [63:0] tmp_s_fu_97_p1;
reg   [63:0] tmp_s_reg_124;
reg   [63:0] ap_reg_ppstg_tmp_s_reg_124_pp0_it1;
reg   [63:0] ap_reg_ppstg_tmp_s_reg_124_pp0_it2;
reg   [13:0] window_coeff_load_reg_139;
reg  signed [15:0] indata_load_reg_144;
wire  signed [31:0] tmp_5_fu_109_p2;
reg  signed [31:0] tmp_5_reg_149;
wire   [13:0] tmp_5_fu_109_p1;
reg    ap_sig_cseq_ST_st6_fsm_2;
reg    ap_sig_bdd_128;
reg   [2:0] ap_NS_fsm;
wire   [31:0] tmp_5_fu_109_p10;


hamming_window_window_coeff #(
    .DataWidth( 14 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
window_coeff_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( window_coeff_address0 ),
    .ce0( window_coeff_ce0 ),
    .q0( window_coeff_q0 )
);

hamming_window_mul_mul_16s_14ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
hamming_window_mul_mul_16s_14ns_32_1_U1(
    .din0( indata_load_reg_144 ),
    .din1( tmp_5_fu_109_p1 ),
    .dout( tmp_5_fu_109_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_fu_85_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_fu_85_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_fu_85_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_1_reg_74 <= ap_const_lv9_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_85_p2 == ap_const_lv1_0))) begin
        i_1_reg_74 <= i_fu_91_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_exitcond_reg_115_pp0_it1 <= exitcond_reg_115;
        ap_reg_ppstg_tmp_s_reg_124_pp0_it1[8 : 0] <= tmp_s_reg_124[8 : 0];
        exitcond_reg_115 <= exitcond_fu_85_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_exitcond_reg_115_pp0_it2 <= ap_reg_ppstg_exitcond_reg_115_pp0_it1;
        ap_reg_ppstg_tmp_s_reg_124_pp0_it2[8 : 0] <= ap_reg_ppstg_tmp_s_reg_124_pp0_it1[8 : 0];
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_reg_115 == ap_const_lv1_0))) begin
        indata_load_reg_144 <= indata_q0;
        window_coeff_load_reg_139 <= window_coeff_q0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_reg_ppstg_exitcond_reg_115_pp0_it1 == ap_const_lv1_0)) begin
        tmp_5_reg_149 <= tmp_5_fu_109_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_fu_85_p2 == ap_const_lv1_0))) begin
        tmp_s_reg_124[8 : 0] <= tmp_s_fu_97_p1[8 : 0];
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_55) begin
    if (ap_sig_bdd_55) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_19) begin
    if (ap_sig_bdd_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_2 assign process. ///
always @ (ap_sig_bdd_128) begin
    if (ap_sig_bdd_128) begin
        ap_sig_cseq_ST_st6_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_2 = ap_const_logic_0;
    end
end

/// indata_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        indata_ce0 = ap_const_logic_1;
    end else begin
        indata_ce0 = ap_const_logic_0;
    end
end

/// outdata_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it3) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it3)) begin
        outdata_ce0 = ap_const_logic_1;
    end else begin
        outdata_ce0 = ap_const_logic_0;
    end
end

/// outdata_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it3 or ap_reg_ppstg_exitcond_reg_115_pp0_it2) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_reg_ppstg_exitcond_reg_115_pp0_it2 == ap_const_lv1_0))) begin
        outdata_we0 = ap_const_logic_1;
    end else begin
        outdata_we0 = ap_const_logic_0;
    end
end

/// window_coeff_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        window_coeff_ce0 = ap_const_logic_1;
    end else begin
        window_coeff_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_85_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_85_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_85_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st6_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_2;
            end
        end
        ap_ST_st6_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_128 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_128 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_19 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_19 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_55 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_55 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond_fu_85_p2 = (i_1_reg_74 == ap_const_lv9_100? 1'b1: 1'b0);
assign i_fu_91_p2 = (i_1_reg_74 + ap_const_lv9_1);
assign indata_address0 = tmp_s_fu_97_p1;
assign outdata_address0 = ap_reg_ppstg_tmp_s_reg_124_pp0_it2;
assign outdata_d0 = tmp_5_reg_149;
assign tmp_5_fu_109_p1 = tmp_5_fu_109_p10;
assign tmp_5_fu_109_p10 = window_coeff_load_reg_139;
assign tmp_s_fu_97_p1 = i_1_reg_74;
assign window_coeff_address0 = tmp_s_fu_97_p1;
always @ (posedge ap_clk) begin
    tmp_s_reg_124[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_s_reg_124_pp0_it1[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_s_reg_124_pp0_it2[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end



endmodule //hamming_window

