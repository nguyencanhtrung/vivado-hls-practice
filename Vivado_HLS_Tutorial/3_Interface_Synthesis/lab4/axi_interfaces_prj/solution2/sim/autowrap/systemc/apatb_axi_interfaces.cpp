// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "d_o_0"
#define AUTOTB_TVOUT_d_o_0  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_0.dat"
#define AUTOTB_TVIN_d_o_0  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_0.dat"
// wrapc file define: "d_o_1"
#define AUTOTB_TVOUT_d_o_1  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_1.dat"
#define AUTOTB_TVIN_d_o_1  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_1.dat"
// wrapc file define: "d_o_2"
#define AUTOTB_TVOUT_d_o_2  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_2.dat"
#define AUTOTB_TVIN_d_o_2  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_2.dat"
// wrapc file define: "d_o_3"
#define AUTOTB_TVOUT_d_o_3  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_3.dat"
#define AUTOTB_TVIN_d_o_3  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_3.dat"
// wrapc file define: "d_o_4"
#define AUTOTB_TVOUT_d_o_4  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_4.dat"
#define AUTOTB_TVIN_d_o_4  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_4.dat"
// wrapc file define: "d_o_5"
#define AUTOTB_TVOUT_d_o_5  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_5.dat"
#define AUTOTB_TVIN_d_o_5  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_5.dat"
// wrapc file define: "d_o_6"
#define AUTOTB_TVOUT_d_o_6  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_6.dat"
#define AUTOTB_TVIN_d_o_6  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_6.dat"
// wrapc file define: "d_o_7"
#define AUTOTB_TVOUT_d_o_7  "../tv/cdatafile/c.axi_interfaces.autotvout_d_o_7.dat"
#define AUTOTB_TVIN_d_o_7  "../tv/cdatafile/c.axi_interfaces.autotvin_d_o_7.dat"
// wrapc file define: "d_i_0"
#define AUTOTB_TVIN_d_i_0  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_0.dat"
// wrapc file define: "d_i_1"
#define AUTOTB_TVIN_d_i_1  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_1.dat"
// wrapc file define: "d_i_2"
#define AUTOTB_TVIN_d_i_2  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_2.dat"
// wrapc file define: "d_i_3"
#define AUTOTB_TVIN_d_i_3  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_3.dat"
// wrapc file define: "d_i_4"
#define AUTOTB_TVIN_d_i_4  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_4.dat"
// wrapc file define: "d_i_5"
#define AUTOTB_TVIN_d_i_5  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_5.dat"
// wrapc file define: "d_i_6"
#define AUTOTB_TVIN_d_i_6  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_6.dat"
// wrapc file define: "d_i_7"
#define AUTOTB_TVIN_d_i_7  "../tv/cdatafile/c.axi_interfaces.autotvin_d_i_7.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "d_o_0"
#define AUTOTB_TVOUT_PC_d_o_0  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_0.dat"
// tvout file define: "d_o_1"
#define AUTOTB_TVOUT_PC_d_o_1  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_1.dat"
// tvout file define: "d_o_2"
#define AUTOTB_TVOUT_PC_d_o_2  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_2.dat"
// tvout file define: "d_o_3"
#define AUTOTB_TVOUT_PC_d_o_3  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_3.dat"
// tvout file define: "d_o_4"
#define AUTOTB_TVOUT_PC_d_o_4  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_4.dat"
// tvout file define: "d_o_5"
#define AUTOTB_TVOUT_PC_d_o_5  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_5.dat"
// tvout file define: "d_o_6"
#define AUTOTB_TVOUT_PC_d_o_6  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_6.dat"
// tvout file define: "d_o_7"
#define AUTOTB_TVOUT_PC_d_o_7  "../tv/rtldatafile/rtl.axi_interfaces.autotvout_d_o_7.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			d_o_0_depth = 0;
			d_o_1_depth = 0;
			d_o_2_depth = 0;
			d_o_3_depth = 0;
			d_o_4_depth = 0;
			d_o_5_depth = 0;
			d_o_6_depth = 0;
			d_o_7_depth = 0;
			d_i_0_depth = 0;
			d_i_1_depth = 0;
			d_i_2_depth = 0;
			d_i_3_depth = 0;
			d_i_4_depth = 0;
			d_i_5_depth = 0;
			d_i_6_depth = 0;
			d_i_7_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{d_o_0 " << d_o_0_depth << "}\n";
			total_list << "{d_o_1 " << d_o_1_depth << "}\n";
			total_list << "{d_o_2 " << d_o_2_depth << "}\n";
			total_list << "{d_o_3 " << d_o_3_depth << "}\n";
			total_list << "{d_o_4 " << d_o_4_depth << "}\n";
			total_list << "{d_o_5 " << d_o_5_depth << "}\n";
			total_list << "{d_o_6 " << d_o_6_depth << "}\n";
			total_list << "{d_o_7 " << d_o_7_depth << "}\n";
			total_list << "{d_i_0 " << d_i_0_depth << "}\n";
			total_list << "{d_i_1 " << d_i_1_depth << "}\n";
			total_list << "{d_i_2 " << d_i_2_depth << "}\n";
			total_list << "{d_i_3 " << d_i_3_depth << "}\n";
			total_list << "{d_i_4 " << d_i_4_depth << "}\n";
			total_list << "{d_i_5 " << d_i_5_depth << "}\n";
			total_list << "{d_i_6 " << d_i_6_depth << "}\n";
			total_list << "{d_i_7 " << d_i_7_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int d_o_0_depth;
		int d_o_1_depth;
		int d_o_2_depth;
		int d_o_3_depth;
		int d_o_4_depth;
		int d_o_5_depth;
		int d_o_6_depth;
		int d_o_7_depth;
		int d_i_0_depth;
		int d_i_1_depth;
		int d_i_2_depth;
		int d_i_3_depth;
		int d_i_4_depth;
		int d_i_5_depth;
		int d_i_6_depth;
		int d_i_7_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void axi_interfaces (
short d_o[32],
short d_i[32]);

#define axi_interfaces AESL_ORIG_DUT_axi_interfaces
extern "C" void axi_interfaces (
short d_o[32],
short d_i[32]);
#undef axi_interfaces

void axi_interfaces (
short d_o[32],
short d_i[32])
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "d_o_0"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_0, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_0, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_0, AESL_token); // data

			sc_bv<16> *d_o_0_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_0_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_0, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_0))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_0
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_0_24_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (0) => (24) @ (8)
							for (int i_0 = 0; i_0 <= 24; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_0_24_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_0_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (0) => (24) @ (8)
							for (int i_0 = 0; i_0 <= 24; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_0_24_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_0_24_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_0_pc_buffer;
		}

		// output port post check: "d_o_1"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_1, AESL_token); // data

			sc_bv<16> *d_o_1_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_1
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_1_25_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (1) => (25) @ (8)
							for (int i_0 = 1; i_0 <= 25; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_1_25_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_1_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (1) => (25) @ (8)
							for (int i_0 = 1; i_0 <= 25; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_1_25_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_1_25_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_1_pc_buffer;
		}

		// output port post check: "d_o_2"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_2, AESL_token); // data

			sc_bv<16> *d_o_2_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_2
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_2_26_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (2) => (26) @ (8)
							for (int i_0 = 2; i_0 <= 26; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_2_26_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_2_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (2) => (26) @ (8)
							for (int i_0 = 2; i_0 <= 26; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_2_26_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_2_26_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_2_pc_buffer;
		}

		// output port post check: "d_o_3"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_3, AESL_token); // data

			sc_bv<16> *d_o_3_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_3
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_3_27_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (3) => (27) @ (8)
							for (int i_0 = 3; i_0 <= 27; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_3_27_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_3_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (3) => (27) @ (8)
							for (int i_0 = 3; i_0 <= 27; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_3_27_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_3_27_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_3_pc_buffer;
		}

		// output port post check: "d_o_4"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_4, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_4, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_4, AESL_token); // data

			sc_bv<16> *d_o_4_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_4_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_4, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_4))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_4
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_4_28_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (4) => (28) @ (8)
							for (int i_0 = 4; i_0 <= 28; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_4_28_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_4_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (4) => (28) @ (8)
							for (int i_0 = 4; i_0 <= 28; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_4_28_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_4_28_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_4_pc_buffer;
		}

		// output port post check: "d_o_5"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_5, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_5, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_5, AESL_token); // data

			sc_bv<16> *d_o_5_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_5_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_5, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_5))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_5
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_5_29_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (5) => (29) @ (8)
							for (int i_0 = 5; i_0 <= 29; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_5_29_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_5_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (5) => (29) @ (8)
							for (int i_0 = 5; i_0 <= 29; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_5_29_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_5_29_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_5_pc_buffer;
		}

		// output port post check: "d_o_6"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_6, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_6, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_6, AESL_token); // data

			sc_bv<16> *d_o_6_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_6_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_6, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_6))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_6
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_6_30_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (6) => (30) @ (8)
							for (int i_0 = 6; i_0 <= 30; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_6_30_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_6_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (6) => (30) @ (8)
							for (int i_0 = 6; i_0 <= 30; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_6_30_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_6_30_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_6_pc_buffer;
		}

		// output port post check: "d_o_7"
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_7, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_d_o_7, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_d_o_7, AESL_token); // data

			sc_bv<16> *d_o_7_pc_buffer = new sc_bv<16>[4];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'd_o_7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					d_o_7_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_d_o_7, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_d_o_7))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: d_o_7
				{
					// bitslice(15, 0)
					// {
						// celement: d_o(15, 0)
						// {
							sc_lv<16>* d_o_lv0_7_31_8 = new sc_lv<16>[4];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (7) => (31) @ (8)
							for (int i_0 = 7; i_0 <= 31; i_0 += 8)
							{
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o_lv0_7_31_8[hls_map_index++].range(15, 0) = sc_bv<16>(d_o_7_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: d_o(15, 0)
						{
							// carray: (7) => (31) @ (8)
							for (int i_0 = 7; i_0 <= 31; i_0 += 8)
							{
								// sub                    : i_0
								// ori_name               : d_o[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : d_o[0]
								// output_left_conversion : d_o[i_0]
								// output_type_conversion : (d_o_lv0_7_31_8[hls_map_index++]).to_uint64()
								if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
								{
									d_o[i_0] = (d_o_lv0_7_31_8[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] d_o_7_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "d_o_0"
		char* tvin_d_o_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_0);
		char* tvout_d_o_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_0);

		// "d_o_1"
		char* tvin_d_o_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_1);
		char* tvout_d_o_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_1);

		// "d_o_2"
		char* tvin_d_o_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_2);
		char* tvout_d_o_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_2);

		// "d_o_3"
		char* tvin_d_o_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_3);
		char* tvout_d_o_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_3);

		// "d_o_4"
		char* tvin_d_o_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_4);
		char* tvout_d_o_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_4);

		// "d_o_5"
		char* tvin_d_o_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_5);
		char* tvout_d_o_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_5);

		// "d_o_6"
		char* tvin_d_o_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_6);
		char* tvout_d_o_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_6);

		// "d_o_7"
		char* tvin_d_o_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_o_7);
		char* tvout_d_o_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_d_o_7);

		// "d_i_0"
		char* tvin_d_i_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_0);

		// "d_i_1"
		char* tvin_d_i_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_1);

		// "d_i_2"
		char* tvin_d_i_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_2);

		// "d_i_3"
		char* tvin_d_i_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_3);

		// "d_i_4"
		char* tvin_d_i_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_4);

		// "d_i_5"
		char* tvin_d_i_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_5);

		// "d_i_6"
		char* tvin_d_i_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_6);

		// "d_i_7"
		char* tvin_d_i_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_d_i_7);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_d_o_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_0, tvin_d_o_0);

		sc_bv<16>* d_o_0_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_0
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (0) => (24) @ (8)
					for (int i_0 = 0; i_0 <= 24; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_0_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_0, "%s\n", (d_o_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_0, tvin_d_o_0);
		}

		tcl_file.set_num(4, &tcl_file.d_o_0_depth);
		sprintf(tvin_d_o_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_0, tvin_d_o_0);

		// release memory allocation
		delete [] d_o_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_1, tvin_d_o_1);

		sc_bv<16>* d_o_1_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_1
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (1) => (25) @ (8)
					for (int i_0 = 1; i_0 <= 25; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_1_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_1, "%s\n", (d_o_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_1, tvin_d_o_1);
		}

		tcl_file.set_num(4, &tcl_file.d_o_1_depth);
		sprintf(tvin_d_o_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_1, tvin_d_o_1);

		// release memory allocation
		delete [] d_o_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_2, tvin_d_o_2);

		sc_bv<16>* d_o_2_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_2
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (2) => (26) @ (8)
					for (int i_0 = 2; i_0 <= 26; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_2_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_2, "%s\n", (d_o_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_2, tvin_d_o_2);
		}

		tcl_file.set_num(4, &tcl_file.d_o_2_depth);
		sprintf(tvin_d_o_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_2, tvin_d_o_2);

		// release memory allocation
		delete [] d_o_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_3, tvin_d_o_3);

		sc_bv<16>* d_o_3_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_3
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (3) => (27) @ (8)
					for (int i_0 = 3; i_0 <= 27; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_3_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_3, "%s\n", (d_o_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_3, tvin_d_o_3);
		}

		tcl_file.set_num(4, &tcl_file.d_o_3_depth);
		sprintf(tvin_d_o_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_3, tvin_d_o_3);

		// release memory allocation
		delete [] d_o_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_4, tvin_d_o_4);

		sc_bv<16>* d_o_4_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_4
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (4) => (28) @ (8)
					for (int i_0 = 4; i_0 <= 28; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_4_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_4, "%s\n", (d_o_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_4, tvin_d_o_4);
		}

		tcl_file.set_num(4, &tcl_file.d_o_4_depth);
		sprintf(tvin_d_o_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_4, tvin_d_o_4);

		// release memory allocation
		delete [] d_o_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_5, tvin_d_o_5);

		sc_bv<16>* d_o_5_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_5
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (5) => (29) @ (8)
					for (int i_0 = 5; i_0 <= 29; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_5_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_5, "%s\n", (d_o_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_5, tvin_d_o_5);
		}

		tcl_file.set_num(4, &tcl_file.d_o_5_depth);
		sprintf(tvin_d_o_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_5, tvin_d_o_5);

		// release memory allocation
		delete [] d_o_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_6, tvin_d_o_6);

		sc_bv<16>* d_o_6_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_6
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (6) => (30) @ (8)
					for (int i_0 = 6; i_0 <= 30; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_6_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_6, "%s\n", (d_o_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_6, tvin_d_o_6);
		}

		tcl_file.set_num(4, &tcl_file.d_o_6_depth);
		sprintf(tvin_d_o_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_6, tvin_d_o_6);

		// release memory allocation
		delete [] d_o_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_o_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_o_7, tvin_d_o_7);

		sc_bv<16>* d_o_7_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_7
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (7) => (31) @ (8)
					for (int i_0 = 7; i_0 <= 31; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_7_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_o_7, "%s\n", (d_o_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_o_7, tvin_d_o_7);
		}

		tcl_file.set_num(4, &tcl_file.d_o_7_depth);
		sprintf(tvin_d_o_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_o_7, tvin_d_o_7);

		// release memory allocation
		delete [] d_o_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_0, tvin_d_i_0);

		sc_bv<16>* d_i_0_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_0
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (0) => (24) @ (8)
					for (int i_0 = 0; i_0 <= 24; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_0_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_0, "%s\n", (d_i_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_0, tvin_d_i_0);
		}

		tcl_file.set_num(4, &tcl_file.d_i_0_depth);
		sprintf(tvin_d_i_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_0, tvin_d_i_0);

		// release memory allocation
		delete [] d_i_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_1, tvin_d_i_1);

		sc_bv<16>* d_i_1_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_1
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (1) => (25) @ (8)
					for (int i_0 = 1; i_0 <= 25; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_1_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_1, "%s\n", (d_i_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_1, tvin_d_i_1);
		}

		tcl_file.set_num(4, &tcl_file.d_i_1_depth);
		sprintf(tvin_d_i_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_1, tvin_d_i_1);

		// release memory allocation
		delete [] d_i_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_2, tvin_d_i_2);

		sc_bv<16>* d_i_2_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_2
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (2) => (26) @ (8)
					for (int i_0 = 2; i_0 <= 26; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_2_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_2, "%s\n", (d_i_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_2, tvin_d_i_2);
		}

		tcl_file.set_num(4, &tcl_file.d_i_2_depth);
		sprintf(tvin_d_i_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_2, tvin_d_i_2);

		// release memory allocation
		delete [] d_i_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_3, tvin_d_i_3);

		sc_bv<16>* d_i_3_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_3
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (3) => (27) @ (8)
					for (int i_0 = 3; i_0 <= 27; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_3_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_3, "%s\n", (d_i_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_3, tvin_d_i_3);
		}

		tcl_file.set_num(4, &tcl_file.d_i_3_depth);
		sprintf(tvin_d_i_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_3, tvin_d_i_3);

		// release memory allocation
		delete [] d_i_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_4, tvin_d_i_4);

		sc_bv<16>* d_i_4_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_4
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (4) => (28) @ (8)
					for (int i_0 = 4; i_0 <= 28; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_4_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_4, "%s\n", (d_i_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_4, tvin_d_i_4);
		}

		tcl_file.set_num(4, &tcl_file.d_i_4_depth);
		sprintf(tvin_d_i_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_4, tvin_d_i_4);

		// release memory allocation
		delete [] d_i_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_5, tvin_d_i_5);

		sc_bv<16>* d_i_5_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_5
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (5) => (29) @ (8)
					for (int i_0 = 5; i_0 <= 29; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_5_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_5, "%s\n", (d_i_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_5, tvin_d_i_5);
		}

		tcl_file.set_num(4, &tcl_file.d_i_5_depth);
		sprintf(tvin_d_i_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_5, tvin_d_i_5);

		// release memory allocation
		delete [] d_i_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_6, tvin_d_i_6);

		sc_bv<16>* d_i_6_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_6
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (6) => (30) @ (8)
					for (int i_0 = 6; i_0 <= 30; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_6_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_6, "%s\n", (d_i_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_6, tvin_d_i_6);
		}

		tcl_file.set_num(4, &tcl_file.d_i_6_depth);
		sprintf(tvin_d_i_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_6, tvin_d_i_6);

		// release memory allocation
		delete [] d_i_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_d_i_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_d_i_7, tvin_d_i_7);

		sc_bv<16>* d_i_7_tvin_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_i_7
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_i(15, 0)
				{
					// carray: (7) => (31) @ (8)
					for (int i_0 = 7; i_0 <= 31; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_i[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_i[0]
						// regulate_c_name       : d_i
						// input_type_conversion : d_i[i_0]
						if (&(d_i[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_i_tmp_mem;
							d_i_tmp_mem = d_i[i_0];
							d_i_7_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = d_i_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvin_d_i_7, "%s\n", (d_i_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_d_i_7, tvin_d_i_7);
		}

		tcl_file.set_num(4, &tcl_file.d_i_7_depth);
		sprintf(tvin_d_i_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_d_i_7, tvin_d_i_7);

		// release memory allocation
		delete [] d_i_7_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		AESL_ORIG_DUT_axi_interfaces(d_o, d_i);


		// [[transaction]]
		sprintf(tvout_d_o_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_0, tvout_d_o_0);

		sc_bv<16>* d_o_0_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_0
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (0) => (24) @ (8)
					for (int i_0 = 0; i_0 <= 24; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_0_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_0, "%s\n", (d_o_0_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_0, tvout_d_o_0);
		}

		tcl_file.set_num(4, &tcl_file.d_o_0_depth);
		sprintf(tvout_d_o_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_0, tvout_d_o_0);

		// release memory allocation
		delete [] d_o_0_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_1, tvout_d_o_1);

		sc_bv<16>* d_o_1_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_1
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (1) => (25) @ (8)
					for (int i_0 = 1; i_0 <= 25; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_1_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_1, "%s\n", (d_o_1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_1, tvout_d_o_1);
		}

		tcl_file.set_num(4, &tcl_file.d_o_1_depth);
		sprintf(tvout_d_o_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_1, tvout_d_o_1);

		// release memory allocation
		delete [] d_o_1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_2, tvout_d_o_2);

		sc_bv<16>* d_o_2_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_2
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (2) => (26) @ (8)
					for (int i_0 = 2; i_0 <= 26; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_2_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_2, "%s\n", (d_o_2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_2, tvout_d_o_2);
		}

		tcl_file.set_num(4, &tcl_file.d_o_2_depth);
		sprintf(tvout_d_o_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_2, tvout_d_o_2);

		// release memory allocation
		delete [] d_o_2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_3, tvout_d_o_3);

		sc_bv<16>* d_o_3_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_3
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (3) => (27) @ (8)
					for (int i_0 = 3; i_0 <= 27; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_3_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_3, "%s\n", (d_o_3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_3, tvout_d_o_3);
		}

		tcl_file.set_num(4, &tcl_file.d_o_3_depth);
		sprintf(tvout_d_o_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_3, tvout_d_o_3);

		// release memory allocation
		delete [] d_o_3_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_4, tvout_d_o_4);

		sc_bv<16>* d_o_4_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_4
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (4) => (28) @ (8)
					for (int i_0 = 4; i_0 <= 28; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_4_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_4, "%s\n", (d_o_4_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_4, tvout_d_o_4);
		}

		tcl_file.set_num(4, &tcl_file.d_o_4_depth);
		sprintf(tvout_d_o_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_4, tvout_d_o_4);

		// release memory allocation
		delete [] d_o_4_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_5, tvout_d_o_5);

		sc_bv<16>* d_o_5_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_5
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (5) => (29) @ (8)
					for (int i_0 = 5; i_0 <= 29; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_5_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_5, "%s\n", (d_o_5_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_5, tvout_d_o_5);
		}

		tcl_file.set_num(4, &tcl_file.d_o_5_depth);
		sprintf(tvout_d_o_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_5, tvout_d_o_5);

		// release memory allocation
		delete [] d_o_5_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_6, tvout_d_o_6);

		sc_bv<16>* d_o_6_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_6
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (6) => (30) @ (8)
					for (int i_0 = 6; i_0 <= 30; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_6_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_6, "%s\n", (d_o_6_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_6, tvout_d_o_6);
		}

		tcl_file.set_num(4, &tcl_file.d_o_6_depth);
		sprintf(tvout_d_o_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_6, tvout_d_o_6);

		// release memory allocation
		delete [] d_o_6_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_d_o_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_d_o_7, tvout_d_o_7);

		sc_bv<16>* d_o_7_tvout_wrapc_buffer = new sc_bv<16>[4];

		// RTL Name: d_o_7
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: d_o(15, 0)
				{
					// carray: (7) => (31) @ (8)
					for (int i_0 = 7; i_0 <= 31; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : d_o[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : d_o[0]
						// regulate_c_name       : d_o
						// input_type_conversion : d_o[i_0]
						if (&(d_o[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> d_o_tmp_mem;
							d_o_tmp_mem = d_o[i_0];
							d_o_7_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = d_o_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 4; i++)
		{
			sprintf(tvout_d_o_7, "%s\n", (d_o_7_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_d_o_7, tvout_d_o_7);
		}

		tcl_file.set_num(4, &tcl_file.d_o_7_depth);
		sprintf(tvout_d_o_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_d_o_7, tvout_d_o_7);

		// release memory allocation
		delete [] d_o_7_tvout_wrapc_buffer;

		// release memory allocation: "d_o_0"
		delete [] tvout_d_o_0;
		delete [] tvin_d_o_0;
		// release memory allocation: "d_o_1"
		delete [] tvout_d_o_1;
		delete [] tvin_d_o_1;
		// release memory allocation: "d_o_2"
		delete [] tvout_d_o_2;
		delete [] tvin_d_o_2;
		// release memory allocation: "d_o_3"
		delete [] tvout_d_o_3;
		delete [] tvin_d_o_3;
		// release memory allocation: "d_o_4"
		delete [] tvout_d_o_4;
		delete [] tvin_d_o_4;
		// release memory allocation: "d_o_5"
		delete [] tvout_d_o_5;
		delete [] tvin_d_o_5;
		// release memory allocation: "d_o_6"
		delete [] tvout_d_o_6;
		delete [] tvin_d_o_6;
		// release memory allocation: "d_o_7"
		delete [] tvout_d_o_7;
		delete [] tvin_d_o_7;
		// release memory allocation: "d_i_0"
		delete [] tvin_d_i_0;
		// release memory allocation: "d_i_1"
		delete [] tvin_d_i_1;
		// release memory allocation: "d_i_2"
		delete [] tvin_d_i_2;
		// release memory allocation: "d_i_3"
		delete [] tvin_d_i_3;
		// release memory allocation: "d_i_4"
		delete [] tvin_d_i_4;
		// release memory allocation: "d_i_5"
		delete [] tvin_d_i_5;
		// release memory allocation: "d_i_6"
		delete [] tvin_d_i_6;
		// release memory allocation: "d_i_7"
		delete [] tvin_d_i_7;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

