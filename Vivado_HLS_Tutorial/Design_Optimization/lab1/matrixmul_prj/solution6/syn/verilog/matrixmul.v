// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.820000,HLS_SYN_LAT=6,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=487,HLS_SYN_LUT=191}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 5'b1;
parameter    ap_ST_pp0_stg1_fsm_1 = 5'b10;
parameter    ap_ST_pp0_stg2_fsm_2 = 5'b100;
parameter    ap_ST_pp0_stg3_fsm_3 = 5'b1000;
parameter    ap_ST_pp0_stg4_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_address0;
output   a_ce0;
input  [23:0] a_q0;
output  [1:0] a_address1;
output   a_ce1;
input  [23:0] a_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [23:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [23:0] b_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] a_address0;
reg a_ce0;
reg a_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg b_ce1;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;
reg[15:0] res_d0;
reg[3:0] res_address1;
reg res_ce1;
reg res_we1;
reg[15:0] res_d1;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_bdd_21;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_4;
reg    ap_sig_bdd_39;
wire  signed [15:0] tmp_s_fu_248_p1;
reg  signed [15:0] tmp_s_reg_634;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_1;
reg    ap_sig_bdd_92;
wire  signed [15:0] tmp_7_fu_256_p1;
reg  signed [15:0] tmp_7_reg_639;
wire  signed [15:0] tmp_5_0_0_1_fu_266_p1;
reg  signed [15:0] tmp_5_0_0_1_reg_645;
wire  signed [15:0] tmp_6_0_0_1_fu_270_p1;
reg  signed [15:0] tmp_6_0_0_1_reg_650;
wire  signed [15:0] tmp_5_0_0_2_fu_280_p1;
reg  signed [15:0] tmp_5_0_0_2_reg_656;
wire  signed [15:0] tmp_6_0_0_2_fu_284_p1;
reg  signed [15:0] tmp_6_0_0_2_reg_661;
wire   [15:0] tmp_8_0_0_2_fu_300_p2;
reg   [15:0] tmp_8_0_0_2_reg_667;
wire  signed [15:0] tmp_6_0_1_fu_310_p1;
reg  signed [15:0] tmp_6_0_1_reg_672;
wire  signed [15:0] tmp_6_0_1_1_fu_330_p1;
reg  signed [15:0] tmp_6_0_1_1_reg_678;
wire  signed [15:0] tmp_6_0_1_2_fu_350_p1;
reg  signed [15:0] tmp_6_0_1_2_reg_684;
wire   [15:0] tmp_8_0_1_2_fu_366_p2;
reg   [15:0] tmp_8_0_1_2_reg_690;
wire   [7:0] tmp_19_fu_372_p1;
reg   [7:0] tmp_19_reg_700;
reg   [7:0] tmp_13_reg_705;
reg   [7:0] tmp_14_reg_710;
wire  signed [15:0] tmp_6_0_2_fu_400_p1;
reg  signed [15:0] tmp_6_0_2_reg_720;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_2;
reg    ap_sig_bdd_131;
wire  signed [15:0] tmp_6_0_2_1_fu_409_p1;
reg  signed [15:0] tmp_6_0_2_1_reg_726;
wire  signed [15:0] tmp_6_0_2_2_fu_418_p1;
reg  signed [15:0] tmp_6_0_2_2_reg_732;
wire   [15:0] tmp_8_0_2_2_fu_433_p2;
reg   [15:0] tmp_8_0_2_2_reg_738;
wire  signed [15:0] tmp_5_1_fu_439_p1;
reg  signed [15:0] tmp_5_1_reg_743;
wire  signed [15:0] tmp_5_1_0_1_fu_447_p1;
reg  signed [15:0] tmp_5_1_0_1_reg_749;
wire  signed [15:0] tmp_5_1_0_2_fu_455_p1;
reg  signed [15:0] tmp_5_1_0_2_reg_755;
wire   [15:0] tmp_8_1_0_2_fu_469_p2;
reg   [15:0] tmp_8_1_0_2_reg_761;
wire   [7:0] tmp_20_fu_475_p1;
reg   [7:0] tmp_20_reg_766;
wire   [7:0] grp_fu_204_p4;
reg   [7:0] tmp_16_reg_771;
wire   [7:0] grp_fu_224_p4;
reg   [7:0] tmp_17_reg_776;
wire   [15:0] tmp_8_1_1_2_fu_497_p2;
reg   [15:0] tmp_8_1_1_2_reg_781;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_3;
reg    ap_sig_bdd_161;
wire   [15:0] tmp_8_1_2_2_fu_521_p2;
reg   [15:0] tmp_8_1_2_2_reg_786;
wire  signed [15:0] tmp_5_2_fu_527_p1;
reg  signed [15:0] tmp_5_2_reg_791;
wire  signed [15:0] tmp_5_2_0_1_fu_535_p1;
reg  signed [15:0] tmp_5_2_0_1_reg_796;
wire  signed [15:0] tmp_5_2_0_2_fu_543_p1;
reg  signed [15:0] tmp_5_2_0_2_reg_801;
wire   [15:0] tmp_8_2_0_2_fu_557_p2;
reg   [15:0] tmp_8_2_0_2_reg_806;
wire   [15:0] tmp_8_2_1_2_fu_584_p2;
reg   [15:0] tmp_8_2_1_2_reg_811;
wire   [15:0] tmp_8_2_2_2_fu_608_p2;
reg   [15:0] tmp_8_2_2_2_reg_816;
reg    ap_reg_ppiten_pp0_it0_preg = 1'b0;
wire   [7:0] tmp_2_fu_244_p1;
wire   [7:0] tmp_3_fu_252_p1;
wire  signed [7:0] tmp_12_fu_260_p0;
wire  signed [7:0] tmp_12_fu_260_p1;
wire   [7:0] grp_fu_214_p4;
wire  signed [7:0] tmp_7_0_0_1_fu_274_p0;
wire  signed [7:0] tmp_7_0_0_1_fu_274_p1;
wire   [7:0] grp_fu_234_p4;
wire  signed [7:0] tmp_7_0_0_2_fu_288_p0;
wire  signed [7:0] tmp_7_0_0_2_fu_288_p1;
wire   [15:0] tmp_7_0_0_2_fu_288_p2;
wire   [15:0] tmp_12_fu_260_p2;
wire   [15:0] tmp_7_0_0_1_fu_274_p2;
wire   [15:0] tmp_fu_294_p2;
wire   [7:0] tmp_15_fu_306_p1;
wire  signed [7:0] tmp_7_0_1_fu_314_p0;
wire  signed [7:0] tmp_7_0_1_fu_314_p1;
wire   [7:0] tmp_1_fu_320_p4;
wire  signed [7:0] tmp_7_0_1_1_fu_334_p0;
wire  signed [7:0] tmp_7_0_1_1_fu_334_p1;
wire   [7:0] tmp_4_fu_340_p4;
wire  signed [7:0] tmp_7_0_1_2_fu_354_p0;
wire  signed [7:0] tmp_7_0_1_2_fu_354_p1;
wire   [15:0] tmp_7_0_1_2_fu_354_p2;
wire   [15:0] tmp_7_0_1_fu_314_p2;
wire   [15:0] tmp_7_0_1_1_fu_334_p2;
wire   [15:0] tmp1_fu_360_p2;
wire   [7:0] tmp_18_fu_396_p1;
wire  signed [7:0] tmp_7_0_2_fu_404_p0;
wire  signed [7:0] tmp_7_0_2_fu_404_p1;
wire  signed [7:0] tmp_7_0_2_1_fu_413_p0;
wire  signed [7:0] tmp_7_0_2_1_fu_413_p1;
wire  signed [7:0] tmp_7_0_2_2_fu_422_p0;
wire  signed [7:0] tmp_7_0_2_2_fu_422_p1;
wire   [15:0] tmp_7_0_2_2_fu_422_p2;
wire   [15:0] tmp_7_0_2_fu_404_p2;
wire   [15:0] tmp_7_0_2_1_fu_413_p2;
wire   [15:0] tmp2_fu_427_p2;
wire  signed [7:0] tmp_7_1_fu_442_p0;
wire  signed [7:0] tmp_7_1_fu_442_p1;
wire  signed [7:0] tmp_7_1_0_1_fu_450_p0;
wire  signed [7:0] tmp_7_1_0_1_fu_450_p1;
wire  signed [7:0] tmp_7_1_0_2_fu_458_p0;
wire  signed [7:0] tmp_7_1_0_2_fu_458_p1;
wire   [15:0] tmp_7_1_0_2_fu_458_p2;
wire   [15:0] tmp_7_1_fu_442_p2;
wire   [15:0] tmp_7_1_0_1_fu_450_p2;
wire   [15:0] tmp3_fu_463_p2;
wire  signed [7:0] tmp_7_1_1_fu_479_p0;
wire  signed [7:0] tmp_7_1_1_fu_479_p1;
wire  signed [7:0] tmp_7_1_1_1_fu_483_p0;
wire  signed [7:0] tmp_7_1_1_1_fu_483_p1;
wire  signed [7:0] tmp_7_1_1_2_fu_487_p0;
wire  signed [7:0] tmp_7_1_1_2_fu_487_p1;
wire   [15:0] tmp_7_1_1_2_fu_487_p2;
wire   [15:0] tmp_7_1_1_fu_479_p2;
wire   [15:0] tmp_7_1_1_1_fu_483_p2;
wire   [15:0] tmp4_fu_491_p2;
wire  signed [7:0] tmp_7_1_2_fu_503_p0;
wire  signed [7:0] tmp_7_1_2_fu_503_p1;
wire  signed [7:0] tmp_7_1_2_1_fu_507_p0;
wire  signed [7:0] tmp_7_1_2_1_fu_507_p1;
wire  signed [7:0] tmp_7_1_2_2_fu_511_p0;
wire  signed [7:0] tmp_7_1_2_2_fu_511_p1;
wire   [15:0] tmp_7_1_2_2_fu_511_p2;
wire   [15:0] tmp_7_1_2_fu_503_p2;
wire   [15:0] tmp_7_1_2_1_fu_507_p2;
wire   [15:0] tmp5_fu_515_p2;
wire  signed [7:0] tmp_7_2_fu_530_p0;
wire  signed [7:0] tmp_7_2_fu_530_p1;
wire  signed [7:0] tmp_7_2_0_1_fu_538_p0;
wire  signed [7:0] tmp_7_2_0_1_fu_538_p1;
wire  signed [7:0] tmp_7_2_0_2_fu_546_p0;
wire  signed [7:0] tmp_7_2_0_2_fu_546_p1;
wire   [15:0] tmp_7_2_0_2_fu_546_p2;
wire   [15:0] tmp_7_2_fu_530_p2;
wire   [15:0] tmp_7_2_0_1_fu_538_p2;
wire   [15:0] tmp6_fu_551_p2;
wire  signed [7:0] tmp_7_2_1_fu_563_p0;
wire  signed [7:0] tmp_7_2_1_fu_563_p1;
wire  signed [7:0] tmp_7_2_1_1_fu_568_p0;
wire  signed [7:0] tmp_7_2_1_1_fu_568_p1;
wire  signed [7:0] tmp_7_2_1_2_fu_573_p0;
wire  signed [7:0] tmp_7_2_1_2_fu_573_p1;
wire   [15:0] tmp_7_2_1_2_fu_573_p2;
wire   [15:0] tmp_7_2_1_fu_563_p2;
wire   [15:0] tmp_7_2_1_1_fu_568_p2;
wire   [15:0] tmp7_fu_578_p2;
wire  signed [7:0] tmp_7_2_2_fu_590_p0;
wire  signed [7:0] tmp_7_2_2_fu_590_p1;
wire  signed [7:0] tmp_7_2_2_1_fu_594_p0;
wire  signed [7:0] tmp_7_2_2_1_fu_594_p1;
wire  signed [7:0] tmp_7_2_2_2_fu_598_p0;
wire  signed [7:0] tmp_7_2_2_2_fu_598_p1;
wire   [15:0] tmp_7_2_2_2_fu_598_p2;
wire   [15:0] tmp_7_2_2_fu_590_p2;
wire   [15:0] tmp_7_2_2_1_fu_594_p2;
wire   [15:0] tmp8_fu_602_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0_preg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0_preg
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
            ap_reg_ppiten_pp0_it0_preg <= ap_start;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
        tmp_13_reg_705 <= {{a_q1[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_14_reg_710 <= {{a_q1[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_19_reg_700 <= tmp_19_fu_372_p1;
        tmp_5_0_0_1_reg_645 <= tmp_5_0_0_1_fu_266_p1;
        tmp_5_0_0_2_reg_656 <= tmp_5_0_0_2_fu_280_p1;
        tmp_6_0_0_1_reg_650 <= tmp_6_0_0_1_fu_270_p1;
        tmp_6_0_0_2_reg_661 <= tmp_6_0_0_2_fu_284_p1;
        tmp_6_0_1_1_reg_678 <= tmp_6_0_1_1_fu_330_p1;
        tmp_6_0_1_2_reg_684 <= tmp_6_0_1_2_fu_350_p1;
        tmp_6_0_1_reg_672 <= tmp_6_0_1_fu_310_p1;
        tmp_7_reg_639 <= tmp_7_fu_256_p1;
        tmp_8_0_0_2_reg_667 <= tmp_8_0_0_2_fu_300_p2;
        tmp_8_0_1_2_reg_690 <= tmp_8_0_1_2_fu_366_p2;
        tmp_s_reg_634 <= tmp_s_fu_248_p1;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        tmp_16_reg_771 <= {{a_q0[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_17_reg_776 <= {{a_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) begin
        tmp_20_reg_766 <= tmp_20_fu_475_p1;
        tmp_5_1_0_1_reg_749 <= tmp_5_1_0_1_fu_447_p1;
        tmp_5_1_0_2_reg_755 <= tmp_5_1_0_2_fu_455_p1;
        tmp_5_1_reg_743 <= tmp_5_1_fu_439_p1;
        tmp_6_0_2_1_reg_726 <= tmp_6_0_2_1_fu_409_p1;
        tmp_6_0_2_2_reg_732 <= tmp_6_0_2_2_fu_418_p1;
        tmp_6_0_2_reg_720 <= tmp_6_0_2_fu_400_p1;
        tmp_8_0_2_2_reg_738 <= tmp_8_0_2_2_fu_433_p2;
        tmp_8_1_0_2_reg_761 <= tmp_8_1_0_2_fu_469_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
        tmp_5_2_0_1_reg_796 <= tmp_5_2_0_1_fu_535_p1;
        tmp_5_2_0_2_reg_801 <= tmp_5_2_0_2_fu_543_p1;
        tmp_5_2_reg_791 <= tmp_5_2_fu_527_p1;
        tmp_8_2_0_2_reg_806 <= tmp_8_2_0_2_fu_557_p2;
        tmp_8_2_1_2_reg_811 <= tmp_8_2_1_2_fu_584_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) begin
        tmp_8_1_1_2_reg_781 <= tmp_8_1_1_2_fu_497_p2;
        tmp_8_1_2_2_reg_786 <= tmp_8_1_2_2_fu_521_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
        tmp_8_2_2_2_reg_816 <= tmp_8_2_2_2_fu_608_p2;
    end
end

/// a_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            a_address0 = ap_const_lv64_2;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            a_address0 = ap_const_lv64_0;
        end else begin
            a_address0 = 'bx;
        end
    end else begin
        a_address0 = 'bx;
    end
end

/// a_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        a_ce0 = ap_const_logic_1;
    end else begin
        a_ce0 = ap_const_logic_0;
    end
end

/// a_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
        a_ce1 = ap_const_logic_1;
    end else begin
        a_ce1 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_1) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg4_fsm_4) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0_preg) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
        ap_reg_ppiten_pp0_it0 = ap_start;
    end else begin
        ap_reg_ppiten_pp0_it0 = ap_reg_ppiten_pp0_it0_preg;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. ///
always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. ///
always @ (ap_sig_bdd_92) begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. ///
always @ (ap_sig_bdd_131) begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. ///
always @ (ap_sig_bdd_161) begin
    if (ap_sig_bdd_161) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. ///
always @ (ap_sig_bdd_39) begin
    if (ap_sig_bdd_39) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// b_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            b_address0 = ap_const_lv64_2;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            b_address0 = ap_const_lv64_0;
        end else begin
            b_address0 = 'bx;
        end
    end else begin
        b_address0 = 'bx;
    end
end

/// b_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_1) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        b_ce0 = ap_const_logic_1;
    end else begin
        b_ce0 = ap_const_logic_0;
    end
end

/// b_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
        b_ce1 = ap_const_logic_1;
    end else begin
        b_ce1 = ap_const_logic_0;
    end
end

/// res_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1))) begin
        res_address0 = ap_const_lv64_8;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_address0 = ap_const_lv64_6;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_address0 = ap_const_lv64_5;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_address0 = ap_const_lv64_3;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_address0 = ap_const_lv64_1;
    end else begin
        res_address0 = 'bx;
    end
end

/// res_address1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_address1 = ap_const_lv64_7;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_address1 = ap_const_lv64_4;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_address1 = ap_const_lv64_2;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_address1 = ap_const_lv64_0;
    end else begin
        res_address1 = 'bx;
    end
end

/// res_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_ce0 = ap_const_logic_1;
    end else begin
        res_ce0 = ap_const_logic_0;
    end
end

/// res_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_ce1 = ap_const_logic_1;
    end else begin
        res_ce1 = ap_const_logic_0;
    end
end

/// res_d0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or tmp_8_0_1_2_reg_690 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or tmp_8_1_0_2_reg_761 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or tmp_8_1_2_2_reg_786 or tmp_8_2_0_2_reg_806 or tmp_8_2_2_2_reg_816) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1))) begin
        res_d0 = tmp_8_2_2_2_reg_816;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_d0 = tmp_8_2_0_2_reg_806;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_d0 = tmp_8_1_2_2_reg_786;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_d0 = tmp_8_1_0_2_reg_761;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_d0 = tmp_8_0_1_2_reg_690;
    end else begin
        res_d0 = 'bx;
    end
end

/// res_d1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or tmp_8_0_0_2_reg_667 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or tmp_8_0_2_2_reg_738 or tmp_8_1_1_2_reg_781 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or tmp_8_2_1_2_reg_811) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        res_d1 = tmp_8_2_1_2_reg_811;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        res_d1 = tmp_8_1_1_2_reg_781;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        res_d1 = tmp_8_0_2_2_reg_738;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        res_d1 = tmp_8_0_0_2_reg_667;
    end else begin
        res_d1 = 'bx;
    end
end

/// res_we0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_we0 = ap_const_logic_1;
    end else begin
        res_we0 = ap_const_logic_0;
    end
end

/// res_we1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        res_we1 = ap_const_logic_1;
    end else begin
        res_we1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_pprstidle_pp0) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & ~((ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_start)))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end
        end
        ap_ST_pp0_stg1_fsm_1 : 
        begin
            if (~(ap_const_logic_1 == ap_sig_pprstidle_pp0)) begin
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end
        end
        ap_ST_pp0_stg2_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_3;
        end
        ap_ST_pp0_stg3_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_4;
        end
        ap_ST_pp0_stg4_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address1 = ap_const_lv64_1;

/// ap_sig_bdd_131 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_161 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_161 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_39 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_39 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign b_address1 = ap_const_lv64_1;
assign grp_fu_204_p4 = {{a_q0[ap_const_lv32_F : ap_const_lv32_8]}};
assign grp_fu_214_p4 = {{b_q0[ap_const_lv32_F : ap_const_lv32_8]}};
assign grp_fu_224_p4 = {{a_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
assign grp_fu_234_p4 = {{b_q0[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp1_fu_360_p2 = (tmp_7_0_1_2_fu_354_p2 + tmp_7_0_1_fu_314_p2);
assign tmp2_fu_427_p2 = (tmp_7_0_2_2_fu_422_p2 + tmp_7_0_2_fu_404_p2);
assign tmp3_fu_463_p2 = (tmp_7_1_0_2_fu_458_p2 + tmp_7_1_fu_442_p2);
assign tmp4_fu_491_p2 = (tmp_7_1_1_2_fu_487_p2 + tmp_7_1_1_fu_479_p2);
assign tmp5_fu_515_p2 = (tmp_7_1_2_2_fu_511_p2 + tmp_7_1_2_fu_503_p2);
assign tmp6_fu_551_p2 = (tmp_7_2_0_2_fu_546_p2 + tmp_7_2_fu_530_p2);
assign tmp7_fu_578_p2 = (tmp_7_2_1_2_fu_573_p2 + tmp_7_2_1_fu_563_p2);
assign tmp8_fu_602_p2 = (tmp_7_2_2_2_fu_598_p2 + tmp_7_2_2_fu_590_p2);
assign tmp_12_fu_260_p0 = tmp_3_fu_252_p1;
assign tmp_12_fu_260_p1 = tmp_s_fu_248_p1;
assign tmp_12_fu_260_p2 = ($signed(tmp_12_fu_260_p0) * $signed(tmp_12_fu_260_p1));
assign tmp_15_fu_306_p1 = b_q1[7:0];
assign tmp_18_fu_396_p1 = b_q0[7:0];
assign tmp_19_fu_372_p1 = a_q1[7:0];
assign tmp_1_fu_320_p4 = {{b_q1[ap_const_lv32_F : ap_const_lv32_8]}};
assign tmp_20_fu_475_p1 = a_q0[7:0];
assign tmp_2_fu_244_p1 = a_q0[7:0];
assign tmp_3_fu_252_p1 = b_q0[7:0];
assign tmp_4_fu_340_p4 = {{b_q1[ap_const_lv32_17 : ap_const_lv32_10]}};
assign tmp_5_0_0_1_fu_266_p1 = $signed(grp_fu_204_p4);
assign tmp_5_0_0_2_fu_280_p1 = $signed(grp_fu_224_p4);
assign tmp_5_1_0_1_fu_447_p1 = $signed(tmp_13_reg_705);
assign tmp_5_1_0_2_fu_455_p1 = $signed(tmp_14_reg_710);
assign tmp_5_1_fu_439_p1 = $signed(tmp_19_reg_700);
assign tmp_5_2_0_1_fu_535_p1 = $signed(tmp_16_reg_771);
assign tmp_5_2_0_2_fu_543_p1 = $signed(tmp_17_reg_776);
assign tmp_5_2_fu_527_p1 = $signed(tmp_20_reg_766);
assign tmp_6_0_0_1_fu_270_p1 = $signed(grp_fu_214_p4);
assign tmp_6_0_0_2_fu_284_p1 = $signed(grp_fu_234_p4);
assign tmp_6_0_1_1_fu_330_p1 = $signed(tmp_1_fu_320_p4);
assign tmp_6_0_1_2_fu_350_p1 = $signed(tmp_4_fu_340_p4);
assign tmp_6_0_1_fu_310_p1 = $signed(tmp_15_fu_306_p1);
assign tmp_6_0_2_1_fu_409_p1 = $signed(grp_fu_214_p4);
assign tmp_6_0_2_2_fu_418_p1 = $signed(grp_fu_234_p4);
assign tmp_6_0_2_fu_400_p1 = $signed(tmp_18_fu_396_p1);
assign tmp_7_0_0_1_fu_274_p0 = grp_fu_214_p4;
assign tmp_7_0_0_1_fu_274_p1 = tmp_5_0_0_1_fu_266_p1;
assign tmp_7_0_0_1_fu_274_p2 = ($signed(tmp_7_0_0_1_fu_274_p0) * $signed(tmp_7_0_0_1_fu_274_p1));
assign tmp_7_0_0_2_fu_288_p0 = grp_fu_234_p4;
assign tmp_7_0_0_2_fu_288_p1 = tmp_5_0_0_2_fu_280_p1;
assign tmp_7_0_0_2_fu_288_p2 = ($signed(tmp_7_0_0_2_fu_288_p0) * $signed(tmp_7_0_0_2_fu_288_p1));
assign tmp_7_0_1_1_fu_334_p0 = tmp_1_fu_320_p4;
assign tmp_7_0_1_1_fu_334_p1 = tmp_5_0_0_1_fu_266_p1;
assign tmp_7_0_1_1_fu_334_p2 = ($signed(tmp_7_0_1_1_fu_334_p0) * $signed(tmp_7_0_1_1_fu_334_p1));
assign tmp_7_0_1_2_fu_354_p0 = tmp_4_fu_340_p4;
assign tmp_7_0_1_2_fu_354_p1 = tmp_5_0_0_2_fu_280_p1;
assign tmp_7_0_1_2_fu_354_p2 = ($signed(tmp_7_0_1_2_fu_354_p0) * $signed(tmp_7_0_1_2_fu_354_p1));
assign tmp_7_0_1_fu_314_p0 = tmp_15_fu_306_p1;
assign tmp_7_0_1_fu_314_p1 = tmp_s_fu_248_p1;
assign tmp_7_0_1_fu_314_p2 = ($signed(tmp_7_0_1_fu_314_p0) * $signed(tmp_7_0_1_fu_314_p1));
assign tmp_7_0_2_1_fu_413_p0 = grp_fu_214_p4;
assign tmp_7_0_2_1_fu_413_p1 = tmp_5_0_0_1_reg_645;
assign tmp_7_0_2_1_fu_413_p2 = ($signed(tmp_7_0_2_1_fu_413_p0) * $signed(tmp_7_0_2_1_fu_413_p1));
assign tmp_7_0_2_2_fu_422_p0 = grp_fu_234_p4;
assign tmp_7_0_2_2_fu_422_p1 = tmp_5_0_0_2_reg_656;
assign tmp_7_0_2_2_fu_422_p2 = ($signed(tmp_7_0_2_2_fu_422_p0) * $signed(tmp_7_0_2_2_fu_422_p1));
assign tmp_7_0_2_fu_404_p0 = tmp_18_fu_396_p1;
assign tmp_7_0_2_fu_404_p1 = tmp_s_reg_634;
assign tmp_7_0_2_fu_404_p2 = ($signed(tmp_7_0_2_fu_404_p0) * $signed(tmp_7_0_2_fu_404_p1));
assign tmp_7_1_0_1_fu_450_p0 = tmp_6_0_0_1_reg_650;
assign tmp_7_1_0_1_fu_450_p1 = tmp_13_reg_705;
assign tmp_7_1_0_1_fu_450_p2 = ($signed(tmp_7_1_0_1_fu_450_p0) * $signed(tmp_7_1_0_1_fu_450_p1));
assign tmp_7_1_0_2_fu_458_p0 = tmp_6_0_0_2_reg_661;
assign tmp_7_1_0_2_fu_458_p1 = tmp_14_reg_710;
assign tmp_7_1_0_2_fu_458_p2 = ($signed(tmp_7_1_0_2_fu_458_p0) * $signed(tmp_7_1_0_2_fu_458_p1));
assign tmp_7_1_1_1_fu_483_p0 = tmp_6_0_1_1_reg_678;
assign tmp_7_1_1_1_fu_483_p1 = tmp_5_1_0_1_reg_749;
assign tmp_7_1_1_1_fu_483_p2 = ($signed(tmp_7_1_1_1_fu_483_p0) * $signed(tmp_7_1_1_1_fu_483_p1));
assign tmp_7_1_1_2_fu_487_p0 = tmp_6_0_1_2_reg_684;
assign tmp_7_1_1_2_fu_487_p1 = tmp_5_1_0_2_reg_755;
assign tmp_7_1_1_2_fu_487_p2 = ($signed(tmp_7_1_1_2_fu_487_p0) * $signed(tmp_7_1_1_2_fu_487_p1));
assign tmp_7_1_1_fu_479_p0 = tmp_6_0_1_reg_672;
assign tmp_7_1_1_fu_479_p1 = tmp_5_1_reg_743;
assign tmp_7_1_1_fu_479_p2 = ($signed(tmp_7_1_1_fu_479_p0) * $signed(tmp_7_1_1_fu_479_p1));
assign tmp_7_1_2_1_fu_507_p0 = tmp_6_0_2_1_reg_726;
assign tmp_7_1_2_1_fu_507_p1 = tmp_5_1_0_1_reg_749;
assign tmp_7_1_2_1_fu_507_p2 = ($signed(tmp_7_1_2_1_fu_507_p0) * $signed(tmp_7_1_2_1_fu_507_p1));
assign tmp_7_1_2_2_fu_511_p0 = tmp_6_0_2_2_reg_732;
assign tmp_7_1_2_2_fu_511_p1 = tmp_5_1_0_2_reg_755;
assign tmp_7_1_2_2_fu_511_p2 = ($signed(tmp_7_1_2_2_fu_511_p0) * $signed(tmp_7_1_2_2_fu_511_p1));
assign tmp_7_1_2_fu_503_p0 = tmp_6_0_2_reg_720;
assign tmp_7_1_2_fu_503_p1 = tmp_5_1_reg_743;
assign tmp_7_1_2_fu_503_p2 = ($signed(tmp_7_1_2_fu_503_p0) * $signed(tmp_7_1_2_fu_503_p1));
assign tmp_7_1_fu_442_p0 = tmp_7_reg_639;
assign tmp_7_1_fu_442_p1 = tmp_19_reg_700;
assign tmp_7_1_fu_442_p2 = ($signed(tmp_7_1_fu_442_p0) * $signed(tmp_7_1_fu_442_p1));
assign tmp_7_2_0_1_fu_538_p0 = tmp_6_0_0_1_reg_650;
assign tmp_7_2_0_1_fu_538_p1 = tmp_5_2_0_1_fu_535_p1;
assign tmp_7_2_0_1_fu_538_p2 = ($signed(tmp_7_2_0_1_fu_538_p0) * $signed(tmp_7_2_0_1_fu_538_p1));
assign tmp_7_2_0_2_fu_546_p0 = tmp_6_0_0_2_reg_661;
assign tmp_7_2_0_2_fu_546_p1 = tmp_5_2_0_2_fu_543_p1;
assign tmp_7_2_0_2_fu_546_p2 = ($signed(tmp_7_2_0_2_fu_546_p0) * $signed(tmp_7_2_0_2_fu_546_p1));
assign tmp_7_2_1_1_fu_568_p0 = tmp_6_0_1_1_reg_678;
assign tmp_7_2_1_1_fu_568_p1 = tmp_5_2_0_1_fu_535_p1;
assign tmp_7_2_1_1_fu_568_p2 = ($signed(tmp_7_2_1_1_fu_568_p0) * $signed(tmp_7_2_1_1_fu_568_p1));
assign tmp_7_2_1_2_fu_573_p0 = tmp_6_0_1_2_reg_684;
assign tmp_7_2_1_2_fu_573_p1 = tmp_5_2_0_2_fu_543_p1;
assign tmp_7_2_1_2_fu_573_p2 = ($signed(tmp_7_2_1_2_fu_573_p0) * $signed(tmp_7_2_1_2_fu_573_p1));
assign tmp_7_2_1_fu_563_p0 = tmp_6_0_1_reg_672;
assign tmp_7_2_1_fu_563_p1 = tmp_5_2_fu_527_p1;
assign tmp_7_2_1_fu_563_p2 = ($signed(tmp_7_2_1_fu_563_p0) * $signed(tmp_7_2_1_fu_563_p1));
assign tmp_7_2_2_1_fu_594_p0 = tmp_6_0_2_1_reg_726;
assign tmp_7_2_2_1_fu_594_p1 = tmp_5_2_0_1_reg_796;
assign tmp_7_2_2_1_fu_594_p2 = ($signed(tmp_7_2_2_1_fu_594_p0) * $signed(tmp_7_2_2_1_fu_594_p1));
assign tmp_7_2_2_2_fu_598_p0 = tmp_6_0_2_2_reg_732;
assign tmp_7_2_2_2_fu_598_p1 = tmp_5_2_0_2_reg_801;
assign tmp_7_2_2_2_fu_598_p2 = ($signed(tmp_7_2_2_2_fu_598_p0) * $signed(tmp_7_2_2_2_fu_598_p1));
assign tmp_7_2_2_fu_590_p0 = tmp_6_0_2_reg_720;
assign tmp_7_2_2_fu_590_p1 = tmp_5_2_reg_791;
assign tmp_7_2_2_fu_590_p2 = ($signed(tmp_7_2_2_fu_590_p0) * $signed(tmp_7_2_2_fu_590_p1));
assign tmp_7_2_fu_530_p0 = tmp_7_reg_639;
assign tmp_7_2_fu_530_p1 = tmp_5_2_fu_527_p1;
assign tmp_7_2_fu_530_p2 = ($signed(tmp_7_2_fu_530_p0) * $signed(tmp_7_2_fu_530_p1));
assign tmp_7_fu_256_p1 = $signed(tmp_3_fu_252_p1);
assign tmp_8_0_0_2_fu_300_p2 = (tmp_7_0_0_1_fu_274_p2 + tmp_fu_294_p2);
assign tmp_8_0_1_2_fu_366_p2 = (tmp_7_0_1_1_fu_334_p2 + tmp1_fu_360_p2);
assign tmp_8_0_2_2_fu_433_p2 = (tmp_7_0_2_1_fu_413_p2 + tmp2_fu_427_p2);
assign tmp_8_1_0_2_fu_469_p2 = (tmp_7_1_0_1_fu_450_p2 + tmp3_fu_463_p2);
assign tmp_8_1_1_2_fu_497_p2 = (tmp_7_1_1_1_fu_483_p2 + tmp4_fu_491_p2);
assign tmp_8_1_2_2_fu_521_p2 = (tmp_7_1_2_1_fu_507_p2 + tmp5_fu_515_p2);
assign tmp_8_2_0_2_fu_557_p2 = (tmp_7_2_0_1_fu_538_p2 + tmp6_fu_551_p2);
assign tmp_8_2_1_2_fu_584_p2 = (tmp_7_2_1_1_fu_568_p2 + tmp7_fu_578_p2);
assign tmp_8_2_2_2_fu_608_p2 = (tmp_7_2_2_1_fu_594_p2 + tmp8_fu_602_p2);
assign tmp_fu_294_p2 = (tmp_7_0_0_2_fu_288_p2 + tmp_12_fu_260_p2);
assign tmp_s_fu_248_p1 = $signed(tmp_2_fu_244_p1);


endmodule //matrixmul

