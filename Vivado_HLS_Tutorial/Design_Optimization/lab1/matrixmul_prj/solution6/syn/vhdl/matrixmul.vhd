-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (23 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.820000,HLS_SYN_LAT=6,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=487,HLS_SYN_LUT=191}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal tmp_s_fu_248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_634 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal tmp_7_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_639 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_1_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_1_reg_645 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_1_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_1_reg_650 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_2_fu_280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_0_0_2_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_2_fu_284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_0_2_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_0_0_2_fu_300_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_0_0_2_reg_667 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_1_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_1_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_2_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_1_2_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_0_1_2_fu_366_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_0_1_2_reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_0_2_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_reg_720 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal tmp_6_0_2_1_fu_409_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_1_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_2_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_0_2_2_reg_732 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_0_2_2_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_0_2_2_reg_738 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_1_fu_447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_1_reg_749 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_2_fu_455_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_1_0_2_reg_755 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_0_2_fu_469_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_0_2_reg_761 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_204_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_1_1_2_fu_497_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_1_2_reg_781 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal tmp_8_1_2_2_fu_521_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_2_2_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_reg_791 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_1_fu_535_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_1_reg_796 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_2_fu_543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_2_0_2_reg_801 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_0_2_fu_557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_0_2_reg_806 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_1_2_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_1_2_reg_811 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_2_2_fu_608_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_2_2_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal tmp_2_fu_244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_260_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_1_fu_274_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_1_fu_274_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_234_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_2_fu_288_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_2_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_0_2_fu_288_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_0_0_1_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_294_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_fu_314_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_320_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_1_fu_334_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_1_fu_334_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_340_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_2_fu_354_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_2_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_1_2_fu_354_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_0_1_fu_314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_0_1_1_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_fu_404_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_1_fu_413_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_1_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_2_fu_422_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_2_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_0_2_2_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_0_2_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_0_2_1_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_fu_442_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_1_fu_450_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_1_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_2_fu_458_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_2_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_0_2_fu_458_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_0_1_fu_450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_463_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_1_fu_479_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_1_fu_483_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_1_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_2_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_2_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_1_2_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_1_fu_479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_1_1_fu_483_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_2_fu_503_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_1_fu_507_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_1_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_2_fu_511_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_2_fu_511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_2_2_fu_511_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_2_fu_503_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_2_1_fu_507_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_515_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_fu_530_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_1_fu_538_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_1_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_2_fu_546_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_2_fu_546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_0_2_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_0_1_fu_538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_1_fu_563_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_1_fu_568_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_1_fu_568_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_2_fu_573_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_2_fu_573_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_1_2_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_1_fu_563_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_1_1_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_578_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_2_fu_590_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_1_fu_594_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_1_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_2_fu_598_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_2_fu_598_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_2_2_fu_598_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_2_fu_590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_2_2_1_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then
                tmp_13_reg_705 <= a_q1(15 downto 8);
                tmp_14_reg_710 <= a_q1(23 downto 16);
                tmp_19_reg_700 <= tmp_19_fu_372_p1;
                tmp_5_0_0_1_reg_645 <= tmp_5_0_0_1_fu_266_p1;
                tmp_5_0_0_2_reg_656 <= tmp_5_0_0_2_fu_280_p1;
                tmp_6_0_0_1_reg_650 <= tmp_6_0_0_1_fu_270_p1;
                tmp_6_0_0_2_reg_661 <= tmp_6_0_0_2_fu_284_p1;
                tmp_6_0_1_1_reg_678 <= tmp_6_0_1_1_fu_330_p1;
                tmp_6_0_1_2_reg_684 <= tmp_6_0_1_2_fu_350_p1;
                tmp_6_0_1_reg_672 <= tmp_6_0_1_fu_310_p1;
                tmp_7_reg_639 <= tmp_7_fu_256_p1;
                tmp_8_0_0_2_reg_667 <= tmp_8_0_0_2_fu_300_p2;
                tmp_8_0_1_2_reg_690 <= tmp_8_0_1_2_fu_366_p2;
                tmp_s_reg_634 <= tmp_s_fu_248_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                tmp_16_reg_771 <= a_q0(15 downto 8);
                tmp_17_reg_776 <= a_q0(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then
                tmp_20_reg_766 <= tmp_20_fu_475_p1;
                tmp_5_1_0_1_reg_749 <= tmp_5_1_0_1_fu_447_p1;
                tmp_5_1_0_2_reg_755 <= tmp_5_1_0_2_fu_455_p1;
                tmp_5_1_reg_743 <= tmp_5_1_fu_439_p1;
                tmp_6_0_2_1_reg_726 <= tmp_6_0_2_1_fu_409_p1;
                tmp_6_0_2_2_reg_732 <= tmp_6_0_2_2_fu_418_p1;
                tmp_6_0_2_reg_720 <= tmp_6_0_2_fu_400_p1;
                tmp_8_0_2_2_reg_738 <= tmp_8_0_2_2_fu_433_p2;
                tmp_8_1_0_2_reg_761 <= tmp_8_1_0_2_fu_469_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then
                tmp_5_2_0_1_reg_796 <= tmp_5_2_0_1_fu_535_p1;
                tmp_5_2_0_2_reg_801 <= tmp_5_2_0_2_fu_543_p1;
                tmp_5_2_reg_791 <= tmp_5_2_fu_527_p1;
                tmp_8_2_0_2_reg_806 <= tmp_8_2_0_2_fu_557_p2;
                tmp_8_2_1_2_reg_811 <= tmp_8_2_1_2_fu_584_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then
                tmp_8_1_1_2_reg_781 <= tmp_8_1_1_2_fu_497_p2;
                tmp_8_1_2_2_reg_786 <= tmp_8_1_2_2_fu_521_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_8_2_2_2_reg_816 <= tmp_8_2_2_2_fu_608_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
            when ap_ST_pp0_stg4_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- a_address0 assign process. --
    a_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                a_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                a_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                a_address0 <= "XX";
            end if;
        else 
            a_address0 <= "XX";
        end if; 
    end process;

    a_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_ce1 assign process. --
    a_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_address0 assign process. --
    b_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                b_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                b_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_address0 <= "XX";
            end if;
        else 
            b_address0 <= "XX";
        end if; 
    end process;

    b_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_ce1 assign process. --
    b_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_204_p4 <= a_q0(15 downto 8);
    grp_fu_214_p4 <= b_q0(15 downto 8);
    grp_fu_224_p4 <= a_q0(23 downto 16);
    grp_fu_234_p4 <= b_q0(23 downto 16);

    -- res_address0 assign process. --
    res_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            res_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    -- res_address1 assign process. --
    res_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            res_address1 <= "XXXX";
        end if; 
    end process;


    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_ce1 assign process. --
    res_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_d0 assign process. --
    res_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, tmp_8_0_1_2_reg_690, ap_sig_cseq_ST_pp0_stg2_fsm_2, tmp_8_1_0_2_reg_761, ap_sig_cseq_ST_pp0_stg3_fsm_3, tmp_8_1_2_2_reg_786, tmp_8_2_0_2_reg_806, tmp_8_2_2_2_reg_816)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            res_d0 <= tmp_8_2_2_2_reg_816;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_d0 <= tmp_8_2_0_2_reg_806;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_d0 <= tmp_8_1_2_2_reg_786;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_d0 <= tmp_8_1_0_2_reg_761;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_d0 <= tmp_8_0_1_2_reg_690;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- res_d1 assign process. --
    res_d1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, tmp_8_0_0_2_reg_667, ap_sig_cseq_ST_pp0_stg2_fsm_2, tmp_8_0_2_2_reg_738, tmp_8_1_1_2_reg_781, ap_sig_cseq_ST_pp0_stg3_fsm_3, tmp_8_2_1_2_reg_811)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_d1 <= tmp_8_2_1_2_reg_811;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            res_d1 <= tmp_8_1_1_2_reg_781;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            res_d1 <= tmp_8_0_2_2_reg_738;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            res_d1 <= tmp_8_0_0_2_reg_667;
        else 
            res_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- res_we0 assign process. --
    res_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_we1 assign process. --
    res_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_360_p2 <= std_logic_vector(unsigned(tmp_7_0_1_2_fu_354_p2) + unsigned(tmp_7_0_1_fu_314_p2));
    tmp2_fu_427_p2 <= std_logic_vector(unsigned(tmp_7_0_2_2_fu_422_p2) + unsigned(tmp_7_0_2_fu_404_p2));
    tmp3_fu_463_p2 <= std_logic_vector(unsigned(tmp_7_1_0_2_fu_458_p2) + unsigned(tmp_7_1_fu_442_p2));
    tmp4_fu_491_p2 <= std_logic_vector(unsigned(tmp_7_1_1_2_fu_487_p2) + unsigned(tmp_7_1_1_fu_479_p2));
    tmp5_fu_515_p2 <= std_logic_vector(unsigned(tmp_7_1_2_2_fu_511_p2) + unsigned(tmp_7_1_2_fu_503_p2));
    tmp6_fu_551_p2 <= std_logic_vector(unsigned(tmp_7_2_0_2_fu_546_p2) + unsigned(tmp_7_2_fu_530_p2));
    tmp7_fu_578_p2 <= std_logic_vector(unsigned(tmp_7_2_1_2_fu_573_p2) + unsigned(tmp_7_2_1_fu_563_p2));
    tmp8_fu_602_p2 <= std_logic_vector(unsigned(tmp_7_2_2_2_fu_598_p2) + unsigned(tmp_7_2_2_fu_590_p2));
    tmp_12_fu_260_p0 <= tmp_3_fu_252_p1;
    tmp_12_fu_260_p1 <= tmp_s_fu_248_p1(8 - 1 downto 0);
    tmp_12_fu_260_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_12_fu_260_p0) * signed(tmp_12_fu_260_p1))), 16));
    tmp_15_fu_306_p1 <= b_q1(8 - 1 downto 0);
    tmp_18_fu_396_p1 <= b_q0(8 - 1 downto 0);
    tmp_19_fu_372_p1 <= a_q1(8 - 1 downto 0);
    tmp_1_fu_320_p4 <= b_q1(15 downto 8);
    tmp_20_fu_475_p1 <= a_q0(8 - 1 downto 0);
    tmp_2_fu_244_p1 <= a_q0(8 - 1 downto 0);
    tmp_3_fu_252_p1 <= b_q0(8 - 1 downto 0);
    tmp_4_fu_340_p4 <= b_q1(23 downto 16);
        tmp_5_0_0_1_fu_266_p1 <= std_logic_vector(resize(signed(grp_fu_204_p4),16));

        tmp_5_0_0_2_fu_280_p1 <= std_logic_vector(resize(signed(grp_fu_224_p4),16));

        tmp_5_1_0_1_fu_447_p1 <= std_logic_vector(resize(signed(tmp_13_reg_705),16));

        tmp_5_1_0_2_fu_455_p1 <= std_logic_vector(resize(signed(tmp_14_reg_710),16));

        tmp_5_1_fu_439_p1 <= std_logic_vector(resize(signed(tmp_19_reg_700),16));

        tmp_5_2_0_1_fu_535_p1 <= std_logic_vector(resize(signed(tmp_16_reg_771),16));

        tmp_5_2_0_2_fu_543_p1 <= std_logic_vector(resize(signed(tmp_17_reg_776),16));

        tmp_5_2_fu_527_p1 <= std_logic_vector(resize(signed(tmp_20_reg_766),16));

        tmp_6_0_0_1_fu_270_p1 <= std_logic_vector(resize(signed(grp_fu_214_p4),16));

        tmp_6_0_0_2_fu_284_p1 <= std_logic_vector(resize(signed(grp_fu_234_p4),16));

        tmp_6_0_1_1_fu_330_p1 <= std_logic_vector(resize(signed(tmp_1_fu_320_p4),16));

        tmp_6_0_1_2_fu_350_p1 <= std_logic_vector(resize(signed(tmp_4_fu_340_p4),16));

        tmp_6_0_1_fu_310_p1 <= std_logic_vector(resize(signed(tmp_15_fu_306_p1),16));

        tmp_6_0_2_1_fu_409_p1 <= std_logic_vector(resize(signed(grp_fu_214_p4),16));

        tmp_6_0_2_2_fu_418_p1 <= std_logic_vector(resize(signed(grp_fu_234_p4),16));

        tmp_6_0_2_fu_400_p1 <= std_logic_vector(resize(signed(tmp_18_fu_396_p1),16));

    tmp_7_0_0_1_fu_274_p0 <= grp_fu_214_p4;
    tmp_7_0_0_1_fu_274_p1 <= tmp_5_0_0_1_fu_266_p1(8 - 1 downto 0);
    tmp_7_0_0_1_fu_274_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_0_1_fu_274_p0) * signed(tmp_7_0_0_1_fu_274_p1))), 16));
    tmp_7_0_0_2_fu_288_p0 <= grp_fu_234_p4;
    tmp_7_0_0_2_fu_288_p1 <= tmp_5_0_0_2_fu_280_p1(8 - 1 downto 0);
    tmp_7_0_0_2_fu_288_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_0_2_fu_288_p0) * signed(tmp_7_0_0_2_fu_288_p1))), 16));
    tmp_7_0_1_1_fu_334_p0 <= tmp_1_fu_320_p4;
    tmp_7_0_1_1_fu_334_p1 <= tmp_5_0_0_1_fu_266_p1(8 - 1 downto 0);
    tmp_7_0_1_1_fu_334_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_1_1_fu_334_p0) * signed(tmp_7_0_1_1_fu_334_p1))), 16));
    tmp_7_0_1_2_fu_354_p0 <= tmp_4_fu_340_p4;
    tmp_7_0_1_2_fu_354_p1 <= tmp_5_0_0_2_fu_280_p1(8 - 1 downto 0);
    tmp_7_0_1_2_fu_354_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_1_2_fu_354_p0) * signed(tmp_7_0_1_2_fu_354_p1))), 16));
    tmp_7_0_1_fu_314_p0 <= tmp_15_fu_306_p1;
    tmp_7_0_1_fu_314_p1 <= tmp_s_fu_248_p1(8 - 1 downto 0);
    tmp_7_0_1_fu_314_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_1_fu_314_p0) * signed(tmp_7_0_1_fu_314_p1))), 16));
    tmp_7_0_2_1_fu_413_p0 <= grp_fu_214_p4;
    tmp_7_0_2_1_fu_413_p1 <= tmp_5_0_0_1_reg_645(8 - 1 downto 0);
    tmp_7_0_2_1_fu_413_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_2_1_fu_413_p0) * signed(tmp_7_0_2_1_fu_413_p1))), 16));
    tmp_7_0_2_2_fu_422_p0 <= grp_fu_234_p4;
    tmp_7_0_2_2_fu_422_p1 <= tmp_5_0_0_2_reg_656(8 - 1 downto 0);
    tmp_7_0_2_2_fu_422_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_2_2_fu_422_p0) * signed(tmp_7_0_2_2_fu_422_p1))), 16));
    tmp_7_0_2_fu_404_p0 <= tmp_18_fu_396_p1;
    tmp_7_0_2_fu_404_p1 <= tmp_s_reg_634(8 - 1 downto 0);
    tmp_7_0_2_fu_404_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_0_2_fu_404_p0) * signed(tmp_7_0_2_fu_404_p1))), 16));
    tmp_7_1_0_1_fu_450_p0 <= tmp_6_0_0_1_reg_650(8 - 1 downto 0);
    tmp_7_1_0_1_fu_450_p1 <= tmp_13_reg_705;
    tmp_7_1_0_1_fu_450_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_0_1_fu_450_p0) * signed(tmp_7_1_0_1_fu_450_p1))), 16));
    tmp_7_1_0_2_fu_458_p0 <= tmp_6_0_0_2_reg_661(8 - 1 downto 0);
    tmp_7_1_0_2_fu_458_p1 <= tmp_14_reg_710;
    tmp_7_1_0_2_fu_458_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_0_2_fu_458_p0) * signed(tmp_7_1_0_2_fu_458_p1))), 16));
    tmp_7_1_1_1_fu_483_p0 <= tmp_6_0_1_1_reg_678(8 - 1 downto 0);
    tmp_7_1_1_1_fu_483_p1 <= tmp_5_1_0_1_reg_749(8 - 1 downto 0);
    tmp_7_1_1_1_fu_483_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_1_1_fu_483_p0) * signed(tmp_7_1_1_1_fu_483_p1))), 16));
    tmp_7_1_1_2_fu_487_p0 <= tmp_6_0_1_2_reg_684(8 - 1 downto 0);
    tmp_7_1_1_2_fu_487_p1 <= tmp_5_1_0_2_reg_755(8 - 1 downto 0);
    tmp_7_1_1_2_fu_487_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_1_2_fu_487_p0) * signed(tmp_7_1_1_2_fu_487_p1))), 16));
    tmp_7_1_1_fu_479_p0 <= tmp_6_0_1_reg_672(8 - 1 downto 0);
    tmp_7_1_1_fu_479_p1 <= tmp_5_1_reg_743(8 - 1 downto 0);
    tmp_7_1_1_fu_479_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_1_fu_479_p0) * signed(tmp_7_1_1_fu_479_p1))), 16));
    tmp_7_1_2_1_fu_507_p0 <= tmp_6_0_2_1_reg_726(8 - 1 downto 0);
    tmp_7_1_2_1_fu_507_p1 <= tmp_5_1_0_1_reg_749(8 - 1 downto 0);
    tmp_7_1_2_1_fu_507_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_2_1_fu_507_p0) * signed(tmp_7_1_2_1_fu_507_p1))), 16));
    tmp_7_1_2_2_fu_511_p0 <= tmp_6_0_2_2_reg_732(8 - 1 downto 0);
    tmp_7_1_2_2_fu_511_p1 <= tmp_5_1_0_2_reg_755(8 - 1 downto 0);
    tmp_7_1_2_2_fu_511_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_2_2_fu_511_p0) * signed(tmp_7_1_2_2_fu_511_p1))), 16));
    tmp_7_1_2_fu_503_p0 <= tmp_6_0_2_reg_720(8 - 1 downto 0);
    tmp_7_1_2_fu_503_p1 <= tmp_5_1_reg_743(8 - 1 downto 0);
    tmp_7_1_2_fu_503_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_2_fu_503_p0) * signed(tmp_7_1_2_fu_503_p1))), 16));
    tmp_7_1_fu_442_p0 <= tmp_7_reg_639(8 - 1 downto 0);
    tmp_7_1_fu_442_p1 <= tmp_19_reg_700;
    tmp_7_1_fu_442_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_fu_442_p0) * signed(tmp_7_1_fu_442_p1))), 16));
    tmp_7_2_0_1_fu_538_p0 <= tmp_6_0_0_1_reg_650(8 - 1 downto 0);
    tmp_7_2_0_1_fu_538_p1 <= tmp_5_2_0_1_fu_535_p1(8 - 1 downto 0);
    tmp_7_2_0_1_fu_538_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_0_1_fu_538_p0) * signed(tmp_7_2_0_1_fu_538_p1))), 16));
    tmp_7_2_0_2_fu_546_p0 <= tmp_6_0_0_2_reg_661(8 - 1 downto 0);
    tmp_7_2_0_2_fu_546_p1 <= tmp_5_2_0_2_fu_543_p1(8 - 1 downto 0);
    tmp_7_2_0_2_fu_546_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_0_2_fu_546_p0) * signed(tmp_7_2_0_2_fu_546_p1))), 16));
    tmp_7_2_1_1_fu_568_p0 <= tmp_6_0_1_1_reg_678(8 - 1 downto 0);
    tmp_7_2_1_1_fu_568_p1 <= tmp_5_2_0_1_fu_535_p1(8 - 1 downto 0);
    tmp_7_2_1_1_fu_568_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_1_1_fu_568_p0) * signed(tmp_7_2_1_1_fu_568_p1))), 16));
    tmp_7_2_1_2_fu_573_p0 <= tmp_6_0_1_2_reg_684(8 - 1 downto 0);
    tmp_7_2_1_2_fu_573_p1 <= tmp_5_2_0_2_fu_543_p1(8 - 1 downto 0);
    tmp_7_2_1_2_fu_573_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_1_2_fu_573_p0) * signed(tmp_7_2_1_2_fu_573_p1))), 16));
    tmp_7_2_1_fu_563_p0 <= tmp_6_0_1_reg_672(8 - 1 downto 0);
    tmp_7_2_1_fu_563_p1 <= tmp_5_2_fu_527_p1(8 - 1 downto 0);
    tmp_7_2_1_fu_563_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_1_fu_563_p0) * signed(tmp_7_2_1_fu_563_p1))), 16));
    tmp_7_2_2_1_fu_594_p0 <= tmp_6_0_2_1_reg_726(8 - 1 downto 0);
    tmp_7_2_2_1_fu_594_p1 <= tmp_5_2_0_1_reg_796(8 - 1 downto 0);
    tmp_7_2_2_1_fu_594_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_2_1_fu_594_p0) * signed(tmp_7_2_2_1_fu_594_p1))), 16));
    tmp_7_2_2_2_fu_598_p0 <= tmp_6_0_2_2_reg_732(8 - 1 downto 0);
    tmp_7_2_2_2_fu_598_p1 <= tmp_5_2_0_2_reg_801(8 - 1 downto 0);
    tmp_7_2_2_2_fu_598_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_2_2_fu_598_p0) * signed(tmp_7_2_2_2_fu_598_p1))), 16));
    tmp_7_2_2_fu_590_p0 <= tmp_6_0_2_reg_720(8 - 1 downto 0);
    tmp_7_2_2_fu_590_p1 <= tmp_5_2_reg_791(8 - 1 downto 0);
    tmp_7_2_2_fu_590_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_2_fu_590_p0) * signed(tmp_7_2_2_fu_590_p1))), 16));
    tmp_7_2_fu_530_p0 <= tmp_7_reg_639(8 - 1 downto 0);
    tmp_7_2_fu_530_p1 <= tmp_5_2_fu_527_p1(8 - 1 downto 0);
    tmp_7_2_fu_530_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_fu_530_p0) * signed(tmp_7_2_fu_530_p1))), 16));
        tmp_7_fu_256_p1 <= std_logic_vector(resize(signed(tmp_3_fu_252_p1),16));

    tmp_8_0_0_2_fu_300_p2 <= std_logic_vector(unsigned(tmp_7_0_0_1_fu_274_p2) + unsigned(tmp_fu_294_p2));
    tmp_8_0_1_2_fu_366_p2 <= std_logic_vector(unsigned(tmp_7_0_1_1_fu_334_p2) + unsigned(tmp1_fu_360_p2));
    tmp_8_0_2_2_fu_433_p2 <= std_logic_vector(unsigned(tmp_7_0_2_1_fu_413_p2) + unsigned(tmp2_fu_427_p2));
    tmp_8_1_0_2_fu_469_p2 <= std_logic_vector(unsigned(tmp_7_1_0_1_fu_450_p2) + unsigned(tmp3_fu_463_p2));
    tmp_8_1_1_2_fu_497_p2 <= std_logic_vector(unsigned(tmp_7_1_1_1_fu_483_p2) + unsigned(tmp4_fu_491_p2));
    tmp_8_1_2_2_fu_521_p2 <= std_logic_vector(unsigned(tmp_7_1_2_1_fu_507_p2) + unsigned(tmp5_fu_515_p2));
    tmp_8_2_0_2_fu_557_p2 <= std_logic_vector(unsigned(tmp_7_2_0_1_fu_538_p2) + unsigned(tmp6_fu_551_p2));
    tmp_8_2_1_2_fu_584_p2 <= std_logic_vector(unsigned(tmp_7_2_1_1_fu_568_p2) + unsigned(tmp7_fu_578_p2));
    tmp_8_2_2_2_fu_608_p2 <= std_logic_vector(unsigned(tmp_7_2_2_1_fu_594_p2) + unsigned(tmp8_fu_602_p2));
    tmp_fu_294_p2 <= std_logic_vector(unsigned(tmp_7_0_0_2_fu_288_p2) + unsigned(tmp_12_fu_260_p2));
        tmp_s_fu_248_p1 <= std_logic_vector(resize(signed(tmp_2_fu_244_p1),16));

end behav;
