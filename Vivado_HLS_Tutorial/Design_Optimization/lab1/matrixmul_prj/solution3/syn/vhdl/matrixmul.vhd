-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.820000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=84,HLS_SYN_LUT=83}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal indvar_flatten_reg_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_143 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_154 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_65 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_356_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_360 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_189_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_365 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_fu_197_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_reg_372 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_221_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_377 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal tmp_11_fu_290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_reg_408 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_303_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_413 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_fu_317_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_1_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_323_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_428 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_2_fu_347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_phi_fu_136_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_phi_fu_147_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_phi_fu_158_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_177_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_217_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_205_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_232_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_248_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_252_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast9_fu_276_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast1_fu_273_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_303_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_fu_317_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_1_fu_317_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_fu_336_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_fu_336_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_276 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_165_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((exitcond_flatten_reg_356 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_143 assign process. --
    i_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
                i_reg_143 <= i_mid2_reg_372;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_143 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_132 assign process. --
    indvar_flatten_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
                indvar_flatten_reg_132 <= indvar_flatten_next_reg_360;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_132 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_154 assign process. --
    j_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
                j_reg_154 <= j_1_reg_428;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_154 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_356_pp0_it1 <= exitcond_flatten_reg_356;
                exitcond_flatten_reg_356 <= exitcond_flatten_fu_165_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_165_p2 = ap_const_lv1_0))) then
                i_mid2_reg_372 <= i_mid2_fu_197_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                indvar_flatten_next_reg_360 <= indvar_flatten_next_fu_171_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then
                j_1_reg_428 <= j_1_fu_323_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_165_p2 = ap_const_lv1_0))) then
                j_mid2_reg_365 <= j_mid2_fu_189_p3;
                tmp_4_reg_377 <= tmp_4_fu_221_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then
                tmp_11_reg_408 <= tmp_11_fu_290_p2;
                tmp_7_1_reg_418 <= tmp_7_1_fu_317_p2;
                tmp_7_reg_413 <= tmp_7_fu_303_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then
                tmp_8_2_reg_433 <= tmp_8_2_fu_347_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_165_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_165_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                end if;
            when ap_ST_st6_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- a_address0 assign process. --
    a_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_4_cast_fu_227_p1, tmp_9_cast_fu_268_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                a_address0 <= tmp_9_cast_fu_268_p1(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                a_address0 <= tmp_4_cast_fu_227_p1(4 - 1 downto 0);
            else 
                a_address0 <= "XXXX";
            end if;
        else 
            a_address0 <= "XXXX";
        end if; 
    end process;

    a_address1 <= tmp_8_cast_fu_238_p1(4 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_ce1 assign process. --
    a_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st6_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_276 assign process. --
    ap_sig_bdd_276_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_276 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_65 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_65)
    begin
        if (ap_sig_bdd_65) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_3 assign process. --
    ap_sig_cseq_ST_st6_fsm_3_assign_proc : process(ap_sig_bdd_276)
    begin
        if (ap_sig_bdd_276) then 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_address0 assign process. --
    b_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_2_fu_243_p1, tmp_11_cast_fu_285_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                b_address0 <= tmp_11_cast_fu_285_p1(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                b_address0 <= tmp_2_fu_243_p1(4 - 1 downto 0);
            else 
                b_address0 <= "XXXX";
            end if;
        else 
            b_address0 <= "XXXX";
        end if; 
    end process;

    b_address1 <= tmp_10_cast_fu_258_p1(4 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_ce1 assign process. --
    b_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_165_p2 <= "1" when (indvar_flatten_phi_fu_136_p4 = ap_const_lv4_9) else "0";
    exitcond_fu_183_p2 <= "1" when (j_phi_fu_158_p4 = ap_const_lv2_3) else "0";
    i_1_fu_177_p2 <= std_logic_vector(unsigned(i_phi_fu_147_p4) + unsigned(ap_const_lv2_1));
    i_mid2_fu_197_p3 <= 
        i_1_fu_177_p2 when (exitcond_fu_183_p2(0) = '1') else 
        i_phi_fu_147_p4;

    -- i_phi_fu_147_p4 assign process. --
    i_phi_fu_147_p4_assign_proc : process(i_reg_143, exitcond_flatten_reg_356, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_372)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
            i_phi_fu_147_p4 <= i_mid2_reg_372;
        else 
            i_phi_fu_147_p4 <= i_reg_143;
        end if; 
    end process;

    indvar_flatten_next_fu_171_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_136_p4) + unsigned(ap_const_lv4_1));

    -- indvar_flatten_phi_fu_136_p4 assign process. --
    indvar_flatten_phi_fu_136_p4_assign_proc : process(indvar_flatten_reg_132, exitcond_flatten_reg_356, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, indvar_flatten_next_reg_360)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_136_p4 <= indvar_flatten_next_reg_360;
        else 
            indvar_flatten_phi_fu_136_p4 <= indvar_flatten_reg_132;
        end if; 
    end process;

    j_1_fu_323_p2 <= std_logic_vector(unsigned(j_mid2_reg_365) + unsigned(ap_const_lv2_1));
    j_mid2_fu_189_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_183_p2(0) = '1') else 
        j_phi_fu_158_p4;

    -- j_phi_fu_158_p4 assign process. --
    j_phi_fu_158_p4_assign_proc : process(j_reg_154, exitcond_flatten_reg_356, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j_1_reg_428)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_356 = ap_const_lv1_0))) then 
            j_phi_fu_158_p4 <= j_1_reg_428;
        else 
            j_phi_fu_158_p4 <= j_reg_154;
        end if; 
    end process;

    p_shl_cast_fu_217_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_209_p3),5));
    res_address0 <= tmp_12_cast_fu_352_p1(4 - 1 downto 0);

    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= tmp_8_2_reg_433;

    -- res_we0 assign process. --
    res_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_356_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond_flatten_reg_356_pp0_it1 = ap_const_lv1_0)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_342_p2 <= std_logic_vector(unsigned(tmp_7_2_fu_336_p2) + unsigned(tmp_7_reg_413));
    tmp_10_cast_fu_258_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_252_p2),64));
    tmp_10_fu_279_p2 <= std_logic_vector(unsigned(tmp_2_cast9_fu_276_p1) + unsigned(ap_const_lv4_6));
    tmp_11_cast_fu_285_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_279_p2),64));
    tmp_11_fu_290_p2 <= std_logic_vector(unsigned(tmp_4_reg_377) + unsigned(tmp_2_cast1_fu_273_p1));
        tmp_12_cast_fu_352_p1 <= std_logic_vector(resize(signed(tmp_11_reg_408),64));

    tmp_1_fu_209_p3 <= (i_mid2_fu_197_p3 & ap_const_lv2_0);
    tmp_2_cast1_fu_273_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_365),5));
    tmp_2_cast9_fu_276_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_365),4));
    tmp_2_cast_fu_248_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_189_p3),3));
    tmp_2_fu_243_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_189_p3),64));
        tmp_4_cast_fu_227_p1 <= std_logic_vector(resize(signed(tmp_4_fu_221_p2),64));

    tmp_4_fu_221_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_217_p1) - unsigned(tmp_cast_fu_205_p1));
    tmp_7_1_fu_317_p0 <= b_q1;
    tmp_7_1_fu_317_p1 <= a_q1;
    tmp_7_1_fu_317_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_1_fu_317_p0) * signed(tmp_7_1_fu_317_p1))), 16));
    tmp_7_2_fu_336_p0 <= b_q0;
    tmp_7_2_fu_336_p1 <= a_q0;
    tmp_7_2_fu_336_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_fu_336_p0) * signed(tmp_7_2_fu_336_p1))), 16));
    tmp_7_fu_303_p0 <= b_q0;
    tmp_7_fu_303_p1 <= a_q0;
    tmp_7_fu_303_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_fu_303_p0) * signed(tmp_7_fu_303_p1))), 16));
    tmp_8_2_fu_347_p2 <= std_logic_vector(unsigned(tmp_7_1_reg_418) + unsigned(tmp1_fu_342_p2));
        tmp_8_cast_fu_238_p1 <= std_logic_vector(resize(signed(tmp_8_fu_232_p2),64));

    tmp_8_fu_232_p2 <= std_logic_vector(unsigned(tmp_4_fu_221_p2) + unsigned(ap_const_lv5_1));
        tmp_9_cast_fu_268_p1 <= std_logic_vector(resize(signed(tmp_9_fu_263_p2),64));

    tmp_9_fu_263_p2 <= std_logic_vector(unsigned(tmp_4_reg_377) + unsigned(ap_const_lv5_2));
    tmp_cast_fu_205_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_197_p3),5));
    tmp_s_fu_252_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_248_p1) + unsigned(ap_const_lv3_3));
end behav;
