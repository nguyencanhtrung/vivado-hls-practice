-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.640000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=44,HLS_SYN_LUT=68}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal i_1_fu_127_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal tmp_s_fu_149_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_263 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_161_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_272 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal tmp_2_cast_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_addr_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_fu_187_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_290 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_85 : BOOLEAN;
    signal exitcond_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal i_reg_75 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_86 : STD_LOGIC_VECTOR (1 downto 0);
    signal res_load_reg_97 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_110 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_cast_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_137_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_145_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_133_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_193_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_197_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_207_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_215_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_219_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_243_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_243_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_243_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_75 assign process. --
    i_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_155_p2)))) then 
                i_reg_75 <= i_1_reg_258;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_75 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- j_reg_86 assign process. --
    j_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_181_p2)))) then 
                j_reg_86 <= j_1_reg_272;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_121_p2 = ap_const_lv1_0))) then 
                j_reg_86 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- k_reg_110 assign process. --
    k_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                k_reg_110 <= k_1_reg_290;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_155_p2))) then 
                k_reg_110 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- res_load_reg_97 assign process. --
    res_load_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                res_load_reg_97 <= tmp_8_fu_249_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_155_p2))) then 
                res_load_reg_97 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_258 <= i_1_fu_127_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_272 <= j_1_fu_161_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_290 <= k_1_fu_187_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_155_p2))) then
                res_addr_reg_282 <= tmp_11_cast_fu_176_p1(4 - 1 downto 0);
                    tmp_2_cast_reg_277(1 downto 0) <= tmp_2_cast_fu_167_p1(1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_121_p2 = ap_const_lv1_0))) then
                tmp_s_reg_263 <= tmp_s_fu_149_p2;
            end if;
        end if;
    end process;
    tmp_2_cast_reg_277(4 downto 2) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_121_p2, exitcond1_fu_155_p2, exitcond_fu_181_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_121_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_155_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_181_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_address0 <= tmp_12_cast_fu_202_p1(4 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_121_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_121_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_121_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_121_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_85 assign process. --
    ap_sig_bdd_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_85 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_85)
    begin
        if (ap_sig_bdd_85) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_15_cast_fu_230_p1(4 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_155_p2 <= "1" when (j_reg_86 = ap_const_lv2_3) else "0";
    exitcond2_fu_121_p2 <= "1" when (i_reg_75 = ap_const_lv2_3) else "0";
    exitcond_fu_181_p2 <= "1" when (k_reg_110 = ap_const_lv2_3) else "0";
    i_1_fu_127_p2 <= std_logic_vector(unsigned(i_reg_75) + unsigned(ap_const_lv2_1));
    j_1_fu_161_p2 <= std_logic_vector(unsigned(j_reg_86) + unsigned(ap_const_lv2_1));
    k_1_fu_187_p2 <= std_logic_vector(unsigned(k_reg_110) + unsigned(ap_const_lv2_1));
    p_shl1_cast_fu_215_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_207_p3),5));
    p_shl_cast_fu_145_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_137_p3),5));
    res_address0 <= res_addr_reg_282;

    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= res_load_reg_97;

    -- res_we0 assign process. --
    res_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_207_p3 <= (k_reg_110 & ap_const_lv2_0);
        tmp_11_cast_fu_176_p1 <= std_logic_vector(resize(signed(tmp_2_fu_171_p2),64));

    tmp_11_fu_219_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_215_p1) - unsigned(tmp_4_cast_fu_193_p1));
        tmp_12_cast_fu_202_p1 <= std_logic_vector(resize(signed(tmp_4_fu_197_p2),64));

    tmp_12_fu_225_p2 <= std_logic_vector(unsigned(tmp_11_fu_219_p2) + unsigned(tmp_2_cast_reg_277));
        tmp_15_cast_fu_230_p1 <= std_logic_vector(resize(signed(tmp_12_fu_225_p2),64));

    tmp_2_cast_fu_167_p1 <= std_logic_vector(resize(unsigned(j_reg_86),5));
    tmp_2_fu_171_p2 <= std_logic_vector(unsigned(tmp_s_reg_263) + unsigned(tmp_2_cast_fu_167_p1));
    tmp_4_cast_fu_193_p1 <= std_logic_vector(resize(unsigned(k_reg_110),5));
    tmp_4_fu_197_p2 <= std_logic_vector(unsigned(tmp_s_reg_263) + unsigned(tmp_4_cast_fu_193_p1));
    tmp_7_fu_243_p0 <= b_q0;
    tmp_7_fu_243_p1 <= a_q0;
    tmp_7_fu_243_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_fu_243_p0) * signed(tmp_7_fu_243_p1))), 16));
    tmp_8_fu_249_p2 <= std_logic_vector(unsigned(tmp_7_fu_243_p2) + unsigned(res_load_reg_97));
    tmp_9_fu_137_p3 <= (i_reg_75 & ap_const_lv2_0);
    tmp_cast_fu_133_p1 <= std_logic_vector(resize(unsigned(i_reg_75),5));
    tmp_s_fu_149_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_145_p1) - unsigned(tmp_cast_fu_133_p1));
end behav;
