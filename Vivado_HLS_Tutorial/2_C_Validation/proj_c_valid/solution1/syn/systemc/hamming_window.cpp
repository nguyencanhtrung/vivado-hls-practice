// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "hamming_window.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hamming_window::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hamming_window::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> hamming_window::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> hamming_window::ap_ST_pp0_stg0_fsm_1 = "10";
const sc_lv<3> hamming_window::ap_ST_st6_fsm_2 = "100";
const sc_lv<32> hamming_window::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> hamming_window::ap_const_lv1_1 = "1";
const bool hamming_window::ap_true = true;
const sc_lv<32> hamming_window::ap_const_lv32_1 = "1";
const sc_lv<1> hamming_window::ap_const_lv1_0 = "0";
const sc_lv<9> hamming_window::ap_const_lv9_0 = "000000000";
const sc_lv<9> hamming_window::ap_const_lv9_100 = "100000000";
const sc_lv<9> hamming_window::ap_const_lv9_1 = "1";
const sc_lv<32> hamming_window::ap_const_lv32_2 = "10";

hamming_window::hamming_window(sc_module_name name) : sc_module(name), mVcdFile(0) {
    window_coeff_U = new hamming_window_window_coeff("window_coeff_U");
    window_coeff_U->clk(ap_clk);
    window_coeff_U->reset(ap_rst);
    window_coeff_U->address0(window_coeff_address0);
    window_coeff_U->ce0(window_coeff_ce0);
    window_coeff_U->q0(window_coeff_q0);
    hamming_window_mul_mul_16s_14ns_32_1_U1 = new hamming_window_mul_mul_16s_14ns_32_1<1,1,16,14,32>("hamming_window_mul_mul_16s_14ns_32_1_U1");
    hamming_window_mul_mul_16s_14ns_32_1_U1->din0(indata_load_reg_144);
    hamming_window_mul_mul_16s_14ns_32_1_U1->din1(tmp_5_fu_109_p1);
    hamming_window_mul_mul_16s_14ns_32_1_U1->dout(tmp_5_fu_109_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_2 );

    SC_METHOD(thread_ap_sig_bdd_128);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_1);
    sensitive << ( ap_sig_bdd_55 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_19 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_2);
    sensitive << ( ap_sig_bdd_128 );

    SC_METHOD(thread_exitcond_fu_85_p2);
    sensitive << ( i_1_reg_74 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_i_fu_91_p2);
    sensitive << ( i_1_reg_74 );

    SC_METHOD(thread_indata_address0);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_s_fu_97_p1 );

    SC_METHOD(thread_indata_ce0);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_outdata_address0);
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppstg_tmp_s_reg_124_pp0_it2 );

    SC_METHOD(thread_outdata_ce0);
    sensitive << ( ap_reg_ppiten_pp0_it3 );

    SC_METHOD(thread_outdata_d0);
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( tmp_5_reg_149 );

    SC_METHOD(thread_outdata_we0);
    sensitive << ( ap_reg_ppiten_pp0_it3 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_115_pp0_it2 );

    SC_METHOD(thread_tmp_5_fu_109_p1);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( tmp_5_fu_109_p10 );

    SC_METHOD(thread_tmp_5_fu_109_p10);
    sensitive << ( window_coeff_load_reg_139 );

    SC_METHOD(thread_tmp_s_fu_97_p1);
    sensitive << ( i_1_reg_74 );

    SC_METHOD(thread_window_coeff_address0);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_s_fu_97_p1 );

    SC_METHOD(thread_window_coeff_ce0);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_85_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppiten_pp0_it3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hamming_window_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, outdata_address0, "(port)outdata_address0");
    sc_trace(mVcdFile, outdata_ce0, "(port)outdata_ce0");
    sc_trace(mVcdFile, outdata_we0, "(port)outdata_we0");
    sc_trace(mVcdFile, outdata_d0, "(port)outdata_d0");
    sc_trace(mVcdFile, indata_address0, "(port)indata_address0");
    sc_trace(mVcdFile, indata_ce0, "(port)indata_ce0");
    sc_trace(mVcdFile, indata_q0, "(port)indata_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_19, "ap_sig_bdd_19");
    sc_trace(mVcdFile, window_coeff_address0, "window_coeff_address0");
    sc_trace(mVcdFile, window_coeff_ce0, "window_coeff_ce0");
    sc_trace(mVcdFile, window_coeff_q0, "window_coeff_q0");
    sc_trace(mVcdFile, i_1_reg_74, "i_1_reg_74");
    sc_trace(mVcdFile, exitcond_fu_85_p2, "exitcond_fu_85_p2");
    sc_trace(mVcdFile, exitcond_reg_115, "exitcond_reg_115");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_1, "ap_sig_cseq_ST_pp0_stg0_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_55, "ap_sig_bdd_55");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_115_pp0_it1, "ap_reg_ppstg_exitcond_reg_115_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_115_pp0_it2, "ap_reg_ppstg_exitcond_reg_115_pp0_it2");
    sc_trace(mVcdFile, i_fu_91_p2, "i_fu_91_p2");
    sc_trace(mVcdFile, tmp_s_fu_97_p1, "tmp_s_fu_97_p1");
    sc_trace(mVcdFile, tmp_s_reg_124, "tmp_s_reg_124");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_s_reg_124_pp0_it1, "ap_reg_ppstg_tmp_s_reg_124_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_s_reg_124_pp0_it2, "ap_reg_ppstg_tmp_s_reg_124_pp0_it2");
    sc_trace(mVcdFile, window_coeff_load_reg_139, "window_coeff_load_reg_139");
    sc_trace(mVcdFile, indata_load_reg_144, "indata_load_reg_144");
    sc_trace(mVcdFile, tmp_5_fu_109_p2, "tmp_5_fu_109_p2");
    sc_trace(mVcdFile, tmp_5_reg_149, "tmp_5_reg_149");
    sc_trace(mVcdFile, tmp_5_fu_109_p1, "tmp_5_fu_109_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_2, "ap_sig_cseq_ST_st6_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_128, "ap_sig_bdd_128");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, tmp_5_fu_109_p10, "tmp_5_fu_109_p10");
#endif

    }
    mHdltvinHandle.open("hamming_window.hdltvin.dat");
    mHdltvoutHandle.open("hamming_window.hdltvout.dat");
}

hamming_window::~hamming_window() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete window_coeff_U;
    delete hamming_window_mul_mul_16s_14ns_32_1_U1;
}

void hamming_window::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
                     !esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_true, ap_true)) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_true, ap_true)) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_1_reg_74 = ap_const_lv9_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0))) {
        i_1_reg_74 = i_fu_91_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read())) {
        ap_reg_ppstg_exitcond_reg_115_pp0_it1 = exitcond_reg_115.read();
        ap_reg_ppstg_tmp_s_reg_124_pp0_it1 = tmp_s_reg_124.read();
        exitcond_reg_115 = exitcond_fu_85_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_true, ap_true)) {
        ap_reg_ppstg_exitcond_reg_115_pp0_it2 = ap_reg_ppstg_exitcond_reg_115_pp0_it1.read();
        ap_reg_ppstg_tmp_s_reg_124_pp0_it2 = ap_reg_ppstg_tmp_s_reg_124_pp0_it1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_reg_115.read(), ap_const_lv1_0))) {
        indata_load_reg_144 = indata_q0.read();
        window_coeff_load_reg_139 = window_coeff_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_reg_ppstg_exitcond_reg_115_pp0_it1.read(), ap_const_lv1_0)) {
        tmp_5_reg_149 = tmp_5_fu_109_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0))) {
        tmp_s_reg_124 = tmp_s_fu_97_p1.read();
    }
}

void hamming_window::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_sig_bdd_128() {
    ap_sig_bdd_128 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void hamming_window::thread_ap_sig_bdd_19() {
    ap_sig_bdd_19 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void hamming_window::thread_ap_sig_bdd_55() {
    ap_sig_bdd_55 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void hamming_window::thread_ap_sig_cseq_ST_pp0_stg0_fsm_1() {
    if (ap_sig_bdd_55.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_19.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_sig_cseq_ST_st6_fsm_2() {
    if (ap_sig_bdd_128.read()) {
        ap_sig_cseq_ST_st6_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_2 = ap_const_logic_0;
    }
}

void hamming_window::thread_exitcond_fu_85_p2() {
    exitcond_fu_85_p2 = (!i_1_reg_74.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_74.read() == ap_const_lv9_100);
}

void hamming_window::thread_i_fu_91_p2() {
    i_fu_91_p2 = (!i_1_reg_74.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_1_reg_74.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void hamming_window::thread_indata_address0() {
    indata_address0 =  (sc_lv<8>) (tmp_s_fu_97_p1.read());
}

void hamming_window::thread_indata_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
        indata_ce0 = ap_const_logic_1;
    } else {
        indata_ce0 = ap_const_logic_0;
    }
}

void hamming_window::thread_outdata_address0() {
    outdata_address0 =  (sc_lv<8>) (ap_reg_ppstg_tmp_s_reg_124_pp0_it2.read());
}

void hamming_window::thread_outdata_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it3.read())) {
        outdata_ce0 = ap_const_logic_1;
    } else {
        outdata_ce0 = ap_const_logic_0;
    }
}

void hamming_window::thread_outdata_d0() {
    outdata_d0 = tmp_5_reg_149.read();
}

void hamming_window::thread_outdata_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it3.read()) && 
          esl_seteq<1,1,1>(ap_reg_ppstg_exitcond_reg_115_pp0_it2.read(), ap_const_lv1_0)))) {
        outdata_we0 = ap_const_logic_1;
    } else {
        outdata_we0 = ap_const_logic_0;
    }
}

void hamming_window::thread_tmp_5_fu_109_p1() {
    tmp_5_fu_109_p1 =  (sc_lv<14>) (tmp_5_fu_109_p10.read());
}

void hamming_window::thread_tmp_5_fu_109_p10() {
    tmp_5_fu_109_p10 = esl_zext<32,14>(window_coeff_load_reg_139.read());
}

void hamming_window::thread_tmp_s_fu_97_p1() {
    tmp_s_fu_97_p1 = esl_zext<64,9>(i_1_reg_74.read());
}

void hamming_window::thread_window_coeff_address0() {
    window_coeff_address0 =  (sc_lv<8>) (tmp_s_fu_97_p1.read());
}

void hamming_window::thread_window_coeff_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
        window_coeff_ce0 = ap_const_logic_1;
    } else {
        window_coeff_ce0 = ap_const_logic_0;
    }
}

void hamming_window::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it3.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
                ap_NS_fsm = ap_ST_st6_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void hamming_window::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_address0\" :  \"" << outdata_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_ce0\" :  \"" << outdata_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_we0\" :  \"" << outdata_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outdata_d0\" :  \"" << outdata_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"indata_address0\" :  \"" << indata_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"indata_ce0\" :  \"" << indata_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indata_q0\" :  \"" << indata_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

