// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _hamming_window_HH_
#define _hamming_window_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "hamming_window_mul_mul_16s_14ns_32_1.h"
#include "hamming_window_window_coeff.h"

namespace ap_rtl {

struct hamming_window : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > outdata_address0;
    sc_out< sc_logic > outdata_ce0;
    sc_out< sc_logic > outdata_we0;
    sc_out< sc_lv<32> > outdata_d0;
    sc_out< sc_lv<8> > indata_address0;
    sc_out< sc_logic > indata_ce0;
    sc_in< sc_lv<16> > indata_q0;


    // Module declarations
    hamming_window(sc_module_name name);
    SC_HAS_PROCESS(hamming_window);

    ~hamming_window();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    hamming_window_window_coeff* window_coeff_U;
    hamming_window_mul_mul_16s_14ns_32_1<1,1,16,14,32>* hamming_window_mul_mul_16s_14ns_32_1_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_19;
    sc_signal< sc_lv<8> > window_coeff_address0;
    sc_signal< sc_logic > window_coeff_ce0;
    sc_signal< sc_lv<14> > window_coeff_q0;
    sc_signal< sc_lv<9> > i_1_reg_74;
    sc_signal< sc_lv<1> > exitcond_fu_85_p2;
    sc_signal< sc_lv<1> > exitcond_reg_115;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_55;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_reg_115_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_reg_115_pp0_it2;
    sc_signal< sc_lv<9> > i_fu_91_p2;
    sc_signal< sc_lv<64> > tmp_s_fu_97_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_124;
    sc_signal< sc_lv<64> > ap_reg_ppstg_tmp_s_reg_124_pp0_it1;
    sc_signal< sc_lv<64> > ap_reg_ppstg_tmp_s_reg_124_pp0_it2;
    sc_signal< sc_lv<14> > window_coeff_load_reg_139;
    sc_signal< sc_lv<16> > indata_load_reg_144;
    sc_signal< sc_lv<32> > tmp_5_fu_109_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_149;
    sc_signal< sc_lv<14> > tmp_5_fu_109_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_2;
    sc_signal< bool > ap_sig_bdd_128;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_lv<32> > tmp_5_fu_109_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st6_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_true;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_128();
    void thread_ap_sig_bdd_19();
    void thread_ap_sig_bdd_55();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st6_fsm_2();
    void thread_exitcond_fu_85_p2();
    void thread_i_fu_91_p2();
    void thread_indata_address0();
    void thread_indata_ce0();
    void thread_outdata_address0();
    void thread_outdata_ce0();
    void thread_outdata_d0();
    void thread_outdata_we0();
    void thread_tmp_5_fu_109_p1();
    void thread_tmp_5_fu_109_p10();
    void thread_tmp_s_fu_97_p1();
    void thread_window_coeff_address0();
    void thread_window_coeff_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
