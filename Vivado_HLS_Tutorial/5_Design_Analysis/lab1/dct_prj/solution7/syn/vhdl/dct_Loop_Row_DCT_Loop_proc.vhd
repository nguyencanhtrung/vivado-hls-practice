-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_Loop_Row_DCT_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_2d_in_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_0_ce0 : OUT STD_LOGIC;
    buf_2d_in_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_0_ce1 : OUT STD_LOGIC;
    buf_2d_in_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_1_ce0 : OUT STD_LOGIC;
    buf_2d_in_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_1_ce1 : OUT STD_LOGIC;
    buf_2d_in_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_2_ce0 : OUT STD_LOGIC;
    buf_2d_in_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_2_ce1 : OUT STD_LOGIC;
    buf_2d_in_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_3_ce0 : OUT STD_LOGIC;
    buf_2d_in_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_2d_in_3_ce1 : OUT STD_LOGIC;
    buf_2d_in_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    row_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_i_ce0 : OUT STD_LOGIC;
    row_outbuf_i_we0 : OUT STD_LOGIC;
    row_outbuf_i_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    row_outbuf_i_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_i_ce1 : OUT STD_LOGIC;
    row_outbuf_i_we1 : OUT STD_LOGIC;
    row_outbuf_i_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_Loop_Row_DCT_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st12_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal i_0_i_reg_38 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal exitcond5_i_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_i_reg_80 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_74_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_107 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal grp_dct_dct_1d_fu_50_ap_start : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_ap_done : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_ap_idle : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_ap_ready : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_ap_ce : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src_ce1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src1_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src1_ce1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src2_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src2_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src2_ce1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src3_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_src3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_src3_ce1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_src3_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_tmp_8 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_50_dst_ce0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_dst_we0 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_dst_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_dct_1d_fu_50_dst_ce1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_dst_we1 : STD_LOGIC;
    signal grp_dct_dct_1d_fu_50_dst_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_dct_1d_fu_50_tmp_81 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_phi_fu_42_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_dct_1d_fu_50_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_179 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component dct_dct_1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce1 : OUT STD_LOGIC;
        src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src1_ce0 : OUT STD_LOGIC;
        src1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src1_ce1 : OUT STD_LOGIC;
        src1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        src2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src2_ce0 : OUT STD_LOGIC;
        src2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src2_ce1 : OUT STD_LOGIC;
        src2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        src3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src3_ce0 : OUT STD_LOGIC;
        src3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src3_ce1 : OUT STD_LOGIC;
        src3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce1 : OUT STD_LOGIC;
        dst_we1 : OUT STD_LOGIC;
        dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_81 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    grp_dct_dct_1d_fu_50 : component dct_dct_1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_dct_1d_fu_50_ap_start,
        ap_done => grp_dct_dct_1d_fu_50_ap_done,
        ap_idle => grp_dct_dct_1d_fu_50_ap_idle,
        ap_ready => grp_dct_dct_1d_fu_50_ap_ready,
        ap_ce => grp_dct_dct_1d_fu_50_ap_ce,
        src_address0 => grp_dct_dct_1d_fu_50_src_address0,
        src_ce0 => grp_dct_dct_1d_fu_50_src_ce0,
        src_q0 => grp_dct_dct_1d_fu_50_src_q0,
        src_address1 => grp_dct_dct_1d_fu_50_src_address1,
        src_ce1 => grp_dct_dct_1d_fu_50_src_ce1,
        src_q1 => grp_dct_dct_1d_fu_50_src_q1,
        src1_address0 => grp_dct_dct_1d_fu_50_src1_address0,
        src1_ce0 => grp_dct_dct_1d_fu_50_src1_ce0,
        src1_q0 => grp_dct_dct_1d_fu_50_src1_q0,
        src1_address1 => grp_dct_dct_1d_fu_50_src1_address1,
        src1_ce1 => grp_dct_dct_1d_fu_50_src1_ce1,
        src1_q1 => grp_dct_dct_1d_fu_50_src1_q1,
        src2_address0 => grp_dct_dct_1d_fu_50_src2_address0,
        src2_ce0 => grp_dct_dct_1d_fu_50_src2_ce0,
        src2_q0 => grp_dct_dct_1d_fu_50_src2_q0,
        src2_address1 => grp_dct_dct_1d_fu_50_src2_address1,
        src2_ce1 => grp_dct_dct_1d_fu_50_src2_ce1,
        src2_q1 => grp_dct_dct_1d_fu_50_src2_q1,
        src3_address0 => grp_dct_dct_1d_fu_50_src3_address0,
        src3_ce0 => grp_dct_dct_1d_fu_50_src3_ce0,
        src3_q0 => grp_dct_dct_1d_fu_50_src3_q0,
        src3_address1 => grp_dct_dct_1d_fu_50_src3_address1,
        src3_ce1 => grp_dct_dct_1d_fu_50_src3_ce1,
        src3_q1 => grp_dct_dct_1d_fu_50_src3_q1,
        tmp_8 => grp_dct_dct_1d_fu_50_tmp_8,
        dst_address0 => grp_dct_dct_1d_fu_50_dst_address0,
        dst_ce0 => grp_dct_dct_1d_fu_50_dst_ce0,
        dst_we0 => grp_dct_dct_1d_fu_50_dst_we0,
        dst_d0 => grp_dct_dct_1d_fu_50_dst_d0,
        dst_address1 => grp_dct_dct_1d_fu_50_dst_address1,
        dst_ce1 => grp_dct_dct_1d_fu_50_dst_ce1,
        dst_we1 => grp_dct_dct_1d_fu_50_dst_we1,
        dst_d1 => grp_dct_dct_1d_fu_50_dst_d1,
        tmp_81 => grp_dct_dct_1d_fu_50_tmp_81);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond5_i_fu_68_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((exitcond5_i_reg_80 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_dct_dct_1d_fu_50_ap_start_ap_start_reg assign process. --
    grp_dct_dct_1d_fu_50_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_dct_1d_fu_50_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_fu_68_p2 = ap_const_lv1_0))) then 
                    grp_dct_dct_1d_fu_50_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_dct_1d_fu_50_ap_ready)) then 
                    grp_dct_dct_1d_fu_50_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i_reg_38 assign process. --
    i_0_i_reg_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0))) then 
                i_0_i_reg_38 <= i_reg_84;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                i_0_i_reg_38 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 <= exitcond5_i_reg_80;
                ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 <= ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1;
                exitcond5_i_reg_80 <= exitcond5_i_fu_68_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                i_reg_84 <= i_fu_74_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_fu_68_p2, ap_sig_bdd_107, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_107)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond5_i_fu_68_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_5;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st12_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st12_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st12_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_107 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_179 assign process. --
    ap_sig_bdd_179_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_179 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_227 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_179)
    begin
        if (ap_sig_bdd_179) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_5 assign process. --
    ap_sig_cseq_ST_st12_fsm_5_assign_proc : process(ap_sig_bdd_227)
    begin
        if (ap_sig_bdd_227) then 
            ap_sig_cseq_ST_st12_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_0_address0 <= grp_dct_dct_1d_fu_50_src_address0;
    buf_2d_in_0_address1 <= grp_dct_dct_1d_fu_50_src_address1;

    -- buf_2d_in_0_ce0 assign process. --
    buf_2d_in_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_0_ce0 <= grp_dct_dct_1d_fu_50_src_ce0;
        else 
            buf_2d_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2d_in_0_ce1 assign process. --
    buf_2d_in_0_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src_ce1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_0_ce1 <= grp_dct_dct_1d_fu_50_src_ce1;
        else 
            buf_2d_in_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_1_address0 <= grp_dct_dct_1d_fu_50_src1_address0;
    buf_2d_in_1_address1 <= grp_dct_dct_1d_fu_50_src1_address1;

    -- buf_2d_in_1_ce0 assign process. --
    buf_2d_in_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src1_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_1_ce0 <= grp_dct_dct_1d_fu_50_src1_ce0;
        else 
            buf_2d_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2d_in_1_ce1 assign process. --
    buf_2d_in_1_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src1_ce1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_1_ce1 <= grp_dct_dct_1d_fu_50_src1_ce1;
        else 
            buf_2d_in_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_2_address0 <= grp_dct_dct_1d_fu_50_src2_address0;
    buf_2d_in_2_address1 <= grp_dct_dct_1d_fu_50_src2_address1;

    -- buf_2d_in_2_ce0 assign process. --
    buf_2d_in_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src2_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_2_ce0 <= grp_dct_dct_1d_fu_50_src2_ce0;
        else 
            buf_2d_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2d_in_2_ce1 assign process. --
    buf_2d_in_2_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src2_ce1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_2_ce1 <= grp_dct_dct_1d_fu_50_src2_ce1;
        else 
            buf_2d_in_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_3_address0 <= grp_dct_dct_1d_fu_50_src3_address0;
    buf_2d_in_3_address1 <= grp_dct_dct_1d_fu_50_src3_address1;

    -- buf_2d_in_3_ce0 assign process. --
    buf_2d_in_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src3_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_3_ce0 <= grp_dct_dct_1d_fu_50_src3_ce0;
        else 
            buf_2d_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2d_in_3_ce1 assign process. --
    buf_2d_in_3_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_src3_ce1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            buf_2d_in_3_ce1 <= grp_dct_dct_1d_fu_50_src3_ce1;
        else 
            buf_2d_in_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_i_fu_68_p2 <= "1" when (i_0_i_phi_fu_42_p4 = ap_const_lv4_8) else "0";
    grp_dct_dct_1d_fu_50_ap_ce <= ap_const_logic_1;
    grp_dct_dct_1d_fu_50_ap_start <= grp_dct_dct_1d_fu_50_ap_start_ap_start_reg;
    grp_dct_dct_1d_fu_50_src1_q0 <= buf_2d_in_1_q0;
    grp_dct_dct_1d_fu_50_src1_q1 <= buf_2d_in_1_q1;
    grp_dct_dct_1d_fu_50_src2_q0 <= buf_2d_in_2_q0;
    grp_dct_dct_1d_fu_50_src2_q1 <= buf_2d_in_2_q1;
    grp_dct_dct_1d_fu_50_src3_q0 <= buf_2d_in_3_q0;
    grp_dct_dct_1d_fu_50_src3_q1 <= buf_2d_in_3_q1;
    grp_dct_dct_1d_fu_50_src_q0 <= buf_2d_in_0_q0;
    grp_dct_dct_1d_fu_50_src_q1 <= buf_2d_in_0_q1;
    grp_dct_dct_1d_fu_50_tmp_8 <= i_0_i_reg_38;
    grp_dct_dct_1d_fu_50_tmp_81 <= i_0_i_reg_38;

    -- i_0_i_phi_fu_42_p4 assign process. --
    i_0_i_phi_fu_42_p4_assign_proc : process(i_0_i_reg_38, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, exitcond5_i_reg_80, i_reg_84)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0))) then 
            i_0_i_phi_fu_42_p4 <= i_reg_84;
        else 
            i_0_i_phi_fu_42_p4 <= i_0_i_reg_38;
        end if; 
    end process;

    i_fu_74_p2 <= std_logic_vector(unsigned(i_0_i_phi_fu_42_p4) + unsigned(ap_const_lv4_1));
    row_outbuf_i_address0 <= grp_dct_dct_1d_fu_50_dst_address0;
    row_outbuf_i_address1 <= grp_dct_dct_1d_fu_50_dst_address1;

    -- row_outbuf_i_ce0 assign process. --
    row_outbuf_i_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_dst_ce0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            row_outbuf_i_ce0 <= grp_dct_dct_1d_fu_50_dst_ce0;
        else 
            row_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- row_outbuf_i_ce1 assign process. --
    row_outbuf_i_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_dst_ce1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            row_outbuf_i_ce1 <= grp_dct_dct_1d_fu_50_dst_ce1;
        else 
            row_outbuf_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_i_d0 <= grp_dct_dct_1d_fu_50_dst_d0;
    row_outbuf_i_d1 <= grp_dct_dct_1d_fu_50_dst_d1;

    -- row_outbuf_i_we0 assign process. --
    row_outbuf_i_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_dst_we0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            row_outbuf_i_we0 <= grp_dct_dct_1d_fu_50_dst_we0;
        else 
            row_outbuf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- row_outbuf_i_we1 assign process. --
    row_outbuf_i_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond5_i_reg_80, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1, ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_4, grp_dct_dct_1d_fu_50_dst_we1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond5_i_reg_80 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (exitcond5_i_reg_80 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_reg_ppstg_exitcond5_i_reg_80_pp0_it2 = ap_const_lv1_0)))) then 
            row_outbuf_i_we1 <= grp_dct_dct_1d_fu_50_dst_we1;
        else 
            row_outbuf_i_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
