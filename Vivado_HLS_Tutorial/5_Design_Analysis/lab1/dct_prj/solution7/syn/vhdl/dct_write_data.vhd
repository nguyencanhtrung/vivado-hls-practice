-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_write_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_write_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal r_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal r_1_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_reg_440 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_237_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_445 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_265_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_reg_465 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal tmp_1_fu_297_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal r_phi_fu_218_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_256_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_274_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_288_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_1_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_325_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_339_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_2_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_3_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_373_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_387_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_4_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_5_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_6_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_7_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_269_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_s_fu_309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_334_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_1_fu_348_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_2_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_368_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_382_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_3_fu_396_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_4_fu_406_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_5_fu_416_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_6_fu_426_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_307 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond1_fu_225_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_436 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4) and not((exitcond1_reg_436 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- r_reg_214 assign process. --
    r_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_436 = ap_const_lv1_0))) then 
                r_reg_214 <= r_1_reg_440;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
                r_reg_214 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                exitcond1_reg_436 <= exitcond1_fu_225_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                r_1_reg_440 <= r_1_fu_231_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond1_fu_225_p2 = ap_const_lv1_0))) then
                tmp_18_reg_465 <= tmp_18_fu_265_p1;
                    tmp_reg_445(6 downto 3) <= tmp_fu_237_p3(6 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_436 = ap_const_lv1_0))) then
                    tmp_1_reg_480(5 downto 3) <= tmp_1_fu_297_p3(5 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_445(2 downto 0) <= "000";
    tmp_1_reg_480(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond1_fu_225_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_123)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_123)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond1_fu_225_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st7_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st7_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_123 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_307 assign process. --
    ap_sig_bdd_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_307 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_61 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_61)
    begin
        if (ap_sig_bdd_61) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_307)
    begin
        if (ap_sig_bdd_307) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_r_address0 assign process. --
    buf_r_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_3_fu_245_p1, tmp_8_fu_274_p3, tmp_11_fu_325_p3, tmp_15_fu_373_p3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                buf_r_address0 <= tmp_15_fu_373_p3(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                buf_r_address0 <= tmp_11_fu_325_p3(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                buf_r_address0 <= tmp_8_fu_274_p3(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                buf_r_address0 <= tmp_3_fu_245_p1(6 - 1 downto 0);
            else 
                buf_r_address0 <= "XXXXXX";
            end if;
        else 
            buf_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- buf_r_address1 assign process. --
    buf_r_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_6_fu_256_p3, tmp_s_fu_288_p3, tmp_13_fu_339_p3, tmp_17_fu_387_p3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                buf_r_address1 <= tmp_17_fu_387_p3(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                buf_r_address1 <= tmp_13_fu_339_p3(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                buf_r_address1 <= tmp_s_fu_288_p3(6 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                buf_r_address1 <= tmp_6_fu_256_p3(6 - 1 downto 0);
            else 
                buf_r_address1 <= "XXXXXX";
            end if;
        else 
            buf_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- buf_r_ce0 assign process. --
    buf_r_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_r_ce1 assign process. --
    buf_r_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_225_p2 <= "1" when (r_phi_fu_218_p4 = ap_const_lv4_8) else "0";

    -- output_r_address0 assign process. --
    output_r_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_5_fu_304_p1, tmp_5_2_fu_353_p1, tmp_5_4_fu_401_p1, tmp_5_6_fu_421_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            output_r_address0 <= tmp_5_6_fu_421_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            output_r_address0 <= tmp_5_4_fu_401_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            output_r_address0 <= tmp_5_2_fu_353_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            output_r_address0 <= tmp_5_fu_304_p1(6 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- output_r_address1 assign process. --
    output_r_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, tmp_5_1_fu_315_p1, tmp_5_3_fu_363_p1, tmp_5_5_fu_411_p1, tmp_5_7_fu_431_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            output_r_address1 <= tmp_5_7_fu_431_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            output_r_address1 <= tmp_5_5_fu_411_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            output_r_address1 <= tmp_5_3_fu_363_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            output_r_address1 <= tmp_5_1_fu_315_p1(6 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_ce1 assign process. --
    output_r_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buf_r_q0;
    output_r_d1 <= buf_r_q1;

    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(exitcond1_reg_436, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_436 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_436 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_436 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_436 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_we1 assign process. --
    output_r_we1_assign_proc : process(exitcond1_reg_436, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_436 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond1_reg_436 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_436 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_436 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_231_p2 <= std_logic_vector(unsigned(r_phi_fu_218_p4) + unsigned(ap_const_lv4_1));

    -- r_phi_fu_218_p4 assign process. --
    r_phi_fu_218_p4_assign_proc : process(r_reg_214, exitcond1_reg_436, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, r_1_reg_440)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_436 = ap_const_lv1_0))) then 
            r_phi_fu_218_p4 <= r_1_reg_440;
        else 
            r_phi_fu_218_p4 <= r_reg_214;
        end if; 
    end process;

    tmp_10_fu_320_p2 <= (tmp_reg_445 or ap_const_lv7_4);
    tmp_11_fu_325_p3 <= (ap_const_lv57_0 & tmp_10_fu_320_p2);
    tmp_12_fu_334_p2 <= (tmp_reg_445 or ap_const_lv7_5);
    tmp_13_fu_339_p3 <= (ap_const_lv57_0 & tmp_12_fu_334_p2);
    tmp_14_fu_368_p2 <= (tmp_reg_445 or ap_const_lv7_6);
    tmp_15_fu_373_p3 <= (ap_const_lv57_0 & tmp_14_fu_368_p2);
    tmp_16_fu_382_p2 <= (tmp_reg_445 or ap_const_lv7_7);
    tmp_17_fu_387_p3 <= (ap_const_lv57_0 & tmp_16_fu_382_p2);
    tmp_18_fu_265_p1 <= r_phi_fu_218_p4(3 - 1 downto 0);
    tmp_1_fu_297_p3 <= (tmp_18_reg_465 & ap_const_lv3_0);
    tmp_3_fu_245_p1 <= std_logic_vector(resize(unsigned(tmp_fu_237_p3),64));
    tmp_4_1_fu_348_p2 <= (tmp_1_reg_480 or ap_const_lv6_2);
    tmp_4_2_fu_358_p2 <= (tmp_1_reg_480 or ap_const_lv6_3);
    tmp_4_3_fu_396_p2 <= (tmp_1_reg_480 or ap_const_lv6_4);
    tmp_4_4_fu_406_p2 <= (tmp_1_reg_480 or ap_const_lv6_5);
    tmp_4_5_fu_416_p2 <= (tmp_1_reg_480 or ap_const_lv6_6);
    tmp_4_6_fu_426_p2 <= (tmp_1_reg_480 or ap_const_lv6_7);
    tmp_4_fu_250_p2 <= (tmp_fu_237_p3 or ap_const_lv7_1);
    tmp_4_s_fu_309_p2 <= (tmp_1_fu_297_p3 or ap_const_lv6_1);
    tmp_5_1_fu_315_p1 <= std_logic_vector(resize(unsigned(tmp_4_s_fu_309_p2),64));
    tmp_5_2_fu_353_p1 <= std_logic_vector(resize(unsigned(tmp_4_1_fu_348_p2),64));
    tmp_5_3_fu_363_p1 <= std_logic_vector(resize(unsigned(tmp_4_2_fu_358_p2),64));
    tmp_5_4_fu_401_p1 <= std_logic_vector(resize(unsigned(tmp_4_3_fu_396_p2),64));
    tmp_5_5_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_4_4_fu_406_p2),64));
    tmp_5_6_fu_421_p1 <= std_logic_vector(resize(unsigned(tmp_4_5_fu_416_p2),64));
    tmp_5_7_fu_431_p1 <= std_logic_vector(resize(unsigned(tmp_4_6_fu_426_p2),64));
    tmp_5_fu_304_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_297_p3),64));
    tmp_6_fu_256_p3 <= (ap_const_lv57_0 & tmp_4_fu_250_p2);
    tmp_7_fu_269_p2 <= (tmp_reg_445 or ap_const_lv7_2);
    tmp_8_fu_274_p3 <= (ap_const_lv57_0 & tmp_7_fu_269_p2);
    tmp_9_fu_283_p2 <= (tmp_reg_445 or ap_const_lv7_3);
    tmp_fu_237_p3 <= (r_phi_fu_218_p4 & ap_const_lv3_0);
    tmp_s_fu_288_p3 <= (ap_const_lv57_0 & tmp_9_fu_283_p2);
end behav;
