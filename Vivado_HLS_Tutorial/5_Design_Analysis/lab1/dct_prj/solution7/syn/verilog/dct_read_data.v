// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_read_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        buf_0_address0,
        buf_0_ce0,
        buf_0_we0,
        buf_0_d0,
        buf_0_address1,
        buf_0_ce1,
        buf_0_we1,
        buf_0_d1,
        buf_1_address0,
        buf_1_ce0,
        buf_1_we0,
        buf_1_d0,
        buf_1_address1,
        buf_1_ce1,
        buf_1_we1,
        buf_1_d1,
        buf_2_address0,
        buf_2_ce0,
        buf_2_we0,
        buf_2_d0,
        buf_2_address1,
        buf_2_ce1,
        buf_2_we1,
        buf_2_d1,
        buf_3_address0,
        buf_3_ce0,
        buf_3_we0,
        buf_3_d0,
        buf_3_address1,
        buf_3_ce1,
        buf_3_we1,
        buf_3_d1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 6'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 6'b100;
parameter    ap_ST_pp0_stg2_fsm_3 = 6'b1000;
parameter    ap_ST_pp0_stg3_fsm_4 = 6'b10000;
parameter    ap_ST_st7_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_2 = 6'b10;
parameter    ap_const_lv6_3 = 6'b11;
parameter    ap_const_lv6_4 = 6'b100;
parameter    ap_const_lv6_5 = 6'b101;
parameter    ap_const_lv6_6 = 6'b110;
parameter    ap_const_lv6_7 = 6'b111;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv59_0 = 59'b00000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [5:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [3:0] buf_0_address0;
output   buf_0_ce0;
output   buf_0_we0;
output  [15:0] buf_0_d0;
output  [3:0] buf_0_address1;
output   buf_0_ce1;
output   buf_0_we1;
output  [15:0] buf_0_d1;
output  [3:0] buf_1_address0;
output   buf_1_ce0;
output   buf_1_we0;
output  [15:0] buf_1_d0;
output  [3:0] buf_1_address1;
output   buf_1_ce1;
output   buf_1_we1;
output  [15:0] buf_1_d1;
output  [3:0] buf_2_address0;
output   buf_2_ce0;
output   buf_2_we0;
output  [15:0] buf_2_d0;
output  [3:0] buf_2_address1;
output   buf_2_ce1;
output   buf_2_we1;
output  [15:0] buf_2_d1;
output  [3:0] buf_3_address0;
output   buf_3_ce0;
output   buf_3_we0;
output  [15:0] buf_3_d0;
output  [3:0] buf_3_address1;
output   buf_3_ce1;
output   buf_3_we1;
output  [15:0] buf_3_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] input_r_address0;
reg input_r_ce0;
reg[5:0] input_r_address1;
reg input_r_ce1;
reg buf_0_ce0;
reg buf_0_we0;
reg buf_0_ce1;
reg buf_0_we1;
reg buf_1_ce0;
reg buf_1_we0;
reg buf_1_ce1;
reg buf_1_we1;
reg buf_2_ce0;
reg buf_2_we0;
reg buf_2_ce1;
reg buf_2_we1;
reg buf_3_ce0;
reg buf_3_we0;
reg buf_3_ce1;
reg buf_3_we1;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
reg   [3:0] r_reg_231;
wire   [0:0] exitcond1_fu_242_p2;
reg   [0:0] exitcond1_reg_374;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_94;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [3:0] r_2_fu_248_p2;
reg   [3:0] r_2_reg_378;
wire   [5:0] tmp_fu_258_p3;
reg   [5:0] tmp_reg_383;
wire   [4:0] tmp_18_fu_266_p3;
reg   [4:0] tmp_18_reg_393;
reg   [15:0] input_load_reg_409;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_bdd_120;
reg   [15:0] input_load_1_reg_414;
reg   [15:0] input_load_2_reg_429;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_3;
reg    ap_sig_bdd_137;
reg   [15:0] input_load_3_reg_434;
reg   [15:0] input_load_4_reg_449;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_4;
reg    ap_sig_bdd_153;
reg   [15:0] input_load_5_reg_454;
reg    ap_sig_bdd_166;
reg   [3:0] r_phi_fu_235_p4;
wire   [63:0] tmp_s_fu_274_p1;
wire   [63:0] tmp_1_8_fu_285_p1;
wire   [63:0] tmp_2_fu_295_p1;
wire   [63:0] tmp_3_fu_305_p1;
wire   [63:0] tmp_4_fu_315_p1;
wire   [63:0] tmp_5_fu_325_p1;
wire   [63:0] tmp_6_fu_335_p1;
wire   [63:0] tmp_7_fu_345_p1;
wire   [63:0] tmp_20_fu_350_p1;
wire   [63:0] tmp_22_fu_362_p3;
wire   [2:0] tmp_19_fu_254_p1;
wire   [5:0] tmp_9_s_fu_279_p2;
wire   [5:0] tmp_9_1_fu_290_p2;
wire   [5:0] tmp_9_2_fu_300_p2;
wire   [5:0] tmp_9_3_fu_310_p2;
wire   [5:0] tmp_9_4_fu_320_p2;
wire   [5:0] tmp_9_5_fu_330_p2;
wire   [5:0] tmp_9_6_fu_340_p2;
wire   [4:0] tmp_21_fu_357_p2;
reg    ap_sig_cseq_ST_st7_fsm_5;
reg    ap_sig_bdd_286;
reg   [5:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_5)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond1_fu_242_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_166)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond1_reg_374 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_166) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4) & ~(exitcond1_reg_374 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        r_reg_231 <= r_2_reg_378;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_166)) begin
        r_reg_231 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        exitcond1_reg_374 <= exitcond1_fu_242_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        input_load_1_reg_414 <= input_r_q1;
        input_load_reg_409 <= input_r_q0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_374 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        input_load_2_reg_429 <= input_r_q0;
        input_load_3_reg_434 <= input_r_q1;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_374 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        input_load_4_reg_449 <= input_r_q0;
        input_load_5_reg_454 <= input_r_q1;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        r_2_reg_378 <= r_2_fu_248_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_fu_242_p2 == ap_const_lv1_0))) begin
        tmp_18_reg_393[4 : 1] <= tmp_18_fu_266_p3[4 : 1];
        tmp_reg_383[5 : 3] <= tmp_fu_258_p3[5 : 3];
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st7_fsm_5) begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_5))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_5) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_5)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_94) begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. ///
always @ (ap_sig_bdd_120) begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. ///
always @ (ap_sig_bdd_137) begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. ///
always @ (ap_sig_bdd_153) begin
    if (ap_sig_bdd_153) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_25) begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_5 assign process. ///
always @ (ap_sig_bdd_286) begin
    if (ap_sig_bdd_286) begin
        ap_sig_cseq_ST_st7_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_5 = ap_const_logic_0;
    end
end

/// buf_0_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_0_ce0 = ap_const_logic_1;
    end else begin
        buf_0_ce0 = ap_const_logic_0;
    end
end

/// buf_0_ce1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_0_ce1 = ap_const_logic_1;
    end else begin
        buf_0_ce1 = ap_const_logic_0;
    end
end

/// buf_0_we0 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_0_we0 = ap_const_logic_1;
    end else begin
        buf_0_we0 = ap_const_logic_0;
    end
end

/// buf_0_we1 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_0_we1 = ap_const_logic_1;
    end else begin
        buf_0_we1 = ap_const_logic_0;
    end
end

/// buf_1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_1_ce0 = ap_const_logic_1;
    end else begin
        buf_1_ce0 = ap_const_logic_0;
    end
end

/// buf_1_ce1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_1_ce1 = ap_const_logic_1;
    end else begin
        buf_1_ce1 = ap_const_logic_0;
    end
end

/// buf_1_we0 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_1_we0 = ap_const_logic_1;
    end else begin
        buf_1_we0 = ap_const_logic_0;
    end
end

/// buf_1_we1 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_1_we1 = ap_const_logic_1;
    end else begin
        buf_1_we1 = ap_const_logic_0;
    end
end

/// buf_2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_2_ce0 = ap_const_logic_1;
    end else begin
        buf_2_ce0 = ap_const_logic_0;
    end
end

/// buf_2_ce1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_2_ce1 = ap_const_logic_1;
    end else begin
        buf_2_ce1 = ap_const_logic_0;
    end
end

/// buf_2_we0 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_2_we0 = ap_const_logic_1;
    end else begin
        buf_2_we0 = ap_const_logic_0;
    end
end

/// buf_2_we1 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_2_we1 = ap_const_logic_1;
    end else begin
        buf_2_we1 = ap_const_logic_0;
    end
end

/// buf_3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_3_ce0 = ap_const_logic_1;
    end else begin
        buf_3_ce0 = ap_const_logic_0;
    end
end

/// buf_3_ce1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        buf_3_ce1 = ap_const_logic_1;
    end else begin
        buf_3_ce1 = ap_const_logic_0;
    end
end

/// buf_3_we0 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_3_we0 = ap_const_logic_1;
    end else begin
        buf_3_we0 = ap_const_logic_0;
    end
end

/// buf_3_we1 assign process. ///
always @ (exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        buf_3_we1 = ap_const_logic_1;
    end else begin
        buf_3_we1 = ap_const_logic_0;
    end
end

/// input_r_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or tmp_s_fu_274_p1 or tmp_2_fu_295_p1 or tmp_4_fu_315_p1 or tmp_6_fu_335_p1) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) begin
            input_r_address0 = tmp_6_fu_335_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) begin
            input_r_address0 = tmp_4_fu_315_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            input_r_address0 = tmp_2_fu_295_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
            input_r_address0 = tmp_s_fu_274_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

/// input_r_address1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or tmp_1_8_fu_285_p1 or tmp_3_fu_305_p1 or tmp_5_fu_325_p1 or tmp_7_fu_345_p1) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) begin
            input_r_address1 = tmp_7_fu_345_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) begin
            input_r_address1 = tmp_5_fu_325_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            input_r_address1 = tmp_3_fu_305_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
            input_r_address1 = tmp_1_8_fu_285_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

/// input_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)))) begin
        input_r_ce0 = ap_const_logic_1;
    end else begin
        input_r_ce0 = ap_const_logic_0;
    end
end

/// input_r_ce1 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)))) begin
        input_r_ce1 = ap_const_logic_1;
    end else begin
        input_r_ce1 = ap_const_logic_0;
    end
end

/// r_phi_fu_235_p4 assign process. ///
always @ (r_reg_231 or exitcond1_reg_374 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or r_2_reg_378) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_374 == ap_const_lv1_0))) begin
        r_phi_fu_235_p4 = r_2_reg_378;
    end else begin
        r_phi_fu_235_p4 = r_reg_231;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond1_fu_242_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_166) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_166) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond1_fu_242_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_5;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
        end
        ap_ST_pp0_stg2_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
        end
        ap_ST_pp0_stg3_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
        end
        ap_ST_st7_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_153 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_153 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_166 assign process. ///
always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_166 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_25 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_286 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_286 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign buf_0_address0 = tmp_20_fu_350_p1;
assign buf_0_address1 = tmp_22_fu_362_p3;
assign buf_0_d0 = input_load_reg_409;
assign buf_0_d1 = input_load_1_reg_414;
assign buf_1_address0 = tmp_20_fu_350_p1;
assign buf_1_address1 = tmp_22_fu_362_p3;
assign buf_1_d0 = input_load_2_reg_429;
assign buf_1_d1 = input_load_3_reg_434;
assign buf_2_address0 = tmp_20_fu_350_p1;
assign buf_2_address1 = tmp_22_fu_362_p3;
assign buf_2_d0 = input_load_4_reg_449;
assign buf_2_d1 = input_load_5_reg_454;
assign buf_3_address0 = tmp_20_fu_350_p1;
assign buf_3_address1 = tmp_22_fu_362_p3;
assign buf_3_d0 = input_r_q0;
assign buf_3_d1 = input_r_q1;
assign exitcond1_fu_242_p2 = (r_phi_fu_235_p4 == ap_const_lv4_8? 1'b1: 1'b0);
assign r_2_fu_248_p2 = (r_phi_fu_235_p4 + ap_const_lv4_1);
assign tmp_18_fu_266_p3 = {{r_phi_fu_235_p4}, {ap_const_lv1_0}};
assign tmp_19_fu_254_p1 = r_phi_fu_235_p4[2:0];
assign tmp_1_8_fu_285_p1 = tmp_9_s_fu_279_p2;
assign tmp_20_fu_350_p1 = tmp_18_reg_393;
assign tmp_21_fu_357_p2 = (tmp_18_reg_393 | ap_const_lv5_1);
assign tmp_22_fu_362_p3 = {{ap_const_lv59_0}, {tmp_21_fu_357_p2}};
assign tmp_2_fu_295_p1 = tmp_9_1_fu_290_p2;
assign tmp_3_fu_305_p1 = tmp_9_2_fu_300_p2;
assign tmp_4_fu_315_p1 = tmp_9_3_fu_310_p2;
assign tmp_5_fu_325_p1 = tmp_9_4_fu_320_p2;
assign tmp_6_fu_335_p1 = tmp_9_5_fu_330_p2;
assign tmp_7_fu_345_p1 = tmp_9_6_fu_340_p2;
assign tmp_9_1_fu_290_p2 = (tmp_reg_383 | ap_const_lv6_2);
assign tmp_9_2_fu_300_p2 = (tmp_reg_383 | ap_const_lv6_3);
assign tmp_9_3_fu_310_p2 = (tmp_reg_383 | ap_const_lv6_4);
assign tmp_9_4_fu_320_p2 = (tmp_reg_383 | ap_const_lv6_5);
assign tmp_9_5_fu_330_p2 = (tmp_reg_383 | ap_const_lv6_6);
assign tmp_9_6_fu_340_p2 = (tmp_reg_383 | ap_const_lv6_7);
assign tmp_9_s_fu_279_p2 = (tmp_fu_258_p3 | ap_const_lv6_1);
assign tmp_fu_258_p3 = {{tmp_19_fu_254_p1}, {ap_const_lv3_0}};
assign tmp_s_fu_274_p1 = tmp_fu_258_p3;
always @ (posedge ap_clk) begin
    tmp_reg_383[2:0] <= 3'b000;
    tmp_18_reg_393[0] <= 1'b0;
end



endmodule //dct_read_data

