// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_Loop_Col_DCT_Loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        col_inbuf_0_address0,
        col_inbuf_0_ce0,
        col_inbuf_0_q0,
        col_inbuf_1_address0,
        col_inbuf_1_ce0,
        col_inbuf_1_q0,
        col_inbuf_2_address0,
        col_inbuf_2_ce0,
        col_inbuf_2_q0,
        col_inbuf_3_address0,
        col_inbuf_3_ce0,
        col_inbuf_3_q0,
        col_inbuf_4_address0,
        col_inbuf_4_ce0,
        col_inbuf_4_q0,
        col_inbuf_5_address0,
        col_inbuf_5_ce0,
        col_inbuf_5_q0,
        col_inbuf_6_address0,
        col_inbuf_6_ce0,
        col_inbuf_6_q0,
        col_inbuf_7_address0,
        col_inbuf_7_ce0,
        col_inbuf_7_q0,
        col_outbuf_i_address0,
        col_outbuf_i_ce0,
        col_outbuf_i_we0,
        col_outbuf_i_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv29_1000 = 29'b1000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] col_inbuf_0_address0;
output   col_inbuf_0_ce0;
input  [15:0] col_inbuf_0_q0;
output  [2:0] col_inbuf_1_address0;
output   col_inbuf_1_ce0;
input  [15:0] col_inbuf_1_q0;
output  [2:0] col_inbuf_2_address0;
output   col_inbuf_2_ce0;
input  [15:0] col_inbuf_2_q0;
output  [2:0] col_inbuf_3_address0;
output   col_inbuf_3_ce0;
input  [15:0] col_inbuf_3_q0;
output  [2:0] col_inbuf_4_address0;
output   col_inbuf_4_ce0;
input  [15:0] col_inbuf_4_q0;
output  [2:0] col_inbuf_5_address0;
output   col_inbuf_5_ce0;
input  [15:0] col_inbuf_5_q0;
output  [2:0] col_inbuf_6_address0;
output   col_inbuf_6_ce0;
input  [15:0] col_inbuf_6_q0;
output  [2:0] col_inbuf_7_address0;
output   col_inbuf_7_ce0;
input  [15:0] col_inbuf_7_q0;
output  [5:0] col_outbuf_i_address0;
output   col_outbuf_i_ce0;
output   col_outbuf_i_we0;
output  [15:0] col_outbuf_i_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_inbuf_0_ce0;
reg col_inbuf_1_ce0;
reg col_inbuf_2_ce0;
reg col_inbuf_3_ce0;
reg col_inbuf_4_ce0;
reg col_inbuf_5_ce0;
reg col_inbuf_6_ce0;
reg col_inbuf_7_ce0;
reg col_outbuf_i_ce0;
reg col_outbuf_i_we0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [2:0] dct_coeff_table_0_address0;
reg    dct_coeff_table_0_ce0;
wire   [13:0] dct_coeff_table_0_q0;
wire   [2:0] dct_coeff_table_1_address0;
reg    dct_coeff_table_1_ce0;
wire   [14:0] dct_coeff_table_1_q0;
wire   [2:0] dct_coeff_table_2_address0;
reg    dct_coeff_table_2_ce0;
wire   [14:0] dct_coeff_table_2_q0;
wire   [2:0] dct_coeff_table_3_address0;
reg    dct_coeff_table_3_ce0;
wire   [14:0] dct_coeff_table_3_q0;
wire   [2:0] dct_coeff_table_4_address0;
reg    dct_coeff_table_4_ce0;
wire   [14:0] dct_coeff_table_4_q0;
wire   [2:0] dct_coeff_table_5_address0;
reg    dct_coeff_table_5_ce0;
wire   [14:0] dct_coeff_table_5_q0;
wire   [2:0] dct_coeff_table_6_address0;
reg    dct_coeff_table_6_ce0;
wire   [14:0] dct_coeff_table_6_q0;
wire   [2:0] dct_coeff_table_7_address0;
reg    dct_coeff_table_7_ce0;
wire   [14:0] dct_coeff_table_7_q0;
reg   [3:0] k_i_reg_283;
wire   [0:0] exitcond2_i_fu_294_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_149;
wire   [3:0] i_fu_300_p2;
reg   [3:0] i_reg_501;
wire   [7:0] tmp_22_cast_fu_326_p1;
reg   [7:0] tmp_22_cast_reg_506;
reg   [2:0] col_inbuf_0_addr_reg_511;
reg   [2:0] col_inbuf_1_addr_reg_516;
reg   [2:0] col_inbuf_2_addr_reg_521;
reg   [2:0] col_inbuf_3_addr_reg_526;
reg   [2:0] col_inbuf_4_addr_reg_531;
reg   [2:0] col_inbuf_5_addr_reg_536;
reg   [2:0] col_inbuf_6_addr_reg_541;
reg   [2:0] col_inbuf_7_addr_reg_546;
wire   [0:0] exitcond1_i_fu_330_p2;
reg   [0:0] exitcond1_i_reg_551;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_181;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_551_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_551_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond1_i_reg_551_pp0_it3;
wire   [3:0] k_fu_336_p2;
wire   [7:0] tmp_6_fu_358_p2;
reg   [7:0] tmp_6_reg_560;
reg   [7:0] ap_reg_ppstg_tmp_6_reg_560_pp0_it1;
reg   [7:0] ap_reg_ppstg_tmp_6_reg_560_pp0_it2;
reg   [7:0] ap_reg_ppstg_tmp_6_reg_560_pp0_it3;
reg   [13:0] dct_coeff_table_0_load_reg_605;
reg   [13:0] ap_reg_ppstg_dct_coeff_table_0_load_reg_605_pp0_it2;
reg  signed [14:0] dct_coeff_table_1_load_reg_610;
reg  signed [15:0] col_inbuf_1_load_reg_615;
reg   [14:0] dct_coeff_table_2_load_reg_620;
reg  signed [14:0] ap_reg_ppstg_dct_coeff_table_2_load_reg_620_pp0_it2;
reg  signed [14:0] dct_coeff_table_3_load_reg_625;
reg  signed [15:0] col_inbuf_3_load_reg_630;
reg   [14:0] dct_coeff_table_4_load_reg_635;
reg  signed [14:0] ap_reg_ppstg_dct_coeff_table_4_load_reg_635_pp0_it2;
reg  signed [14:0] dct_coeff_table_5_load_reg_640;
reg  signed [15:0] col_inbuf_5_load_reg_645;
reg  signed [14:0] dct_coeff_table_6_load_reg_650;
reg  signed [15:0] col_inbuf_6_load_reg_655;
reg  signed [14:0] dct_coeff_table_7_load_reg_660;
reg  signed [15:0] col_inbuf_7_load_reg_665;
reg  signed [15:0] col_inbuf_0_load_reg_670;
wire  signed [28:0] tmp_6_1_i_fu_461_p2;
reg  signed [28:0] tmp_6_1_i_reg_675;
reg  signed [15:0] col_inbuf_2_load_reg_680;
wire  signed [28:0] tmp_6_3_i_fu_455_p2;
reg  signed [28:0] tmp_6_3_i_reg_685;
reg  signed [15:0] col_inbuf_4_load_reg_690;
wire  signed [28:0] tmp_6_5_i_fu_483_p2;
reg  signed [28:0] tmp_6_5_i_reg_695;
wire  signed [28:0] grp_fu_475_p3;
reg  signed [28:0] tmp5_reg_700;
reg   [15:0] tmp_3_i_reg_705;
reg   [3:0] i_2_i_reg_272;
reg    ap_sig_bdd_270;
wire   [63:0] tmp_81_cast_i_fu_306_p1;
wire   [63:0] tmp_i_fu_342_p1;
wire   [63:0] tmp_23_cast_fu_435_p1;
wire   [6:0] tmp_s_fu_318_p3;
wire   [7:0] tmp_i_cast_fu_354_p1;
wire  signed [28:0] grp_fu_489_p3;
wire  signed [28:0] grp_fu_467_p3;
wire  signed [28:0] grp_fu_439_p3;
(* use_dsp48 = "no" *) wire   [28:0] tmp_fu_411_p2;
(* use_dsp48 = "no" *) wire   [28:0] tmp3_fu_415_p2;
wire   [28:0] tmp_i_20_fu_419_p2;
wire   [13:0] grp_fu_447_p2;
wire  signed [28:0] grp_fu_447_p3;
wire   [13:0] grp_fu_489_p0;
reg   [2:0] ap_NS_fsm;
wire   [28:0] grp_fu_489_p00;


dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_0 #(
    .DataWidth( 14 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_0_address0 ),
    .ce0( dct_coeff_table_0_ce0 ),
    .q0( dct_coeff_table_0_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_1 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_1_address0 ),
    .ce0( dct_coeff_table_1_ce0 ),
    .q0( dct_coeff_table_1_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_2 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_2_address0 ),
    .ce0( dct_coeff_table_2_ce0 ),
    .q0( dct_coeff_table_2_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_3 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_3_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_3_address0 ),
    .ce0( dct_coeff_table_3_ce0 ),
    .q0( dct_coeff_table_3_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_4 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_4_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_4_address0 ),
    .ce0( dct_coeff_table_4_ce0 ),
    .q0( dct_coeff_table_4_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_5 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_5_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_5_address0 ),
    .ce0( dct_coeff_table_5_ce0 ),
    .q0( dct_coeff_table_5_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_6 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_6_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_6_address0 ),
    .ce0( dct_coeff_table_6_ce0 ),
    .q0( dct_coeff_table_6_q0 )
);

dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_7 #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_7_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_7_address0 ),
    .ce0( dct_coeff_table_7_ce0 ),
    .q0( dct_coeff_table_7_q0 )
);

dct_mac_muladd_15s_16s_29s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15s_16s_29s_29_1_U44(
    .din0( ap_reg_ppstg_dct_coeff_table_4_load_reg_635_pp0_it2 ),
    .din1( col_inbuf_4_load_reg_690 ),
    .din2( tmp_6_5_i_reg_695 ),
    .dout( grp_fu_439_p3 )
);

dct_mac_muladd_15s_16s_14ns_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15s_16s_14ns_29_1_U45(
    .din0( dct_coeff_table_7_load_reg_660 ),
    .din1( col_inbuf_7_load_reg_665 ),
    .din2( grp_fu_447_p2 ),
    .dout( grp_fu_447_p3 )
);

dct_mul_mul_15s_16s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_15s_16s_29_1_U46(
    .din0( dct_coeff_table_3_load_reg_625 ),
    .din1( col_inbuf_3_load_reg_630 ),
    .dout( tmp_6_3_i_fu_455_p2 )
);

dct_mul_mul_15s_16s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_15s_16s_29_1_U47(
    .din0( dct_coeff_table_1_load_reg_610 ),
    .din1( col_inbuf_1_load_reg_615 ),
    .dout( tmp_6_1_i_fu_461_p2 )
);

dct_mac_muladd_15s_16s_29s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15s_16s_29s_29_1_U48(
    .din0( ap_reg_ppstg_dct_coeff_table_2_load_reg_620_pp0_it2 ),
    .din1( col_inbuf_2_load_reg_680 ),
    .din2( tmp_6_3_i_reg_685 ),
    .dout( grp_fu_467_p3 )
);

dct_mac_muladd_15s_16s_29s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15s_16s_29s_29_1_U49(
    .din0( dct_coeff_table_6_load_reg_650 ),
    .din1( col_inbuf_6_load_reg_655 ),
    .din2( grp_fu_447_p3 ),
    .dout( grp_fu_475_p3 )
);

dct_mul_mul_15s_16s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_15s_16s_29_1_U50(
    .din0( dct_coeff_table_5_load_reg_640 ),
    .din1( col_inbuf_5_load_reg_645 ),
    .dout( tmp_6_5_i_fu_483_p2 )
);

dct_mac_muladd_14ns_16s_29s_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_14ns_16s_29s_29_1_U51(
    .din0( grp_fu_489_p0 ),
    .din1( col_inbuf_0_load_reg_670 ),
    .din2( tmp_6_1_i_reg_675 ),
    .dout( grp_fu_489_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_i_fu_294_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_const_lv1_0 == exitcond1_i_fu_330_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_i_fu_294_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_lv1_0 == exitcond1_i_fu_330_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_i_fu_294_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(ap_const_lv1_0 == exitcond1_i_fu_330_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_const_lv1_0 == exitcond1_i_fu_330_p2))) begin
        i_2_i_reg_272 <= i_reg_501;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_270)) begin
        i_2_i_reg_272 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_lv1_0 == exitcond1_i_fu_330_p2))) begin
        k_i_reg_283 <= k_fu_336_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_i_fu_294_p2 == ap_const_lv1_0))) begin
        k_i_reg_283 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_dct_coeff_table_0_load_reg_605_pp0_it2 <= dct_coeff_table_0_load_reg_605;
        ap_reg_ppstg_dct_coeff_table_2_load_reg_620_pp0_it2 <= dct_coeff_table_2_load_reg_620;
        ap_reg_ppstg_dct_coeff_table_4_load_reg_635_pp0_it2 <= dct_coeff_table_4_load_reg_635;
        ap_reg_ppstg_exitcond1_i_reg_551_pp0_it2 <= ap_reg_ppstg_exitcond1_i_reg_551_pp0_it1;
        ap_reg_ppstg_exitcond1_i_reg_551_pp0_it3 <= ap_reg_ppstg_exitcond1_i_reg_551_pp0_it2;
        ap_reg_ppstg_tmp_6_reg_560_pp0_it2 <= ap_reg_ppstg_tmp_6_reg_560_pp0_it1;
        ap_reg_ppstg_tmp_6_reg_560_pp0_it3 <= ap_reg_ppstg_tmp_6_reg_560_pp0_it2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2)) begin
        ap_reg_ppstg_exitcond1_i_reg_551_pp0_it1 <= exitcond1_i_reg_551;
        ap_reg_ppstg_tmp_6_reg_560_pp0_it1 <= tmp_6_reg_560;
        exitcond1_i_reg_551 <= exitcond1_i_fu_330_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_i_fu_294_p2 == ap_const_lv1_0))) begin
        col_inbuf_0_addr_reg_511 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_1_addr_reg_516 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_2_addr_reg_521 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_3_addr_reg_526 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_4_addr_reg_531 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_5_addr_reg_536 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_6_addr_reg_541 <= tmp_81_cast_i_fu_306_p1;
        col_inbuf_7_addr_reg_546 <= tmp_81_cast_i_fu_306_p1;
        tmp_22_cast_reg_506[6 : 3] <= tmp_22_cast_fu_326_p1[6 : 3];
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_551_pp0_it1)) begin
        col_inbuf_0_load_reg_670 <= col_inbuf_0_q0;
        col_inbuf_2_load_reg_680 <= col_inbuf_2_q0;
        col_inbuf_4_load_reg_690 <= col_inbuf_4_q0;
        tmp_6_1_i_reg_675 <= tmp_6_1_i_fu_461_p2;
        tmp_6_3_i_reg_685 <= tmp_6_3_i_fu_455_p2;
        tmp_6_5_i_reg_695 <= tmp_6_5_i_fu_483_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_lv1_0 == exitcond1_i_reg_551))) begin
        col_inbuf_1_load_reg_615 <= col_inbuf_1_q0;
        col_inbuf_3_load_reg_630 <= col_inbuf_3_q0;
        col_inbuf_5_load_reg_645 <= col_inbuf_5_q0;
        col_inbuf_6_load_reg_655 <= col_inbuf_6_q0;
        col_inbuf_7_load_reg_665 <= col_inbuf_7_q0;
        dct_coeff_table_0_load_reg_605 <= dct_coeff_table_0_q0;
        dct_coeff_table_1_load_reg_610 <= dct_coeff_table_1_q0;
        dct_coeff_table_2_load_reg_620 <= dct_coeff_table_2_q0;
        dct_coeff_table_3_load_reg_625 <= dct_coeff_table_3_q0;
        dct_coeff_table_4_load_reg_635 <= dct_coeff_table_4_q0;
        dct_coeff_table_5_load_reg_640 <= dct_coeff_table_5_q0;
        dct_coeff_table_6_load_reg_650 <= dct_coeff_table_6_q0;
        dct_coeff_table_7_load_reg_660 <= dct_coeff_table_7_q0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_reg_501 <= i_fu_300_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_551_pp0_it1))) begin
        tmp5_reg_700 <= grp_fu_475_p3;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_551_pp0_it2)) begin
        tmp_3_i_reg_705 <= {{tmp_i_20_fu_419_p2[ap_const_lv32_1C : ap_const_lv32_D]}};
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_lv1_0 == exitcond1_i_fu_330_p2))) begin
        tmp_6_reg_560 <= tmp_6_fu_358_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or exitcond2_i_fu_294_p2 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_i_fu_294_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (exitcond2_i_fu_294_p2 or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_i_fu_294_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. ///
always @ (ap_sig_bdd_181) begin
    if (ap_sig_bdd_181) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_149) begin
    if (ap_sig_bdd_149) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// col_inbuf_0_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_0_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_0_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        col_inbuf_1_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_1_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_2_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_2_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        col_inbuf_3_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_3_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_4_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_4_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_4_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_5_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        col_inbuf_5_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_5_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_6_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        col_inbuf_6_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_6_ce0 = ap_const_logic_0;
    end
end

/// col_inbuf_7_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        col_inbuf_7_ce0 = ap_const_logic_1;
    end else begin
        col_inbuf_7_ce0 = ap_const_logic_0;
    end
end

/// col_outbuf_i_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) begin
        col_outbuf_i_ce0 = ap_const_logic_1;
    end else begin
        col_outbuf_i_ce0 = ap_const_logic_0;
    end
end

/// col_outbuf_i_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4 or ap_reg_ppstg_exitcond1_i_reg_551_pp0_it3) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_i_reg_551_pp0_it3))) begin
        col_outbuf_i_we0 = ap_const_logic_1;
    end else begin
        col_outbuf_i_we0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_0_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_0_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_0_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_1_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_1_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_2_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_2_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_3_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_3_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_4_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_4_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_4_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_5_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_5_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_5_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_6_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_6_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_6_ce0 = ap_const_logic_0;
    end
end

/// dct_coeff_table_7_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        dct_coeff_table_7_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_7_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond2_i_fu_294_p2 or exitcond1_i_fu_330_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it3 or ap_reg_ppiten_pp0_it4 or ap_sig_bdd_270) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_270) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_i_fu_294_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it4) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it3)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_const_lv1_0 == exitcond1_i_fu_330_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_const_lv1_0 == exitcond1_i_fu_330_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_149 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_149 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_181 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_181 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_270 assign process. ///
always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_270 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign col_inbuf_0_address0 = col_inbuf_0_addr_reg_511;
assign col_inbuf_1_address0 = col_inbuf_1_addr_reg_516;
assign col_inbuf_2_address0 = col_inbuf_2_addr_reg_521;
assign col_inbuf_3_address0 = col_inbuf_3_addr_reg_526;
assign col_inbuf_4_address0 = col_inbuf_4_addr_reg_531;
assign col_inbuf_5_address0 = col_inbuf_5_addr_reg_536;
assign col_inbuf_6_address0 = col_inbuf_6_addr_reg_541;
assign col_inbuf_7_address0 = col_inbuf_7_addr_reg_546;
assign col_outbuf_i_address0 = tmp_23_cast_fu_435_p1;
assign col_outbuf_i_d0 = tmp_3_i_reg_705;
assign dct_coeff_table_0_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_1_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_2_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_3_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_4_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_5_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_6_address0 = tmp_i_fu_342_p1;
assign dct_coeff_table_7_address0 = tmp_i_fu_342_p1;
assign exitcond1_i_fu_330_p2 = (k_i_reg_283 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond2_i_fu_294_p2 = (i_2_i_reg_272 == ap_const_lv4_8? 1'b1: 1'b0);
assign grp_fu_447_p2 = ap_const_lv29_1000;
assign grp_fu_489_p0 = grp_fu_489_p00;
assign grp_fu_489_p00 = ap_reg_ppstg_dct_coeff_table_0_load_reg_605_pp0_it2;
assign i_fu_300_p2 = (i_2_i_reg_272 + ap_const_lv4_1);
assign k_fu_336_p2 = (k_i_reg_283 + ap_const_lv4_1);
assign tmp3_fu_415_p2 = ($signed(grp_fu_439_p3) + $signed(tmp5_reg_700));
assign tmp_22_cast_fu_326_p1 = tmp_s_fu_318_p3;
assign tmp_23_cast_fu_435_p1 = ap_reg_ppstg_tmp_6_reg_560_pp0_it3;
assign tmp_6_fu_358_p2 = (tmp_22_cast_reg_506 + tmp_i_cast_fu_354_p1);
assign tmp_81_cast_i_fu_306_p1 = i_2_i_reg_272;
assign tmp_fu_411_p2 = ($signed(grp_fu_489_p3) + $signed(grp_fu_467_p3));
assign tmp_i_20_fu_419_p2 = (tmp_fu_411_p2 + tmp3_fu_415_p2);
assign tmp_i_cast_fu_354_p1 = k_i_reg_283;
assign tmp_i_fu_342_p1 = k_i_reg_283;
assign tmp_s_fu_318_p3 = {{i_2_i_reg_272}, {ap_const_lv3_0}};
always @ (posedge ap_clk) begin
    tmp_22_cast_reg_506[2:0] <= 3'b000;
    tmp_22_cast_reg_506[7] <= 1'b0;
end



endmodule //dct_Loop_Col_DCT_Loop_proc

