// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_Loop_real2xfft_output_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        windowed_0_dout,
        windowed_0_empty_n,
        windowed_0_read,
        windowed_1_dout,
        windowed_1_empty_n,
        windowed_1_read,
        dout_TDATA,
        dout_TVALID,
        dout_TREADY,
        dout_TLAST
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_3FE = 10'b1111111110;
parameter    ap_const_lv11_2 = 11'b10;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] windowed_0_dout;
input   windowed_0_empty_n;
output   windowed_0_read;
input  [15:0] windowed_1_dout;
input   windowed_1_empty_n;
output   windowed_1_read;
output  [31:0] dout_TDATA;
output   dout_TVALID;
input   dout_TREADY;
output  [0:0] dout_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg windowed_0_read;
reg windowed_1_read;
reg dout_TVALID;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [9:0] tmp_fu_128_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_47;
reg    ap_sig_bdd_56;
reg    ap_sig_ioackin_dout_TREADY;
reg   [9:0] i1_reg_88;
reg    ap_sig_bdd_66;
wire   [0:0] tmp_6_fu_132_p3;
reg    ap_reg_ioackin_dout_TREADY = 1'b0;
wire   [10:0] i21_cast_fu_102_p1;
wire   [10:0] i_fu_122_p2;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)) & ~(tmp_6_fu_132_p3 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_dout_TREADY assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_dout_TREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_dout_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)))) begin
            ap_reg_ioackin_dout_TREADY <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_56 & (ap_const_logic_1 == dout_TREADY))) begin
            ap_reg_ioackin_dout_TREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)) & (tmp_6_fu_132_p3 == ap_const_lv1_0))) begin
        i1_reg_88 <= tmp_fu_128_p1;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_66) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)) & ~(tmp_6_fu_132_p3 == ap_const_lv1_0)))) begin
        i1_reg_88 <= ap_const_lv10_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_56 or ap_sig_ioackin_dout_TREADY or tmp_6_fu_132_p3) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)) & ~(tmp_6_fu_132_p3 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_56 or ap_sig_ioackin_dout_TREADY or tmp_6_fu_132_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)) & ~(tmp_6_fu_132_p3 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_47) begin
    if (ap_sig_bdd_47) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_dout_TREADY assign process. ///
always @ (dout_TREADY or ap_reg_ioackin_dout_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_dout_TREADY)) begin
        ap_sig_ioackin_dout_TREADY = dout_TREADY;
    end else begin
        ap_sig_ioackin_dout_TREADY = ap_const_logic_1;
    end
end

/// dout_TVALID assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_56 or ap_reg_ioackin_dout_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_56 & (ap_const_logic_0 == ap_reg_ioackin_dout_TREADY))) begin
        dout_TVALID = ap_const_logic_1;
    end else begin
        dout_TVALID = ap_const_logic_0;
    end
end

/// windowed_0_read assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_56 or ap_sig_ioackin_dout_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)))) begin
        windowed_0_read = ap_const_logic_1;
    end else begin
        windowed_0_read = ap_const_logic_0;
    end
end

/// windowed_1_read assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_56 or ap_sig_ioackin_dout_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_56 | (ap_const_logic_0 == ap_sig_ioackin_dout_TREADY)))) begin
        windowed_1_read = ap_const_logic_1;
    end else begin
        windowed_1_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_56 or ap_sig_ioackin_dout_TREADY or ap_sig_bdd_66) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_66) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_47 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_47 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_56 assign process. ///
always @ (ap_start or ap_done_reg or windowed_0_empty_n or windowed_1_empty_n) begin
    ap_sig_bdd_56 = ((windowed_0_empty_n == ap_const_logic_0) | (windowed_1_empty_n == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1) | (ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_66 assign process. ///
always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_66 = ((ap_done_reg == ap_const_logic_1) | (ap_start == ap_const_logic_0));
end
assign dout_TDATA = {{windowed_1_dout}, {windowed_0_dout}};
assign dout_TLAST = (i1_reg_88 == ap_const_lv10_3FE? 1'b1: 1'b0);
assign i21_cast_fu_102_p1 = i1_reg_88;
assign i_fu_122_p2 = (ap_const_lv11_2 + i21_cast_fu_102_p1);
assign tmp_6_fu_132_p3 = i_fu_122_p2[ap_const_lv32_A];
assign tmp_fu_128_p1 = i_fu_122_p2[9:0];


endmodule //hls_real2xfft_Loop_real2xfft_output_proc

