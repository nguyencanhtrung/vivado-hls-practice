// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "hls_real2xfft_Loop_real2xfft_output_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hls_real2xfft_Loop_real2xfft_output_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hls_real2xfft_Loop_real2xfft_output_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> hls_real2xfft_Loop_real2xfft_output_proc::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> hls_real2xfft_Loop_real2xfft_output_proc::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv1_1 = "1";
const sc_lv<32> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv32_1 = "1";
const sc_lv<10> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv10_0 = "0000000000";
const sc_lv<1> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv1_0 = "0";
const sc_lv<10> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv10_3FE = "1111111110";
const sc_lv<11> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv11_2 = "10";
const sc_lv<32> hls_real2xfft_Loop_real2xfft_output_proc::ap_const_lv32_A = "1010";

hls_real2xfft_Loop_real2xfft_output_proc::hls_real2xfft_Loop_real2xfft_output_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( ap_sig_ioackin_dout_TREADY );
    sensitive << ( tmp_6_fu_132_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( ap_sig_ioackin_dout_TREADY );
    sensitive << ( tmp_6_fu_132_p3 );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_56);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( windowed_0_empty_n );
    sensitive << ( windowed_1_empty_n );

    SC_METHOD(thread_ap_sig_bdd_66);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_ap_sig_ioackin_dout_TREADY);
    sensitive << ( dout_TREADY );
    sensitive << ( ap_reg_ioackin_dout_TREADY );

    SC_METHOD(thread_dout_TDATA);
    sensitive << ( windowed_0_dout );
    sensitive << ( windowed_1_dout );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );

    SC_METHOD(thread_dout_TLAST);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( i1_reg_88 );

    SC_METHOD(thread_dout_TVALID);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( ap_reg_ioackin_dout_TREADY );

    SC_METHOD(thread_i21_cast_fu_102_p1);
    sensitive << ( i1_reg_88 );

    SC_METHOD(thread_i_fu_122_p2);
    sensitive << ( i21_cast_fu_102_p1 );

    SC_METHOD(thread_tmp_6_fu_132_p3);
    sensitive << ( i_fu_122_p2 );

    SC_METHOD(thread_tmp_fu_128_p1);
    sensitive << ( i_fu_122_p2 );

    SC_METHOD(thread_windowed_0_read);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( ap_sig_ioackin_dout_TREADY );

    SC_METHOD(thread_windowed_1_read);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( ap_sig_ioackin_dout_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_56 );
    sensitive << ( ap_sig_ioackin_dout_TREADY );
    sensitive << ( ap_sig_bdd_66 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    ap_reg_ioackin_dout_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hls_real2xfft_Loop_real2xfft_output_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, windowed_0_dout, "(port)windowed_0_dout");
    sc_trace(mVcdFile, windowed_0_empty_n, "(port)windowed_0_empty_n");
    sc_trace(mVcdFile, windowed_0_read, "(port)windowed_0_read");
    sc_trace(mVcdFile, windowed_1_dout, "(port)windowed_1_dout");
    sc_trace(mVcdFile, windowed_1_empty_n, "(port)windowed_1_empty_n");
    sc_trace(mVcdFile, windowed_1_read, "(port)windowed_1_read");
    sc_trace(mVcdFile, dout_TDATA, "(port)dout_TDATA");
    sc_trace(mVcdFile, dout_TVALID, "(port)dout_TVALID");
    sc_trace(mVcdFile, dout_TREADY, "(port)dout_TREADY");
    sc_trace(mVcdFile, dout_TLAST, "(port)dout_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, tmp_fu_128_p1, "tmp_fu_128_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_47, "ap_sig_bdd_47");
    sc_trace(mVcdFile, ap_sig_bdd_56, "ap_sig_bdd_56");
    sc_trace(mVcdFile, ap_sig_ioackin_dout_TREADY, "ap_sig_ioackin_dout_TREADY");
    sc_trace(mVcdFile, i1_reg_88, "i1_reg_88");
    sc_trace(mVcdFile, ap_sig_bdd_66, "ap_sig_bdd_66");
    sc_trace(mVcdFile, tmp_6_fu_132_p3, "tmp_6_fu_132_p3");
    sc_trace(mVcdFile, ap_reg_ioackin_dout_TREADY, "ap_reg_ioackin_dout_TREADY");
    sc_trace(mVcdFile, i21_cast_fu_102_p1, "i21_cast_fu_102_p1");
    sc_trace(mVcdFile, i_fu_122_p2, "i_fu_122_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

hls_real2xfft_Loop_real2xfft_output_proc::~hls_real2xfft_Loop_real2xfft_output_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                    !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())) && 
                    !esl_seteq<1,1,1>(tmp_6_fu_132_p3.read(), ap_const_lv1_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_dout_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
              !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read()))))) {
            ap_reg_ioackin_dout_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                     !ap_sig_bdd_56.read() && 
                     esl_seteq<1,1,1>(ap_const_logic_1, dout_TREADY.read())))) {
            ap_reg_ioackin_dout_TREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())) && 
         esl_seteq<1,1,1>(tmp_6_fu_132_p3.read(), ap_const_lv1_0))) {
        i1_reg_88 = tmp_fu_128_p1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                 !ap_sig_bdd_66.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                 !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())) && 
                 !esl_seteq<1,1,1>(tmp_6_fu_132_p3.read(), ap_const_lv1_0)))) {
        i1_reg_88 = ap_const_lv10_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())) && 
          !esl_seteq<1,1,1>(tmp_6_fu_132_p3.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())) && 
         !esl_seteq<1,1,1>(tmp_6_fu_132_p3.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_bdd_47() {
    ap_sig_bdd_47 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_bdd_56() {
    ap_sig_bdd_56 = (esl_seteq<1,1,1>(windowed_0_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(windowed_1_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_bdd_66() {
    ap_sig_bdd_66 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_47.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_sig_ioackin_dout_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_dout_TREADY.read())) {
        ap_sig_ioackin_dout_TREADY = dout_TREADY.read();
    } else {
        ap_sig_ioackin_dout_TREADY = ap_const_logic_1;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_dout_TDATA() {
    dout_TDATA = esl_concat<16,16>(windowed_1_dout.read(), windowed_0_dout.read());
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_dout_TLAST() {
    dout_TLAST = (!i1_reg_88.read().is_01() || !ap_const_lv10_3FE.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_88.read() == ap_const_lv10_3FE);
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_dout_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !ap_sig_bdd_56.read() && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_dout_TREADY.read())))) {
        dout_TVALID = ap_const_logic_1;
    } else {
        dout_TVALID = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_i21_cast_fu_102_p1() {
    i21_cast_fu_102_p1 = esl_zext<11,10>(i1_reg_88.read());
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_i_fu_122_p2() {
    i_fu_122_p2 = (!ap_const_lv11_2.is_01() || !i21_cast_fu_102_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_2) + sc_biguint<11>(i21_cast_fu_102_p1.read()));
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_tmp_6_fu_132_p3() {
    tmp_6_fu_132_p3 = i_fu_122_p2.read().range(10, 10);
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_tmp_fu_128_p1() {
    tmp_fu_128_p1 = i_fu_122_p2.read().range(10-1, 0);
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_windowed_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())))) {
        windowed_0_read = ap_const_logic_1;
    } else {
        windowed_0_read = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_windowed_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !(ap_sig_bdd_56.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_dout_TREADY.read())))) {
        windowed_1_read = ap_const_logic_1;
    } else {
        windowed_1_read = ap_const_logic_0;
    }
}

void hls_real2xfft_Loop_real2xfft_output_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_bdd_66.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

