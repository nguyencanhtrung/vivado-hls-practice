-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_real2xfft_window_fn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_0_V_empty_n : IN STD_LOGIC;
    indata_0_V_read : OUT STD_LOGIC;
    indata_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_1_V_empty_n : IN STD_LOGIC;
    indata_1_V_read : OUT STD_LOGIC;
    outdata_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    outdata_0_V_full_n : IN STD_LOGIC;
    outdata_0_V_write : OUT STD_LOGIC;
    outdata_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    outdata_1_V_full_n : IN STD_LOGIC;
    outdata_1_V_write : OUT STD_LOGIC );
end;


architecture behav of hls_real2xfft_window_fn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal exitcond_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_sig_bdd_53 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_sig_bdd_70 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal coeff_tab1_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coeff_tab1_0_ce0 : STD_LOGIC;
    signal coeff_tab1_0_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal coeff_tab1_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coeff_tab1_1_ce0 : STD_LOGIC;
    signal coeff_tab1_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i9_reg_140 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_252 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_257_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_257_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_125 : BOOLEAN;
    signal i9_phi_fu_144_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex1_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_158_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i9_cast_fu_154_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_1_fu_174_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_235_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal grp_fu_228_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_235_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_bdd_131 : BOOLEAN;

    component hls_real2xfft_mul_mul_16s_15ns_31_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_real2xfft_window_fn_coeff_tab1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component hls_real2xfft_window_fn_coeff_tab1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    coeff_tab1_0_U : component hls_real2xfft_window_fn_coeff_tab1_0
    generic map (
        DataWidth => 15,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeff_tab1_0_address0,
        ce0 => coeff_tab1_0_ce0,
        q0 => coeff_tab1_0_q0);

    coeff_tab1_1_U : component hls_real2xfft_window_fn_coeff_tab1_1
    generic map (
        DataWidth => 15,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeff_tab1_1_address0,
        ce0 => coeff_tab1_1_ce0,
        q0 => coeff_tab1_1_q0);

    hls_real2xfft_mul_mul_16s_15ns_31_3_U13 : component hls_real2xfft_mul_mul_16s_15ns_31_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indata_1_V_dout,
        din1 => grp_fu_228_p1,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    hls_real2xfft_mul_mul_16s_15ns_31_3_U14 : component hls_real2xfft_mul_mul_16s_15ns_31_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indata_0_V_dout,
        din1 => grp_fu_235_p1,
        ce => grp_fu_235_ce,
        dout => grp_fu_235_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_257_pp0_it2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_125))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_125))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i9_reg_140 assign process. --
    i9_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_0 = exitcond_reg_257))) then 
                i9_reg_140 <= tmp_2_reg_252;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_125)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = exitcond_reg_257))))) then 
                i9_reg_140 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then
                ap_reg_ppstg_exitcond_reg_257_pp0_it1 <= exitcond_reg_257;
                exitcond_reg_257 <= exitcond_fu_184_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1)))) then
                ap_reg_ppstg_exitcond_reg_257_pp0_it2 <= ap_reg_ppstg_exitcond_reg_257_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then
                tmp_2_reg_252 <= tmp_2_fu_180_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_done_reg, ap_CS_fsm, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3, ap_sig_bdd_125, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_125)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_reg_257_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_257_pp0_it2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, exitcond_fu_184_p2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if ((not((exitcond_fu_184_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;

    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_125 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_131 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_53 assign process. --
    ap_sig_bdd_53_assign_proc : process(indata_0_V_empty_n, indata_1_V_empty_n)
    begin
                ap_sig_bdd_53 <= ((indata_0_V_empty_n = ap_const_logic_0) or (indata_1_V_empty_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(outdata_0_V_full_n, outdata_1_V_full_n)
    begin
                ap_sig_bdd_70 <= ((outdata_0_V_full_n = ap_const_logic_0) or (outdata_1_V_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_tab1_0_address0 <= newIndex1_fu_168_p1(9 - 1 downto 0);

    -- coeff_tab1_0_ce0 assign process. --
    coeff_tab1_0_ce0_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            coeff_tab1_0_ce0 <= ap_const_logic_1;
        else 
            coeff_tab1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_tab1_1_address0 <= newIndex1_fu_168_p1(9 - 1 downto 0);

    -- coeff_tab1_1_ce0 assign process. --
    coeff_tab1_1_ce0_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            coeff_tab1_1_ce0 <= ap_const_logic_1;
        else 
            coeff_tab1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_184_p2 <= "1" when (i_1_1_fu_174_p2 = ap_const_lv11_400) else "0";

    -- grp_fu_228_ce assign process. --
    grp_fu_228_ce_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_228_p1 <= grp_fu_228_p10(15 - 1 downto 0);
    grp_fu_228_p10 <= std_logic_vector(resize(unsigned(coeff_tab1_1_q0),31));

    -- grp_fu_235_ce assign process. --
    grp_fu_235_ce_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            grp_fu_235_ce <= ap_const_logic_1;
        else 
            grp_fu_235_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_235_p1 <= grp_fu_235_p10(15 - 1 downto 0);
    grp_fu_235_p10 <= std_logic_vector(resize(unsigned(coeff_tab1_0_q0),31));
    i9_cast_fu_154_p1 <= std_logic_vector(resize(unsigned(i9_phi_fu_144_p6),11));

    -- i9_phi_fu_144_p6 assign process. --
    i9_phi_fu_144_p6_assign_proc : process(i9_reg_140, tmp_2_reg_252, exitcond_reg_257, ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then
            if (not((ap_const_lv1_0 = exitcond_reg_257))) then 
                i9_phi_fu_144_p6 <= ap_const_lv10_0;
            elsif ((ap_const_lv1_0 = exitcond_reg_257)) then 
                i9_phi_fu_144_p6 <= tmp_2_reg_252;
            else 
                i9_phi_fu_144_p6 <= i9_reg_140;
            end if;
        else 
            i9_phi_fu_144_p6 <= i9_reg_140;
        end if; 
    end process;

    i_1_1_fu_174_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(i9_cast_fu_154_p1));

    -- indata_0_V_read assign process. --
    indata_0_V_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            indata_0_V_read <= ap_const_logic_1;
        else 
            indata_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- indata_1_V_read assign process. --
    indata_1_V_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            indata_1_V_read <= ap_const_logic_1;
        else 
            indata_1_V_read <= ap_const_logic_0;
        end if; 
    end process;

    newIndex1_fu_168_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_158_p4),64));
    outdata_0_V_din <= grp_fu_235_p2(30 downto 15);

    -- outdata_0_V_write assign process. --
    outdata_0_V_write_assign_proc : process(ap_done_reg, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            outdata_0_V_write <= ap_const_logic_1;
        else 
            outdata_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outdata_1_V_din <= grp_fu_228_p2(30 downto 15);

    -- outdata_1_V_write assign process. --
    outdata_1_V_write_assign_proc : process(ap_done_reg, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_70 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (ap_done_reg = ap_const_logic_1))))) then 
            outdata_1_V_write <= ap_const_logic_1;
        else 
            outdata_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_158_p4 <= i9_phi_fu_144_p6(9 downto 1);
    tmp_2_fu_180_p1 <= i_1_1_fu_174_p2(10 - 1 downto 0);
end behav;
