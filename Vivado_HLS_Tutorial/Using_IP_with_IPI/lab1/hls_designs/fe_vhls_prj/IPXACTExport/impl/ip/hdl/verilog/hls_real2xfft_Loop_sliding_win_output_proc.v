// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_Loop_sliding_win_output_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        delayed_i_0_dout,
        delayed_i_0_empty_n,
        delayed_i_0_read,
        nodelay_i_0_dout,
        nodelay_i_0_empty_n,
        nodelay_i_0_read,
        delayed_i_1_dout,
        delayed_i_1_empty_n,
        delayed_i_1_read,
        nodelay_i_1_dout,
        nodelay_i_1_empty_n,
        nodelay_i_1_read,
        data2window_0_din,
        data2window_0_full_n,
        data2window_0_write,
        data2window_1_din,
        data2window_1_full_n,
        data2window_1_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv11_2 = 11'b10;
parameter    ap_const_lv11_400 = 11'b10000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] delayed_i_0_dout;
input   delayed_i_0_empty_n;
output   delayed_i_0_read;
input  [15:0] nodelay_i_0_dout;
input   nodelay_i_0_empty_n;
output   nodelay_i_0_read;
input  [15:0] delayed_i_1_dout;
input   delayed_i_1_empty_n;
output   delayed_i_1_read;
input  [15:0] nodelay_i_1_dout;
input   nodelay_i_1_empty_n;
output   nodelay_i_1_read;
output  [15:0] data2window_0_din;
input   data2window_0_full_n;
output   data2window_0_write;
output  [15:0] data2window_1_din;
input   data2window_1_full_n;
output   data2window_1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg delayed_i_0_read;
reg nodelay_i_0_read;
reg delayed_i_1_read;
reg nodelay_i_1_read;
reg data2window_0_write;
reg data2window_1_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [0:0] exitcond_i_fu_200_p2;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_37;
wire    ap_reg_ppiten_pp0_it0;
reg   [0:0] tmp_reg_208;
reg   [0:0] tmp_3_reg_212;
reg    ap_sig_bdd_75;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_sig_bdd_90;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [9:0] i2_0_i1_reg_136;
wire   [9:0] tmp_4_fu_196_p1;
reg   [9:0] tmp_4_reg_216;
reg   [0:0] exitcond_i_reg_221;
reg   [0:0] ap_reg_ppstg_exitcond_i_reg_221_pp0_it1;
reg    ap_sig_bdd_132;
reg   [9:0] i2_0_i1_phi_fu_140_p6;
wire   [15:0] ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1;
reg   [15:0] ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2;
wire   [15:0] ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1;
reg   [15:0] ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2;
wire   [10:0] i2_0_i1_cast_fu_170_p1;
wire   [10:0] i_3_1_fu_190_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;
reg    ap_sig_bdd_139;
reg    ap_sig_bdd_138;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)) & ~(ap_const_lv1_0 == ap_reg_ppstg_exitcond_i_reg_221_pp0_it1))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_132)) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_132)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (ap_sig_bdd_139) begin
        if (~(ap_const_lv1_0 == tmp_3_reg_212)) begin
            ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 <= nodelay_i_1_dout;
        end else if ((ap_const_lv1_0 == tmp_3_reg_212)) begin
            ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 <= delayed_i_1_dout;
        end else if ((ap_true == ap_true)) begin
            ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 <= ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (ap_sig_bdd_139) begin
        if (~(ap_const_lv1_0 == tmp_reg_208)) begin
            ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 <= nodelay_i_0_dout;
        end else if ((ap_const_lv1_0 == tmp_reg_208)) begin
            ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 <= delayed_i_0_dout;
        end else if ((ap_true == ap_true)) begin
            ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 <= ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)) & (ap_const_lv1_0 == exitcond_i_reg_221))) begin
        i2_0_i1_reg_136 <= tmp_4_reg_216;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_132) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)) & ~(ap_const_lv1_0 == exitcond_i_reg_221)))) begin
        i2_0_i1_reg_136 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        ap_reg_ppstg_exitcond_i_reg_221_pp0_it1 <= exitcond_i_reg_221;
        exitcond_i_reg_221 <= exitcond_i_fu_200_p2;
        tmp_3_reg_212 <= i2_0_i1_phi_fu_140_p6[ap_const_lv32_9];
        tmp_reg_208 <= i2_0_i1_phi_fu_140_p6[ap_const_lv32_9];
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        tmp_4_reg_216 <= tmp_4_fu_196_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond_i_reg_221_pp0_it1) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)) & ~(ap_const_lv1_0 == ap_reg_ppstg_exitcond_i_reg_221_pp0_it1)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_done_reg or exitcond_i_fu_200_p2 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if ((~(exitcond_i_fu_200_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_37) begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// data2window_0_write assign process. ///
always @ (ap_done_reg or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        data2window_0_write = ap_const_logic_1;
    end else begin
        data2window_0_write = ap_const_logic_0;
    end
end

/// data2window_1_write assign process. ///
always @ (ap_done_reg or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        data2window_1_write = ap_const_logic_1;
    end else begin
        data2window_1_write = ap_const_logic_0;
    end
end

/// delayed_i_0_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_reg_208 or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_lv1_0 == tmp_reg_208) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        delayed_i_0_read = ap_const_logic_1;
    end else begin
        delayed_i_0_read = ap_const_logic_0;
    end
end

/// delayed_i_1_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_3_reg_212 or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_lv1_0 == tmp_3_reg_212) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        delayed_i_1_read = ap_const_logic_1;
    end else begin
        delayed_i_1_read = ap_const_logic_0;
    end
end

/// i2_0_i1_phi_fu_140_p6 assign process. ///
always @ (i2_0_i1_reg_136 or tmp_4_reg_216 or exitcond_i_reg_221 or ap_sig_bdd_138) begin
    if (ap_sig_bdd_138) begin
        if (~(ap_const_lv1_0 == exitcond_i_reg_221)) begin
            i2_0_i1_phi_fu_140_p6 = ap_const_lv10_0;
        end else if ((ap_const_lv1_0 == exitcond_i_reg_221)) begin
            i2_0_i1_phi_fu_140_p6 = tmp_4_reg_216;
        end else begin
            i2_0_i1_phi_fu_140_p6 = i2_0_i1_reg_136;
        end
    end else begin
        i2_0_i1_phi_fu_140_p6 = i2_0_i1_reg_136;
    end
end

/// nodelay_i_0_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_reg_208 or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_const_lv1_0 == tmp_reg_208) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        nodelay_i_0_read = ap_const_logic_1;
    end else begin
        nodelay_i_0_read = ap_const_logic_0;
    end
end

/// nodelay_i_1_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_3_reg_212 or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_const_lv1_0 == tmp_3_reg_212) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)))) begin
        nodelay_i_1_read = ap_const_logic_1;
    end else begin
        nodelay_i_1_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2 or ap_sig_bdd_132 or ap_sig_pprstidle_pp0) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_132) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~(ap_const_logic_1 == ap_sig_pprstidle_pp0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)) & (ap_const_logic_1 == ap_sig_pprstidle_pp0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1 = 'bx;
assign ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1 = 'bx;
assign ap_reg_ppiten_pp0_it0 = ap_start;

/// ap_sig_bdd_132 assign process. ///
always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_132 = ((ap_done_reg == ap_const_logic_1) | (ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_138 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1) begin
    ap_sig_bdd_138 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1));
end

/// ap_sig_bdd_139 assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_75 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_90 or ap_reg_ppiten_pp0_it2) begin
    ap_sig_bdd_139 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_75 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_90 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | (ap_done_reg == ap_const_logic_1)));
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_37 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_75 assign process. ///
always @ (delayed_i_0_empty_n or tmp_reg_208 or nodelay_i_0_empty_n or delayed_i_1_empty_n or tmp_3_reg_212 or nodelay_i_1_empty_n) begin
    ap_sig_bdd_75 = (((delayed_i_0_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == tmp_reg_208)) | ((nodelay_i_0_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_reg_208)) | ((delayed_i_1_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == tmp_3_reg_212)) | ((nodelay_i_1_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_3_reg_212)));
end

/// ap_sig_bdd_90 assign process. ///
always @ (data2window_0_full_n or data2window_1_full_n) begin
    ap_sig_bdd_90 = ((data2window_0_full_n == ap_const_logic_0) | (data2window_1_full_n == ap_const_logic_0));
end
assign data2window_0_din = ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2;
assign data2window_1_din = ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2;
assign exitcond_i_fu_200_p2 = (i_3_1_fu_190_p2 == ap_const_lv11_400? 1'b1: 1'b0);
assign i2_0_i1_cast_fu_170_p1 = i2_0_i1_phi_fu_140_p6;
assign i_3_1_fu_190_p2 = (ap_const_lv11_2 + i2_0_i1_cast_fu_170_p1);
assign tmp_4_fu_196_p1 = i_3_1_fu_190_p2[9:0];


endmodule //hls_real2xfft_Loop_sliding_win_output_proc

