// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_xfft2real_Loop_realfft_be_buffer_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        descramble_buf_0_M_imag_V_address0,
        descramble_buf_0_M_imag_V_ce0,
        descramble_buf_0_M_imag_V_we0,
        descramble_buf_0_M_imag_V_d0,
        descramble_buf_1_M_imag_V_address0,
        descramble_buf_1_M_imag_V_ce0,
        descramble_buf_1_M_imag_V_we0,
        descramble_buf_1_M_imag_V_d0,
        din_TDATA,
        din_TVALID,
        din_TREADY,
        din_TLAST,
        descramble_buf_0_M_real_V_address0,
        descramble_buf_0_M_real_V_ce0,
        descramble_buf_0_M_real_V_we0,
        descramble_buf_0_M_real_V_d0,
        descramble_buf_1_M_real_V_address0,
        descramble_buf_1_M_real_V_ce0,
        descramble_buf_1_M_real_V_we0,
        descramble_buf_1_M_real_V_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] descramble_buf_0_M_imag_V_address0;
output   descramble_buf_0_M_imag_V_ce0;
output   descramble_buf_0_M_imag_V_we0;
output  [15:0] descramble_buf_0_M_imag_V_d0;
output  [7:0] descramble_buf_1_M_imag_V_address0;
output   descramble_buf_1_M_imag_V_ce0;
output   descramble_buf_1_M_imag_V_we0;
output  [15:0] descramble_buf_1_M_imag_V_d0;
input  [31:0] din_TDATA;
input   din_TVALID;
output   din_TREADY;
input  [0:0] din_TLAST;
output  [7:0] descramble_buf_0_M_real_V_address0;
output   descramble_buf_0_M_real_V_ce0;
output   descramble_buf_0_M_real_V_we0;
output  [15:0] descramble_buf_0_M_real_V_d0;
output  [7:0] descramble_buf_1_M_real_V_address0;
output   descramble_buf_1_M_real_V_ce0;
output   descramble_buf_1_M_real_V_we0;
output  [15:0] descramble_buf_1_M_real_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg descramble_buf_0_M_imag_V_ce0;
reg descramble_buf_0_M_imag_V_we0;
reg descramble_buf_1_M_imag_V_ce0;
reg descramble_buf_1_M_imag_V_we0;
reg din_TREADY;
reg descramble_buf_0_M_real_V_ce0;
reg descramble_buf_0_M_real_V_we0;
reg descramble_buf_1_M_real_V_ce0;
reg descramble_buf_1_M_real_V_we0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [8:0] i_fu_164_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_67;
reg    ap_sig_bdd_74;
reg   [8:0] val_assign_reg_114;
reg    ap_sig_bdd_81;
wire   [0:0] exitcond2240_i_fu_182_p2;
wire   [63:0] newIndex1_fu_142_p1;
wire   [15:0] tmp_fu_150_p1;
wire   [0:0] tmp_28_fu_156_p3;
wire   [15:0] tmp_data_M_imag_V_load_new_fu_170_p4;
reg   [7:0] newIndex_fu_132_p4;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & ~(exitcond2240_i_fu_182_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & (exitcond2240_i_fu_182_p2 == ap_const_lv1_0))) begin
        val_assign_reg_114 <= i_fu_164_p2;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_81) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & ~(exitcond2240_i_fu_182_p2 == ap_const_lv1_0)))) begin
        val_assign_reg_114 <= ap_const_lv9_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74 or exitcond2240_i_fu_182_p2) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & ~(exitcond2240_i_fu_182_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74 or exitcond2240_i_fu_182_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & ~(exitcond2240_i_fu_182_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_67) begin
    if (ap_sig_bdd_67) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// descramble_buf_0_M_imag_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74)) begin
        descramble_buf_0_M_imag_V_ce0 = ap_const_logic_1;
    end else begin
        descramble_buf_0_M_imag_V_ce0 = ap_const_logic_0;
    end
end

/// descramble_buf_0_M_imag_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74 or tmp_28_fu_156_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & (ap_const_lv1_0 == tmp_28_fu_156_p3))) begin
        descramble_buf_0_M_imag_V_we0 = ap_const_logic_1;
    end else begin
        descramble_buf_0_M_imag_V_we0 = ap_const_logic_0;
    end
end

/// descramble_buf_0_M_real_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74)) begin
        descramble_buf_0_M_real_V_ce0 = ap_const_logic_1;
    end else begin
        descramble_buf_0_M_real_V_ce0 = ap_const_logic_0;
    end
end

/// descramble_buf_0_M_real_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74 or tmp_28_fu_156_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & (ap_const_lv1_0 == tmp_28_fu_156_p3))) begin
        descramble_buf_0_M_real_V_we0 = ap_const_logic_1;
    end else begin
        descramble_buf_0_M_real_V_we0 = ap_const_logic_0;
    end
end

/// descramble_buf_1_M_imag_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74)) begin
        descramble_buf_1_M_imag_V_ce0 = ap_const_logic_1;
    end else begin
        descramble_buf_1_M_imag_V_ce0 = ap_const_logic_0;
    end
end

/// descramble_buf_1_M_imag_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74 or tmp_28_fu_156_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & ~(ap_const_lv1_0 == tmp_28_fu_156_p3))) begin
        descramble_buf_1_M_imag_V_we0 = ap_const_logic_1;
    end else begin
        descramble_buf_1_M_imag_V_we0 = ap_const_logic_0;
    end
end

/// descramble_buf_1_M_real_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74)) begin
        descramble_buf_1_M_real_V_ce0 = ap_const_logic_1;
    end else begin
        descramble_buf_1_M_real_V_ce0 = ap_const_logic_0;
    end
end

/// descramble_buf_1_M_real_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74 or tmp_28_fu_156_p3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74 & ~(ap_const_lv1_0 == tmp_28_fu_156_p3))) begin
        descramble_buf_1_M_real_V_we0 = ap_const_logic_1;
    end else begin
        descramble_buf_1_M_real_V_we0 = ap_const_logic_0;
    end
end

/// din_TREADY assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_74) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_74)) begin
        din_TREADY = ap_const_logic_1;
    end else begin
        din_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_74 or ap_sig_bdd_81) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_81) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_67 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_67 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_start or ap_done_reg or din_TVALID) begin
    ap_sig_bdd_74 = ((din_TVALID == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1) | (ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_81 = ((ap_done_reg == ap_const_logic_1) | (ap_start == ap_const_logic_0));
end
assign descramble_buf_0_M_imag_V_address0 = newIndex1_fu_142_p1;
assign descramble_buf_0_M_imag_V_d0 = tmp_data_M_imag_V_load_new_fu_170_p4;
assign descramble_buf_0_M_real_V_address0 = newIndex1_fu_142_p1;
assign descramble_buf_0_M_real_V_d0 = tmp_fu_150_p1;
assign descramble_buf_1_M_imag_V_address0 = newIndex1_fu_142_p1;
assign descramble_buf_1_M_imag_V_d0 = tmp_data_M_imag_V_load_new_fu_170_p4;
assign descramble_buf_1_M_real_V_address0 = newIndex1_fu_142_p1;
assign descramble_buf_1_M_real_V_d0 = tmp_fu_150_p1;
assign exitcond2240_i_fu_182_p2 = (val_assign_reg_114 == ap_const_lv9_1FF? 1'b1: 1'b0);
assign i_fu_164_p2 = (ap_const_lv9_1 + val_assign_reg_114);
assign newIndex1_fu_142_p1 = newIndex_fu_132_p4;

integer ap_tvar_int_0;

always @ (val_assign_reg_114) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_8 - ap_const_lv32_1) begin
            newIndex_fu_132_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            newIndex_fu_132_p4[ap_tvar_int_0] = val_assign_reg_114[ap_const_lv32_8 - ap_tvar_int_0];
        end
    end
end


assign tmp_28_fu_156_p3 = val_assign_reg_114[ap_const_lv32_0];
assign tmp_data_M_imag_V_load_new_fu_170_p4 = {{din_TDATA[ap_const_lv32_1F : ap_const_lv32_10]}};
assign tmp_fu_150_p1 = din_TDATA[15:0];


endmodule //hls_xfft2real_Loop_realfft_be_buffer_proc

