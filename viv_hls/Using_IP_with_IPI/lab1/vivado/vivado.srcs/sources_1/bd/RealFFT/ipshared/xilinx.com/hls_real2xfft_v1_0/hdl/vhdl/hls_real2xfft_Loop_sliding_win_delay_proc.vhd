-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_real2xfft_Loop_sliding_win_delay_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_V_V_TVALID : IN STD_LOGIC;
    nodelay_i_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    nodelay_i_0_full_n : IN STD_LOGIC;
    nodelay_i_0_write : OUT STD_LOGIC;
    nodelay_i_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    nodelay_i_1_full_n : IN STD_LOGIC;
    nodelay_i_1_write : OUT STD_LOGIC;
    delayed_i_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    delayed_i_0_full_n : IN STD_LOGIC;
    delayed_i_0_write : OUT STD_LOGIC;
    delayed_i_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    delayed_i_1_full_n : IN STD_LOGIC;
    delayed_i_1_write : OUT STD_LOGIC;
    din_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    din_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of hls_real2xfft_Loop_sliding_win_delay_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal exitcond51_i_i_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal tmp_5_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_75 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal delay_line_Array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal delay_line_Array_V_ce0 : STD_LOGIC;
    signal delay_line_Array_V_we0 : STD_LOGIC;
    signal delay_line_Array_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_line_Array_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_i3_reg_120 : STD_LOGIC_VECTOR (8 downto 0);
    signal din_val_V_reg_163 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_134_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_138_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_174 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond51_i_i_reg_179 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_107 : BOOLEAN;
    signal i_0_i_i3_phi_fu_124_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;

    component hls_real2xfft_Loop_sliding_win_delay_proc_delay_line_Array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    delay_line_Array_V_U : component hls_real2xfft_Loop_sliding_win_delay_proc_delay_line_Array_V
    generic map (
        DataWidth => 16,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_line_Array_V_address0,
        ce0 => delay_line_Array_V_ce0,
        we0 => delay_line_Array_V_we0,
        d0 => delay_line_Array_V_d0,
        q0 => delay_line_Array_V_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = exitcond51_i_i_reg_179)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i_i3_reg_120 assign process. --
    i_0_i_i3_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_0 = exitcond51_i_i_reg_179))) then 
                i_0_i_i3_reg_120 <= i_reg_174;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_107)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = exitcond51_i_i_reg_179))))) then 
                i_0_i_i3_reg_120 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then
                din_val_V_reg_163 <= din_V_V_TDATA;
                exitcond51_i_i_reg_179 <= exitcond51_i_i_fu_144_p2;
                tmp_5_reg_170 <= tmp_5_fu_134_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then
                i_reg_174 <= i_fu_138_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_done_reg, ap_CS_fsm, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_107, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_107)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, exitcond51_i_i_reg_179)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = exitcond51_i_i_reg_179))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, exitcond51_i_i_fu_144_p2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((exitcond51_i_i_fu_144_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;

    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_107 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_113 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(nodelay_i_0_full_n, tmp_5_reg_170, nodelay_i_1_full_n, delayed_i_0_full_n, delayed_i_1_full_n)
    begin
                ap_sig_bdd_75 <= (((nodelay_i_0_full_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_5_reg_170)) or ((nodelay_i_1_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_5_reg_170))) or ((ap_const_lv1_0 = tmp_5_reg_170) and (delayed_i_0_full_n = ap_const_logic_0)) or (not((ap_const_lv1_0 = tmp_5_reg_170)) and (delayed_i_1_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Array_V_address0 <= ap_const_lv9_1FF;

    -- delay_line_Array_V_ce0 assign process. --
    delay_line_Array_V_ce0_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            delay_line_Array_V_ce0 <= ap_const_logic_1;
        else 
            delay_line_Array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Array_V_d0 <= din_val_V_reg_163;

    -- delay_line_Array_V_we0 assign process. --
    delay_line_Array_V_we0_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            delay_line_Array_V_we0 <= ap_const_logic_1;
        else 
            delay_line_Array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    delayed_i_0_din <= delay_line_Array_V_q0;

    -- delayed_i_0_write assign process. --
    delayed_i_0_write_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, tmp_5_reg_170, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = tmp_5_reg_170) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            delayed_i_0_write <= ap_const_logic_1;
        else 
            delayed_i_0_write <= ap_const_logic_0;
        end if; 
    end process;

    delayed_i_1_din <= delay_line_Array_V_q0;

    -- delayed_i_1_write assign process. --
    delayed_i_1_write_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, tmp_5_reg_170, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = tmp_5_reg_170)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            delayed_i_1_write <= ap_const_logic_1;
        else 
            delayed_i_1_write <= ap_const_logic_0;
        end if; 
    end process;


    -- din_V_V_TREADY assign process. --
    din_V_V_TREADY_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            din_V_V_TREADY <= ap_const_logic_1;
        else 
            din_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    exitcond51_i_i_fu_144_p2 <= "1" when (i_0_i_i3_phi_fu_124_p6 = ap_const_lv9_1FF) else "0";

    -- i_0_i_i3_phi_fu_124_p6 assign process. --
    i_0_i_i3_phi_fu_124_p6_assign_proc : process(i_0_i_i3_reg_120, i_reg_174, exitcond51_i_i_reg_179, ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then
            if (not((ap_const_lv1_0 = exitcond51_i_i_reg_179))) then 
                i_0_i_i3_phi_fu_124_p6 <= ap_const_lv9_0;
            elsif ((ap_const_lv1_0 = exitcond51_i_i_reg_179)) then 
                i_0_i_i3_phi_fu_124_p6 <= i_reg_174;
            else 
                i_0_i_i3_phi_fu_124_p6 <= i_0_i_i3_reg_120;
            end if;
        else 
            i_0_i_i3_phi_fu_124_p6 <= i_0_i_i3_reg_120;
        end if; 
    end process;

    i_fu_138_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i_0_i_i3_phi_fu_124_p6));
    nodelay_i_0_din <= din_val_V_reg_163;

    -- nodelay_i_0_write assign process. --
    nodelay_i_0_write_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, tmp_5_reg_170, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = tmp_5_reg_170) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            nodelay_i_0_write <= ap_const_logic_1;
        else 
            nodelay_i_0_write <= ap_const_logic_0;
        end if; 
    end process;

    nodelay_i_1_din <= din_val_V_reg_163;

    -- nodelay_i_1_write assign process. --
    nodelay_i_1_write_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, din_V_V_TVALID, tmp_5_reg_170, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = tmp_5_reg_170)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (din_V_V_TVALID = ap_const_logic_0)) or (ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_done_reg = ap_const_logic_1))))) then 
            nodelay_i_1_write <= ap_const_logic_1;
        else 
            nodelay_i_1_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_5_fu_134_p1 <= i_0_i_i3_phi_fu_124_p6(1 - 1 downto 0);
end behav;
