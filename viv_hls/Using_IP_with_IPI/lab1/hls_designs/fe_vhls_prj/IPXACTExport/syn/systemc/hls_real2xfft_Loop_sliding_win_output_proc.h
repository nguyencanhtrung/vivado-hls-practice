// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _hls_real2xfft_Loop_sliding_win_output_proc_HH_
#define _hls_real2xfft_Loop_sliding_win_output_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hls_real2xfft_Loop_sliding_win_output_proc : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > delayed_i_0_dout;
    sc_in< sc_logic > delayed_i_0_empty_n;
    sc_out< sc_logic > delayed_i_0_read;
    sc_in< sc_lv<16> > nodelay_i_0_dout;
    sc_in< sc_logic > nodelay_i_0_empty_n;
    sc_out< sc_logic > nodelay_i_0_read;
    sc_in< sc_lv<16> > delayed_i_1_dout;
    sc_in< sc_logic > delayed_i_1_empty_n;
    sc_out< sc_logic > delayed_i_1_read;
    sc_in< sc_lv<16> > nodelay_i_1_dout;
    sc_in< sc_logic > nodelay_i_1_empty_n;
    sc_out< sc_logic > nodelay_i_1_read;
    sc_out< sc_lv<16> > data2window_0_din;
    sc_in< sc_logic > data2window_0_full_n;
    sc_out< sc_logic > data2window_0_write;
    sc_out< sc_lv<16> > data2window_1_din;
    sc_in< sc_logic > data2window_1_full_n;
    sc_out< sc_logic > data2window_1_write;


    // Module declarations
    hls_real2xfft_Loop_sliding_win_output_proc(sc_module_name name);
    SC_HAS_PROCESS(hls_real2xfft_Loop_sliding_win_output_proc);

    ~hls_real2xfft_Loop_sliding_win_output_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_21;
    sc_signal< sc_lv<1> > exitcond_i_fu_200_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_37;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_lv<1> > tmp_reg_208;
    sc_signal< sc_lv<1> > tmp_3_reg_212;
    sc_signal< bool > ap_sig_bdd_75;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< bool > ap_sig_bdd_90;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<10> > i2_0_i1_reg_136;
    sc_signal< sc_lv<10> > tmp_4_fu_196_p1;
    sc_signal< sc_lv<10> > tmp_4_reg_216;
    sc_signal< sc_lv<1> > exitcond_i_reg_221;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_i_reg_221_pp0_it1;
    sc_signal< bool > ap_sig_bdd_132;
    sc_signal< sc_lv<10> > i2_0_i1_phi_fu_140_p6;
    sc_signal< sc_lv<16> > ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1;
    sc_signal< sc_lv<16> > ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2;
    sc_signal< sc_lv<16> > ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1;
    sc_signal< sc_lv<16> > ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2;
    sc_signal< sc_lv<11> > i2_0_i1_cast_fu_170_p1;
    sc_signal< sc_lv<11> > i_3_1_fu_190_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    sc_signal< bool > ap_sig_bdd_139;
    sc_signal< bool > ap_sig_bdd_138;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<11> ap_const_lv11_2;
    static const sc_lv<11> ap_const_lv11_400;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1();
    void thread_ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_sig_bdd_132();
    void thread_ap_sig_bdd_138();
    void thread_ap_sig_bdd_139();
    void thread_ap_sig_bdd_21();
    void thread_ap_sig_bdd_37();
    void thread_ap_sig_bdd_75();
    void thread_ap_sig_bdd_90();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_data2window_0_din();
    void thread_data2window_0_write();
    void thread_data2window_1_din();
    void thread_data2window_1_write();
    void thread_delayed_i_0_read();
    void thread_delayed_i_1_read();
    void thread_exitcond_i_fu_200_p2();
    void thread_i2_0_i1_cast_fu_170_p1();
    void thread_i2_0_i1_phi_fu_140_p6();
    void thread_i_3_1_fu_190_p2();
    void thread_nodelay_i_0_read();
    void thread_nodelay_i_1_read();
    void thread_tmp_4_fu_196_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
