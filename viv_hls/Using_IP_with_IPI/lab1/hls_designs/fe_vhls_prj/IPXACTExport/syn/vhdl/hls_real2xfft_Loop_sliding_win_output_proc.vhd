-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_real2xfft_Loop_sliding_win_output_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    delayed_i_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    delayed_i_0_empty_n : IN STD_LOGIC;
    delayed_i_0_read : OUT STD_LOGIC;
    nodelay_i_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    nodelay_i_0_empty_n : IN STD_LOGIC;
    nodelay_i_0_read : OUT STD_LOGIC;
    delayed_i_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    delayed_i_1_empty_n : IN STD_LOGIC;
    delayed_i_1_read : OUT STD_LOGIC;
    nodelay_i_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    nodelay_i_1_empty_n : IN STD_LOGIC;
    nodelay_i_1_read : OUT STD_LOGIC;
    data2window_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    data2window_0_full_n : IN STD_LOGIC;
    data2window_0_write : OUT STD_LOGIC;
    data2window_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    data2window_1_full_n : IN STD_LOGIC;
    data2window_1_write : OUT STD_LOGIC );
end;


architecture behav of hls_real2xfft_Loop_sliding_win_output_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal exitcond_i_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal tmp_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_75 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_bdd_90 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal i2_0_i1_reg_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_196_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_216 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_221_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_132 : BOOLEAN;
    signal i2_0_i1_phi_fu_140_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i2_0_i1_cast_fu_170_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_1_fu_190_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_bdd_139 : BOOLEAN;
    signal ap_sig_bdd_138 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_221_pp0_it1)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_132))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_132))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 assign process. --
    ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_139) then
                if (not((ap_const_lv1_0 = tmp_3_reg_212))) then 
                    ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 <= nodelay_i_1_dout;
                elsif ((ap_const_lv1_0 = tmp_3_reg_212)) then 
                    ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 <= delayed_i_1_dout;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2 <= ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1;
                end if;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 assign process. --
    ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_139) then
                if (not((ap_const_lv1_0 = tmp_reg_208))) then 
                    ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 <= nodelay_i_0_dout;
                elsif ((ap_const_lv1_0 = tmp_reg_208)) then 
                    ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 <= delayed_i_0_dout;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2 <= ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1;
                end if;
            end if; 
        end if;
    end process;

    -- i2_0_i1_reg_136 assign process. --
    i2_0_i1_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_0 = exitcond_i_reg_221))) then 
                i2_0_i1_reg_136 <= tmp_4_reg_216;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_132)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = exitcond_i_reg_221))))) then 
                i2_0_i1_reg_136 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then
                ap_reg_ppstg_exitcond_i_reg_221_pp0_it1 <= exitcond_i_reg_221;
                exitcond_i_reg_221 <= exitcond_i_fu_200_p2;
                tmp_3_reg_212 <= i2_0_i1_phi_fu_140_p6(9 downto 9);
                tmp_reg_208 <= i2_0_i1_phi_fu_140_p6(9 downto 9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then
                tmp_4_reg_216 <= tmp_4_fu_196_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_done_reg, ap_CS_fsm, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2, ap_sig_bdd_132, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_132)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_i_reg_221_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))) and not((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_221_pp0_it1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, exitcond_i_fu_200_p2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if ((not((exitcond_i_fu_200_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it1 <= "XXXXXXXXXXXXXXXX";
    ap_reg_phiprechg_p_014_0_i_reg_150pp0_it1 <= "XXXXXXXXXXXXXXXX";
    ap_reg_ppiten_pp0_it0 <= ap_start;

    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_132 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_138 assign process. --
    ap_sig_bdd_138_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_138 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
                ap_sig_bdd_139 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(delayed_i_0_empty_n, tmp_reg_208, nodelay_i_0_empty_n, delayed_i_1_empty_n, tmp_3_reg_212, nodelay_i_1_empty_n)
    begin
                ap_sig_bdd_75 <= (((delayed_i_0_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_reg_208)) or ((nodelay_i_0_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_reg_208))) or ((delayed_i_1_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_3_reg_212)) or ((nodelay_i_1_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_3_reg_212))));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(data2window_0_full_n, data2window_1_full_n)
    begin
                ap_sig_bdd_90 <= ((data2window_0_full_n = ap_const_logic_0) or (data2window_1_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    data2window_0_din <= ap_reg_phiprechg_p_014_0_i_reg_150pp0_it2;

    -- data2window_0_write assign process. --
    data2window_0_write_assign_proc : process(ap_done_reg, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            data2window_0_write <= ap_const_logic_1;
        else 
            data2window_0_write <= ap_const_logic_0;
        end if; 
    end process;

    data2window_1_din <= ap_reg_phiprechg_p_014_0_i_1_reg_160pp0_it2;

    -- data2window_1_write assign process. --
    data2window_1_write_assign_proc : process(ap_done_reg, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            data2window_1_write <= ap_const_logic_1;
        else 
            data2window_1_write <= ap_const_logic_0;
        end if; 
    end process;


    -- delayed_i_0_read assign process. --
    delayed_i_0_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_reg_208, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = tmp_reg_208) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            delayed_i_0_read <= ap_const_logic_1;
        else 
            delayed_i_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- delayed_i_1_read assign process. --
    delayed_i_1_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_3_reg_212, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = tmp_3_reg_212) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            delayed_i_1_read <= ap_const_logic_1;
        else 
            delayed_i_1_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_200_p2 <= "1" when (i_3_1_fu_190_p2 = ap_const_lv11_400) else "0";
    i2_0_i1_cast_fu_170_p1 <= std_logic_vector(resize(unsigned(i2_0_i1_phi_fu_140_p6),11));

    -- i2_0_i1_phi_fu_140_p6 assign process. --
    i2_0_i1_phi_fu_140_p6_assign_proc : process(i2_0_i1_reg_136, tmp_4_reg_216, exitcond_i_reg_221, ap_sig_bdd_138)
    begin
        if (ap_sig_bdd_138) then
            if (not((ap_const_lv1_0 = exitcond_i_reg_221))) then 
                i2_0_i1_phi_fu_140_p6 <= ap_const_lv10_0;
            elsif ((ap_const_lv1_0 = exitcond_i_reg_221)) then 
                i2_0_i1_phi_fu_140_p6 <= tmp_4_reg_216;
            else 
                i2_0_i1_phi_fu_140_p6 <= i2_0_i1_reg_136;
            end if;
        else 
            i2_0_i1_phi_fu_140_p6 <= i2_0_i1_reg_136;
        end if; 
    end process;

    i_3_1_fu_190_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(i2_0_i1_cast_fu_170_p1));

    -- nodelay_i_0_read assign process. --
    nodelay_i_0_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_reg_208, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = tmp_reg_208)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            nodelay_i_0_read <= ap_const_logic_1;
        else 
            nodelay_i_0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- nodelay_i_1_read assign process. --
    nodelay_i_1_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_3_reg_212, ap_sig_bdd_75, ap_reg_ppiten_pp0_it1, ap_sig_bdd_90, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = tmp_3_reg_212)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_75 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_90 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_done_reg = ap_const_logic_1))))) then 
            nodelay_i_1_read <= ap_const_logic_1;
        else 
            nodelay_i_1_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_196_p1 <= i_3_1_fu_190_p2(10 - 1 downto 0);
end behav;
