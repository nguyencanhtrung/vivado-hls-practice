-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_xfft2real_Loop_realfft_be_buffer_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_0_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_we0 : OUT STD_LOGIC;
    descramble_buf_0_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_1_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_1_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_1_M_imag_V_we0 : OUT STD_LOGIC;
    descramble_buf_1_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    din_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    din_TVALID : IN STD_LOGIC;
    din_TREADY : OUT STD_LOGIC;
    din_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    descramble_buf_0_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_0_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_0_M_real_V_we0 : OUT STD_LOGIC;
    descramble_buf_0_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_1_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_1_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_1_M_real_V_we0 : OUT STD_LOGIC;
    descramble_buf_1_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of hls_xfft2real_Loop_realfft_be_buffer_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal i_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal ap_sig_bdd_74 : BOOLEAN;
    signal val_assign_reg_114 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_bdd_81 : BOOLEAN;
    signal exitcond2240_i_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex1_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_150_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_M_imag_V_load_new_fu_170_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal newIndex_fu_132_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and not((exitcond2240_i_fu_182_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- val_assign_reg_114 assign process. --
    val_assign_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and (exitcond2240_i_fu_182_p2 = ap_const_lv1_0))) then 
                val_assign_reg_114 <= i_fu_164_p2;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_81)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and not((exitcond2240_i_fu_182_p2 = ap_const_lv1_0))))) then 
                val_assign_reg_114 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_74, ap_sig_bdd_81)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_81)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74, exitcond2240_i_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and not((exitcond2240_i_fu_182_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74, exitcond2240_i_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and not((exitcond2240_i_fu_182_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_74 assign process. --
    ap_sig_bdd_74_assign_proc : process(ap_start, ap_done_reg, din_TVALID)
    begin
                ap_sig_bdd_74 <= ((din_TVALID = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_81 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_0_M_imag_V_address0 <= newIndex1_fu_142_p1(8 - 1 downto 0);

    -- descramble_buf_0_M_imag_V_ce0 assign process. --
    descramble_buf_0_M_imag_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74))) then 
            descramble_buf_0_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_0_M_imag_V_d0 <= tmp_data_M_imag_V_load_new_fu_170_p4;

    -- descramble_buf_0_M_imag_V_we0 assign process. --
    descramble_buf_0_M_imag_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74, tmp_28_fu_156_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and (ap_const_lv1_0 = tmp_28_fu_156_p3)))) then 
            descramble_buf_0_M_imag_V_we0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_0_M_real_V_address0 <= newIndex1_fu_142_p1(8 - 1 downto 0);

    -- descramble_buf_0_M_real_V_ce0 assign process. --
    descramble_buf_0_M_real_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74))) then 
            descramble_buf_0_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_0_M_real_V_d0 <= tmp_fu_150_p1;

    -- descramble_buf_0_M_real_V_we0 assign process. --
    descramble_buf_0_M_real_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74, tmp_28_fu_156_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and (ap_const_lv1_0 = tmp_28_fu_156_p3)))) then 
            descramble_buf_0_M_real_V_we0 <= ap_const_logic_1;
        else 
            descramble_buf_0_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_imag_V_address0 <= newIndex1_fu_142_p1(8 - 1 downto 0);

    -- descramble_buf_1_M_imag_V_ce0 assign process. --
    descramble_buf_1_M_imag_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74))) then 
            descramble_buf_1_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_imag_V_d0 <= tmp_data_M_imag_V_load_new_fu_170_p4;

    -- descramble_buf_1_M_imag_V_we0 assign process. --
    descramble_buf_1_M_imag_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74, tmp_28_fu_156_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and not((ap_const_lv1_0 = tmp_28_fu_156_p3))))) then 
            descramble_buf_1_M_imag_V_we0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_real_V_address0 <= newIndex1_fu_142_p1(8 - 1 downto 0);

    -- descramble_buf_1_M_real_V_ce0 assign process. --
    descramble_buf_1_M_real_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74))) then 
            descramble_buf_1_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_1_M_real_V_d0 <= tmp_fu_150_p1;

    -- descramble_buf_1_M_real_V_we0 assign process. --
    descramble_buf_1_M_real_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74, tmp_28_fu_156_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74) and not((ap_const_lv1_0 = tmp_28_fu_156_p3))))) then 
            descramble_buf_1_M_real_V_we0 <= ap_const_logic_1;
        else 
            descramble_buf_1_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- din_TREADY assign process. --
    din_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_74)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_74)))) then 
            din_TREADY <= ap_const_logic_1;
        else 
            din_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2240_i_fu_182_p2 <= "1" when (val_assign_reg_114 = ap_const_lv9_1FF) else "0";
    i_fu_164_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(val_assign_reg_114));
    newIndex1_fu_142_p1 <= std_logic_vector(resize(unsigned(newIndex_fu_132_p4),64));
    
    newIndex_fu_132_p4_proc : process(val_assign_reg_114)
    variable vlo_cpy : STD_LOGIC_VECTOR(9+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(9+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(9 - 1 downto 0);
    variable newIndex_fu_132_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(9 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(9 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(9 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_8(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_1(4 - 1 downto 0);
        v0_cpy := val_assign_reg_114;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(9-1-unsigned(ap_const_lv32_1(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(9-1-unsigned(ap_const_lv32_8(4-1 downto 0)));
            for newIndex_fu_132_p4_i in 0 to 9-1 loop
                v0_cpy(newIndex_fu_132_p4_i) := val_assign_reg_114(9-1-newIndex_fu_132_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(9-1 downto 0)))));
        res_mask := res_mask(9-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        newIndex_fu_132_p4 <= resvalue(8-1 downto 0);
    end process;

    tmp_28_fu_156_p3 <= val_assign_reg_114(0 downto 0);
    tmp_data_M_imag_V_load_new_fu_170_p4 <= din_TDATA(31 downto 16);
    tmp_fu_150_p1 <= din_TDATA(16 - 1 downto 0);
end behav;
