// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _hls_xfft2real_Loop_realfft_be_buffer_proc_HH_
#define _hls_xfft2real_Loop_realfft_be_buffer_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hls_xfft2real_Loop_realfft_be_buffer_proc : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > descramble_buf_0_M_imag_V_address0;
    sc_out< sc_logic > descramble_buf_0_M_imag_V_ce0;
    sc_out< sc_logic > descramble_buf_0_M_imag_V_we0;
    sc_out< sc_lv<16> > descramble_buf_0_M_imag_V_d0;
    sc_out< sc_lv<8> > descramble_buf_1_M_imag_V_address0;
    sc_out< sc_logic > descramble_buf_1_M_imag_V_ce0;
    sc_out< sc_logic > descramble_buf_1_M_imag_V_we0;
    sc_out< sc_lv<16> > descramble_buf_1_M_imag_V_d0;
    sc_in< sc_lv<32> > din_TDATA;
    sc_in< sc_logic > din_TVALID;
    sc_out< sc_logic > din_TREADY;
    sc_in< sc_lv<1> > din_TLAST;
    sc_out< sc_lv<8> > descramble_buf_0_M_real_V_address0;
    sc_out< sc_logic > descramble_buf_0_M_real_V_ce0;
    sc_out< sc_logic > descramble_buf_0_M_real_V_we0;
    sc_out< sc_lv<16> > descramble_buf_0_M_real_V_d0;
    sc_out< sc_lv<8> > descramble_buf_1_M_real_V_address0;
    sc_out< sc_logic > descramble_buf_1_M_real_V_ce0;
    sc_out< sc_logic > descramble_buf_1_M_real_V_we0;
    sc_out< sc_lv<16> > descramble_buf_1_M_real_V_d0;


    // Module declarations
    hls_xfft2real_Loop_realfft_be_buffer_proc(sc_module_name name);
    SC_HAS_PROCESS(hls_xfft2real_Loop_realfft_be_buffer_proc);

    ~hls_xfft2real_Loop_realfft_be_buffer_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_21;
    sc_signal< sc_lv<9> > i_fu_164_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_67;
    sc_signal< bool > ap_sig_bdd_74;
    sc_signal< sc_lv<9> > val_assign_reg_114;
    sc_signal< bool > ap_sig_bdd_81;
    sc_signal< sc_lv<1> > exitcond2240_i_fu_182_p2;
    sc_signal< sc_lv<64> > newIndex1_fu_142_p1;
    sc_signal< sc_lv<16> > tmp_fu_150_p1;
    sc_signal< sc_lv<1> > tmp_28_fu_156_p3;
    sc_signal< sc_lv<16> > tmp_data_M_imag_V_load_new_fu_170_p4;
    sc_signal< sc_lv<8> > newIndex_fu_132_p4;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<9> ap_const_lv9_1FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_21();
    void thread_ap_sig_bdd_67();
    void thread_ap_sig_bdd_74();
    void thread_ap_sig_bdd_81();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_descramble_buf_0_M_imag_V_address0();
    void thread_descramble_buf_0_M_imag_V_ce0();
    void thread_descramble_buf_0_M_imag_V_d0();
    void thread_descramble_buf_0_M_imag_V_we0();
    void thread_descramble_buf_0_M_real_V_address0();
    void thread_descramble_buf_0_M_real_V_ce0();
    void thread_descramble_buf_0_M_real_V_d0();
    void thread_descramble_buf_0_M_real_V_we0();
    void thread_descramble_buf_1_M_imag_V_address0();
    void thread_descramble_buf_1_M_imag_V_ce0();
    void thread_descramble_buf_1_M_imag_V_d0();
    void thread_descramble_buf_1_M_imag_V_we0();
    void thread_descramble_buf_1_M_real_V_address0();
    void thread_descramble_buf_1_M_real_V_ce0();
    void thread_descramble_buf_1_M_real_V_d0();
    void thread_descramble_buf_1_M_real_V_we0();
    void thread_din_TREADY();
    void thread_exitcond2240_i_fu_182_p2();
    void thread_i_fu_164_p2();
    void thread_newIndex1_fu_142_p1();
    void thread_newIndex_fu_132_p4();
    void thread_tmp_28_fu_156_p3();
    void thread_tmp_data_M_imag_V_load_new_fu_170_p4();
    void thread_tmp_fu_150_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
