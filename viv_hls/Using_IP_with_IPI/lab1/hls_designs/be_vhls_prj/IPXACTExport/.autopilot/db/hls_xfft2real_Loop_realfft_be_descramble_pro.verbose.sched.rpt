

================================================================
== Vivado HLS Report for 'hls_xfft2real_Loop_realfft_be_descramble_pro'
================================================================
* Date:           Thu Jul  7 15:03:33 2016

* Version:        2015.3 (Build 1368829 on Mon Sep 28 20:31:51 PM 2015)
* Project:        be_vhls_prj
* Solution:       IPXACTExport
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.00|      4.81|        0.50|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  524|  524|  524|  524|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------------+-----+-----+----------+-----------+-----------+------+----------+
        |                         |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |        Loop Name        | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------------+-----+-----+----------+-----------+-----------+------+----------+
        |- realfft_be_descramble  |  522|  522|        12|          1|          1|   512|    yes   |
        +-------------------------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|DSP              |        -|      -|       -|      -|
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * DSP48: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 12


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 14
* Pipeline: 1
  Pipeline-0: II = 1, D = 12, States = { 2 3 4 5 6 7 8 9 10 11 12 13 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	14  / (exitcond_i)
	3  / (!exitcond_i)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	2  / true
14 --> 
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_15 [1/1] 0.00ns
newFuncRoot:0  call void (...)* @_ssdm_op_SpecInterface(i32* %dout_V, [5 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: stg_16 [1/1] 1.57ns
newFuncRoot:1  br label %.preheader.i


 <State 2>: 4.81ns
ST_2: i1_0_i [1/1] 0.00ns
.preheader.i:0  %i1_0_i = phi i10 [ %i, %0 ], [ 0, %newFuncRoot ]

ST_2: exitcond_i [1/1] 2.07ns
.preheader.i:1  %exitcond_i = icmp eq i10 %i1_0_i, -512

ST_2: i [1/1] 1.84ns
.preheader.i:2  %i = add i10 %i1_0_i, 1

ST_2: stg_20 [1/1] 0.00ns
.preheader.i:3  br i1 %exitcond_i, label %"xfft2real<complex<ap_fixed<16, 1, 5, 3, 0> >, complex<ap_fixed<16, 1, 5, 3, 0> >, 10, true>.exit.exitStub", label %_ifconv

ST_2: tmp [1/1] 0.00ns
_ifconv:0  %tmp = trunc i10 %i1_0_i to i9

ST_2: tmp_s [1/1] 2.07ns
_ifconv:20  %tmp_s = icmp eq i10 %i1_0_i, 0

ST_2: stg_23 [1/1] 0.00ns
_ifconv:21  br i1 %tmp_s, label %1, label %_ifconv1

ST_2: tmp_4 [1/1] 1.84ns
_ifconv1:0  %tmp_4 = sub i9 0, %tmp

ST_2: tmp_18 [1/1] 0.00ns
_ifconv1:1  %tmp_18 = trunc i9 %tmp_4 to i8

ST_2: tmp_23 [1/1] 0.00ns
_ifconv1:7  %tmp_23 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %tmp_4, i32 8)


 <State 3>: 2.71ns
ST_3: newIndex5 [1/1] 0.00ns
_ifconv1:2  %newIndex5 = zext i8 %tmp_18 to i64

ST_3: descramble_buf_0_M_real_V_ad_1 [1/1] 0.00ns
_ifconv1:3  %descramble_buf_0_M_real_V_ad_1 = getelementptr [256 x i16]* %descramble_buf_0_M_real_V, i64 0, i64 %newIndex5

ST_3: descramble_buf_1_M_real_V_ad_1 [1/1] 0.00ns
_ifconv1:4  %descramble_buf_1_M_real_V_ad_1 = getelementptr [256 x i16]* %descramble_buf_1_M_real_V, i64 0, i64 %newIndex5

ST_3: descramble_buf_0_M_imag_V_ad_1 [1/1] 0.00ns
_ifconv1:5  %descramble_buf_0_M_imag_V_ad_1 = getelementptr [256 x i16]* %descramble_buf_0_M_imag_V, i64 0, i64 %newIndex5

ST_3: descramble_buf_1_M_imag_V_ad_1 [1/1] 0.00ns
_ifconv1:6  %descramble_buf_1_M_imag_V_ad_1 = getelementptr [256 x i16]* %descramble_buf_1_M_imag_V, i64 0, i64 %newIndex5

ST_3: descramble_buf_0_M_real_V_lo_1 [2/2] 2.71ns
_ifconv1:8  %descramble_buf_0_M_real_V_lo_1 = load i16* %descramble_buf_0_M_real_V_ad_1, align 2

ST_3: descramble_buf_1_M_real_V_lo_1 [2/2] 2.71ns
_ifconv1:9  %descramble_buf_1_M_real_V_lo_1 = load i16* %descramble_buf_1_M_real_V_ad_1, align 2

ST_3: descramble_buf_0_M_imag_V_lo_1 [2/2] 2.71ns
_ifconv1:11  %descramble_buf_0_M_imag_V_lo_1 = load i16* %descramble_buf_0_M_imag_V_ad_1, align 2

ST_3: descramble_buf_1_M_imag_V_lo_1 [2/2] 2.71ns
_ifconv1:12  %descramble_buf_1_M_imag_V_lo_1 = load i16* %descramble_buf_1_M_imag_V_ad_1, align 2


 <State 4>: 2.71ns
ST_4: tmp_7 [1/1] 0.00ns
_ifconv:6  %tmp_7 = trunc i10 %i1_0_i to i8

ST_4: newIndex3 [1/1] 0.00ns
_ifconv:7  %newIndex3 = zext i8 %tmp_7 to i64

ST_4: descramble_buf_0_M_real_V_ad [1/1] 0.00ns
_ifconv:8  %descramble_buf_0_M_real_V_ad = getelementptr [256 x i16]* %descramble_buf_0_M_real_V, i64 0, i64 %newIndex3

ST_4: descramble_buf_1_M_real_V_ad [1/1] 0.00ns
_ifconv:9  %descramble_buf_1_M_real_V_ad = getelementptr [256 x i16]* %descramble_buf_1_M_real_V, i64 0, i64 %newIndex3

ST_4: descramble_buf_0_M_real_V_lo [2/2] 2.71ns
_ifconv:12  %descramble_buf_0_M_real_V_lo = load i16* %descramble_buf_0_M_real_V_ad, align 4

ST_4: descramble_buf_1_M_real_V_lo [2/2] 2.71ns
_ifconv:13  %descramble_buf_1_M_real_V_lo = load i16* %descramble_buf_1_M_real_V_ad, align 4

ST_4: descramble_buf_0_M_imag_V_ad [1/1] 0.00ns
_ifconv:15  %descramble_buf_0_M_imag_V_ad = getelementptr [256 x i16]* %descramble_buf_0_M_imag_V, i64 0, i64 %newIndex3

ST_4: descramble_buf_1_M_imag_V_ad [1/1] 0.00ns
_ifconv:16  %descramble_buf_1_M_imag_V_ad = getelementptr [256 x i16]* %descramble_buf_1_M_imag_V, i64 0, i64 %newIndex3

ST_4: descramble_buf_0_M_imag_V_lo [2/2] 2.71ns
_ifconv:17  %descramble_buf_0_M_imag_V_lo = load i16* %descramble_buf_0_M_imag_V_ad, align 2

ST_4: descramble_buf_1_M_imag_V_lo [2/2] 2.71ns
_ifconv:18  %descramble_buf_1_M_imag_V_lo = load i16* %descramble_buf_1_M_imag_V_ad, align 2

ST_4: descramble_buf_0_M_real_V_lo_1 [1/2] 2.71ns
_ifconv1:8  %descramble_buf_0_M_real_V_lo_1 = load i16* %descramble_buf_0_M_real_V_ad_1, align 2

ST_4: descramble_buf_1_M_real_V_lo_1 [1/2] 2.71ns
_ifconv1:9  %descramble_buf_1_M_real_V_lo_1 = load i16* %descramble_buf_1_M_real_V_ad_1, align 2

ST_4: descramble_buf_0_M_imag_V_lo_1 [1/2] 2.71ns
_ifconv1:11  %descramble_buf_0_M_imag_V_lo_1 = load i16* %descramble_buf_0_M_imag_V_ad_1, align 2

ST_4: descramble_buf_1_M_imag_V_lo_1 [1/2] 2.71ns
_ifconv1:12  %descramble_buf_1_M_imag_V_lo_1 = load i16* %descramble_buf_1_M_imag_V_ad_1, align 2


 <State 5>: 3.33ns
ST_5: tmp_12 [1/1] 0.00ns
_ifconv:10  %tmp_12 = call i2 @_ssdm_op_PartSelect.i2.i10.i32.i32(i10 %i1_0_i, i32 8, i32 9)

ST_5: icmp [1/1] 1.36ns
_ifconv:11  %icmp = icmp eq i2 %tmp_12, 0

ST_5: descramble_buf_0_M_real_V_lo [1/2] 2.71ns
_ifconv:12  %descramble_buf_0_M_real_V_lo = load i16* %descramble_buf_0_M_real_V_ad, align 4

ST_5: descramble_buf_1_M_real_V_lo [1/2] 2.71ns
_ifconv:13  %descramble_buf_1_M_real_V_lo = load i16* %descramble_buf_1_M_real_V_ad, align 4

ST_5: descramble_buf_0_M_imag_V_lo [1/2] 2.71ns
_ifconv:17  %descramble_buf_0_M_imag_V_lo = load i16* %descramble_buf_0_M_imag_V_ad, align 2

ST_5: descramble_buf_1_M_imag_V_lo [1/2] 2.71ns
_ifconv:18  %descramble_buf_1_M_imag_V_lo = load i16* %descramble_buf_1_M_imag_V_ad, align 2

ST_5: p_Val2_4 [1/1] 1.37ns
_ifconv1:10  %p_Val2_4 = select i1 %tmp_23, i16 %descramble_buf_1_M_real_V_lo_1, i16 %descramble_buf_0_M_real_V_lo_1

ST_5: p_Val2_3 [1/1] 1.37ns
_ifconv1:13  %p_Val2_3 = select i1 %tmp_23, i16 %descramble_buf_1_M_imag_V_lo_1, i16 %descramble_buf_0_M_imag_V_lo_1

ST_5: p_Val2_6 [1/1] 1.96ns
_ifconv1:14  %p_Val2_6 = sub i16 0, %p_Val2_3


 <State 6>: 3.33ns
ST_6: p_Val2_s [1/1] 1.37ns
_ifconv:14  %p_Val2_s = select i1 %icmp, i16 %descramble_buf_0_M_real_V_lo, i16 %descramble_buf_1_M_real_V_lo

ST_6: p_Val2_2 [1/1] 1.37ns
_ifconv:19  %p_Val2_2 = select i1 %icmp, i16 %descramble_buf_0_M_imag_V_lo, i16 %descramble_buf_1_M_imag_V_lo

ST_6: tmp_6 [1/1] 0.00ns
_ifconv1:15  %tmp_6 = sext i16 %p_Val2_4 to i17

ST_6: tmp_1 [1/1] 0.00ns
_ifconv1:16  %tmp_1 = sext i16 %p_Val2_6 to i17

ST_6: tmp_5 [1/1] 0.00ns
_ifconv1:17  %tmp_5 = sext i16 %p_Val2_s to i17

ST_6: r_V [1/1] 1.96ns
_ifconv1:18  %r_V = add i17 %tmp_5, %tmp_6

ST_6: r_V_2 [1/1] 1.96ns
_ifconv1:20  %r_V_2 = sub i17 %tmp_6, %tmp_5

ST_6: tmp_24 [1/1] 0.00ns
_ifconv1:22  %tmp_24 = call i1 @_ssdm_op_BitSelect.i1.i17.i32(i17 %r_V, i32 16)

ST_6: tmp_3 [1/1] 0.00ns
_ifconv1:25  %tmp_3 = call i16 @_ssdm_op_PartSelect.i16.i17.i32.i32(i17 %r_V, i32 1, i32 16)

ST_6: tmp_11 [1/1] 0.00ns
_ifconv1:28  %tmp_11 = sext i16 %p_Val2_2 to i17

ST_6: r_V_1 [1/1] 1.96ns
_ifconv1:29  %r_V_1 = add i17 %tmp_11, %tmp_1

ST_6: p_Val2_5 [1/1] 1.96ns
_ifconv1:31  %p_Val2_5 = sub i17 %tmp_1, %tmp_11

ST_6: tmp_25 [1/1] 0.00ns
_ifconv1:32  %tmp_25 = call i1 @_ssdm_op_BitSelect.i1.i17.i32(i17 %r_V_1, i32 16)

ST_6: tmp_14 [1/1] 0.00ns
_ifconv1:35  %tmp_14 = call i16 @_ssdm_op_PartSelect.i16.i17.i32.i32(i17 %r_V_1, i32 1, i32 16)

ST_6: tmp_16 [1/1] 0.00ns
_ifconv1:40  %tmp_16 = call i16 @_ssdm_op_PartSelect.i16.i17.i32.i32(i17 %p_Val2_5, i32 1, i32 16)

ST_6: tmp_27 [1/1] 0.00ns
_ifconv1:44  %tmp_27 = call i1 @_ssdm_op_BitSelect.i1.i17.i32(i17 %r_V_2, i32 16)

ST_6: tmp_20 [1/1] 0.00ns
_ifconv1:47  %tmp_20 = call i16 @_ssdm_op_PartSelect.i16.i17.i32.i32(i17 %r_V_2, i32 1, i32 16)


 <State 7>: 3.45ns
ST_7: tmp_9 [1/1] 0.00ns
_ifconv:5  %tmp_9 = zext i10 %i1_0_i to i64

ST_7: tmp_19_tr [1/1] 0.00ns
_ifconv1:19  %tmp_19_tr = zext i17 %r_V to i18

ST_7: tmp_31_tr [1/1] 0.00ns
_ifconv1:21  %tmp_31_tr = zext i17 %r_V_2 to i18

ST_7: p_neg1 [1/1] 2.08ns
_ifconv1:23  %p_neg1 = sub i18 0, %tmp_19_tr

ST_7: tmp_8 [1/1] 0.00ns
_ifconv1:24  %tmp_8 = call i16 @_ssdm_op_PartSelect.i16.i18.i32.i32(i18 %p_neg1, i32 1, i32 16)

ST_7: tmp_24_tr [1/1] 0.00ns
_ifconv1:30  %tmp_24_tr = zext i17 %r_V_1 to i18

ST_7: p_neg2 [1/1] 2.08ns
_ifconv1:33  %p_neg2 = sub i18 0, %tmp_24_tr

ST_7: tmp_13 [1/1] 0.00ns
_ifconv1:34  %tmp_13 = call i16 @_ssdm_op_PartSelect.i16.i18.i32.i32(i18 %p_neg2, i32 1, i32 16)

ST_7: t_V_2 [1/1] 2.08ns
_ifconv1:38  %t_V_2 = sub i17 0, %p_Val2_5

ST_7: tmp_26 [1/1] 0.00ns
_ifconv1:39  %tmp_26 = call i1 @_ssdm_op_BitSelect.i1.i17.i32(i17 %t_V_2, i32 16)

ST_7: p_neg_t [1/1] 1.96ns
_ifconv1:41  %p_neg_t = sub i16 0, %tmp_16

ST_7: tmp_17 [1/1] 0.00ns
_ifconv1:42  %tmp_17 = call i16 @_ssdm_op_PartSelect.i16.i17.i32.i32(i17 %t_V_2, i32 1, i32 16)

ST_7: p_y_M_real_V_read_assign [1/1] 1.37ns
_ifconv1:43  %p_y_M_real_V_read_assign = select i1 %tmp_26, i16 %p_neg_t, i16 %tmp_17

ST_7: p_neg [1/1] 2.08ns
_ifconv1:45  %p_neg = sub i18 0, %tmp_31_tr

ST_7: tmp_19 [1/1] 0.00ns
_ifconv1:46  %tmp_19 = call i16 @_ssdm_op_PartSelect.i16.i18.i32.i32(i18 %p_neg, i32 1, i32 16)

ST_7: twid_rom_0_addr [1/1] 0.00ns
_ifconv1:50  %twid_rom_0_addr = getelementptr [512 x i16]* @twid_rom_0, i64 0, i64 %tmp_9

ST_7: p_Val2_7 [2/2] 2.39ns
_ifconv1:51  %p_Val2_7 = load i16* %twid_rom_0_addr, align 4

ST_7: twid_rom_1_addr [1/1] 0.00ns
_ifconv1:52  %twid_rom_1_addr = getelementptr [512 x i16]* @twid_rom_1, i64 0, i64 %tmp_9

ST_7: p_Val2_8 [2/2] 2.39ns
_ifconv1:53  %p_Val2_8 = load i16* %twid_rom_1_addr, align 2


 <State 8>: 3.44ns
ST_8: tmp_10 [1/1] 1.96ns
_ifconv1:26  %tmp_10 = sub i16 0, %tmp_8

ST_8: f_M_real_V [1/1] 1.37ns
_ifconv1:27  %f_M_real_V = select i1 %tmp_24, i16 %tmp_10, i16 %tmp_3

ST_8: tmp_15 [1/1] 1.96ns
_ifconv1:36  %tmp_15 = sub i16 0, %tmp_13

ST_8: f_M_imag_V [1/1] 1.37ns
_ifconv1:37  %f_M_imag_V = select i1 %tmp_25, i16 %tmp_15, i16 %tmp_14

ST_8: tmp_21 [1/1] 1.96ns
_ifconv1:48  %tmp_21 = sub i16 0, %tmp_19

ST_8: p_y_M_imag_V_read_assign [1/1] 1.37ns
_ifconv1:49  %p_y_M_imag_V_read_assign = select i1 %tmp_27, i16 %tmp_21, i16 %tmp_20

ST_8: p_Val2_7 [1/2] 2.39ns
_ifconv1:51  %p_Val2_7 = load i16* %twid_rom_0_addr, align 4

ST_8: p_Val2_8 [1/2] 2.39ns
_ifconv1:53  %p_Val2_8 = load i16* %twid_rom_1_addr, align 2

ST_8: tmp_i [1/1] 0.00ns
_ifconv1:54  %tmp_i = sext i16 %p_Val2_7 to i31

ST_8: tmp_1_i [1/1] 0.00ns
_ifconv1:55  %tmp_1_i = sext i16 %p_y_M_real_V_read_assign to i31

ST_8: tmp_2_i [1/1] 0.00ns
_ifconv1:56  %tmp_2_i = sext i16 %p_Val2_8 to i31

ST_8: tmp1_cast_i [3/3] 1.05ns
_ifconv1:58  %tmp1_cast_i = mul i31 %tmp_i, %tmp_1_i

ST_8: tmp_3_cast_i [3/3] 1.05ns
_ifconv1:63  %tmp_3_cast_i = mul i31 %tmp_2_i, %tmp_1_i


 <State 9>: 1.05ns
ST_9: tmp_3_i [1/1] 0.00ns
_ifconv1:57  %tmp_3_i = sext i16 %p_y_M_imag_V_read_assign to i31

ST_9: tmp1_cast_i [2/3] 1.05ns
_ifconv1:58  %tmp1_cast_i = mul i31 %tmp_i, %tmp_1_i

ST_9: tmp_1_cast_i [3/3] 1.05ns
_ifconv1:59  %tmp_1_cast_i = mul i31 %tmp_2_i, %tmp_3_i

ST_9: tmp_2_cast_i [3/3] 1.05ns
_ifconv1:62  %tmp_2_cast_i = mul i31 %tmp_i, %tmp_3_i

ST_9: tmp_3_cast_i [2/3] 1.05ns
_ifconv1:63  %tmp_3_cast_i = mul i31 %tmp_2_i, %tmp_1_i


 <State 10>: 1.05ns
ST_10: tmp1_cast_i [1/3] 0.00ns
_ifconv1:58  %tmp1_cast_i = mul i31 %tmp_i, %tmp_1_i

ST_10: tmp_1_cast_i [2/3] 1.05ns
_ifconv1:59  %tmp_1_cast_i = mul i31 %tmp_2_i, %tmp_3_i

ST_10: tmp_2_cast_i [2/3] 1.05ns
_ifconv1:62  %tmp_2_cast_i = mul i31 %tmp_i, %tmp_3_i

ST_10: tmp_3_cast_i [1/3] 0.00ns
_ifconv1:63  %tmp_3_cast_i = mul i31 %tmp_2_i, %tmp_1_i


 <State 11>: 3.02ns
ST_11: tmp_1_cast_i [1/3] 0.00ns
_ifconv1:59  %tmp_1_cast_i = mul i31 %tmp_2_i, %tmp_3_i

ST_11: p_Val2_9 [1/1] 3.02ns
_ifconv1:60  %p_Val2_9 = sub i31 %tmp1_cast_i, %tmp_1_cast_i

ST_11: tmp_2_cast_i [1/3] 0.00ns
_ifconv1:62  %tmp_2_cast_i = mul i31 %tmp_i, %tmp_3_i

ST_11: p_Val2_10 [1/1] 3.02ns
_ifconv1:64  %p_Val2_10 = add i31 %tmp_3_cast_i, %tmp_2_cast_i

ST_11: cdata_M_real_V [1/1] 1.96ns
:0  %cdata_M_real_V = add i16 %p_Val2_2, %p_Val2_s

ST_11: p_Val2_1 [1/1] 1.96ns
:1  %p_Val2_1 = sub i16 %p_Val2_s, %p_Val2_2


 <State 12>: 1.96ns
ST_12: p_r_M_real_V [1/1] 0.00ns
_ifconv1:61  %p_r_M_real_V = call i16 @_ssdm_op_PartSelect.i16.i31.i32.i32(i31 %p_Val2_9, i32 15, i32 30)

ST_12: p_r_M_imag_V_3 [1/1] 0.00ns
_ifconv1:65  %p_r_M_imag_V_3 = call i16 @_ssdm_op_PartSelect.i16.i31.i32.i32(i31 %p_Val2_10, i32 15, i32 30)

ST_12: p_r_M_real_V_1 [1/1] 1.96ns
_ifconv1:66  %p_r_M_real_V_1 = add i16 %f_M_real_V, %p_r_M_real_V

ST_12: p_r_M_imag_V [1/1] 1.96ns
_ifconv1:67  %p_r_M_imag_V = add i16 %f_M_imag_V, %p_r_M_imag_V_3

ST_12: stg_127 [1/1] 1.57ns
:2  br label %0


 <State 13>: 1.57ns
ST_13: empty_31 [1/1] 0.00ns
_ifconv:1  %empty_31 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 512, i64 512, i64 512)

ST_13: stg_129 [1/1] 0.00ns
_ifconv:2  call void (...)* @_ssdm_op_SpecLoopName([22 x i8]* @p_str4) nounwind

ST_13: tmp_2 [1/1] 0.00ns
_ifconv:3  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([22 x i8]* @p_str4)

ST_13: stg_131 [1/1] 0.00ns
_ifconv:4  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_13: stg_132 [1/1] 1.57ns
_ifconv1:68  br label %0

ST_13: tmp_M_real_V [1/1] 0.00ns
:0  %tmp_M_real_V = phi i16 [ %cdata_M_real_V, %1 ], [ %p_r_M_real_V_1, %_ifconv1 ]

ST_13: cdata_M_imag_V [1/1] 0.00ns
:1  %cdata_M_imag_V = phi i16 [ %p_Val2_1, %1 ], [ %p_r_M_imag_V, %_ifconv1 ]

ST_13: tmp_22 [1/1] 0.00ns
:2  %tmp_22 = call i32 @_ssdm_op_BitConcatenate.i32.i16.i16(i16 %cdata_M_imag_V, i16 %tmp_M_real_V)

ST_13: stg_136 [1/1] 0.00ns
:3  call void @_ssdm_op_Write.axis.volatile.i32P(i32* %dout_V, i32 %tmp_22)

ST_13: empty [1/1] 0.00ns
:4  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([22 x i8]* @p_str4, i32 %tmp_2)

ST_13: stg_138 [1/1] 0.00ns
:5  br label %.preheader.i


 <State 14>: 0.00ns
ST_14: stg_139 [1/1] 0.00ns
xfft2real<complex<ap_fixed<16, 1, 5, 3, 0> >, complex<ap_fixed<16, 1, 5, 3, 0> >, 10, true>.exit.exitStub:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
