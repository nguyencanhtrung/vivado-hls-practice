

================================================================
== Vivado HLS Report for 'dct_dct_2d'
================================================================
* Date:           Tue Jul  5 18:01:28 2016

* Version:        2015.3 (Build 1368829 on Mon Sep 28 20:31:51 PM 2015)
* Project:        dct_prj
* Solution:       solution5
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      8.93|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  373|  373|  373|  373|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------------------------+-----+-----+----------+-----------+-----------+------+----------+
        |                                             |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |                  Loop Name                  | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------------------------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Row_DCT_Loop                               |  120|  120|        15|          -|          -|     8|    no    |
        |- Xpose_Row_Outer_Loop_Xpose_Row_Inner_Loop  |   64|   64|         2|          1|          1|    64|    yes   |
        |- Col_DCT_Loop                               |  120|  120|        15|          -|          -|     8|    no    |
        |- Xpose_Col_Outer_Loop_Xpose_Col_Inner_Loop  |   64|   64|         2|          1|          1|    64|    yes   |
        +---------------------------------------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2
  * Pipeline-1: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 10
* Pipeline: 2
  Pipeline-0: II = 1, D = 2, States = { 4 5 }
  Pipeline-1: II = 1, D = 2, States = { 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond5)
	4  / (exitcond5)
3 --> 
	2  / true
4 --> 
	6  / (exitcond_flatten)
	5  / (!exitcond_flatten)
5 --> 
	4  / true
6 --> 
	7  / (!exitcond2)
	8  / (exitcond2)
7 --> 
	6  / true
8 --> 
	10  / (exitcond_flatten1)
	9  / (!exitcond_flatten1)
9 --> 
	8  / true
10 --> 
* FSM state operations: 

 <State 1>: 1.08ns
ST_1: row_outbuf [1/1] 0.00ns
:0  %row_outbuf = alloca [64 x i16], align 2

ST_1: col_outbuf [1/1] 0.00ns
:1  %col_outbuf = alloca [64 x i16], align 2

ST_1: col_inbuf_0 [1/1] 0.00ns
:2  %col_inbuf_0 = alloca [8 x i16], align 2

ST_1: col_inbuf_1 [1/1] 0.00ns
:3  %col_inbuf_1 = alloca [8 x i16], align 2

ST_1: col_inbuf_2 [1/1] 0.00ns
:4  %col_inbuf_2 = alloca [8 x i16], align 2

ST_1: col_inbuf_3 [1/1] 0.00ns
:5  %col_inbuf_3 = alloca [8 x i16], align 2

ST_1: col_inbuf_4 [1/1] 0.00ns
:6  %col_inbuf_4 = alloca [8 x i16], align 2

ST_1: col_inbuf_5 [1/1] 0.00ns
:7  %col_inbuf_5 = alloca [8 x i16], align 2

ST_1: col_inbuf_6 [1/1] 0.00ns
:8  %col_inbuf_6 = alloca [8 x i16], align 2

ST_1: col_inbuf_7 [1/1] 0.00ns
:9  %col_inbuf_7 = alloca [8 x i16], align 2

ST_1: stg_21 [1/1] 1.08ns
:10  br label %1


 <State 2>: 2.32ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i4 [ 0, %0 ], [ %i_4, %2 ]

ST_2: exitcond5 [1/1] 1.24ns
:1  %exitcond5 = icmp eq i4 %i, -8

ST_2: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_2: i_4 [1/1] 0.48ns
:3  %i_4 = add i4 %i, 1

ST_2: stg_26 [1/1] 1.08ns
:4  br i1 %exitcond5, label %.preheader7.preheader, label %2

ST_2: stg_27 [2/2] 0.72ns
:1  call fastcc void @dct_dct_1d([8 x i16]* %in_block_0, [8 x i16]* %in_block_1, [8 x i16]* %in_block_2, [8 x i16]* %in_block_3, [8 x i16]* %in_block_4, [8 x i16]* %in_block_5, [8 x i16]* %in_block_6, [8 x i16]* %in_block_7, i4 %i, [64 x i16]* %row_outbuf, i4 %i)


 <State 3>: 0.00ns
ST_3: stg_28 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str4) nounwind

ST_3: stg_29 [1/2] 0.00ns
:1  call fastcc void @dct_dct_1d([8 x i16]* %in_block_0, [8 x i16]* %in_block_1, [8 x i16]* %in_block_2, [8 x i16]* %in_block_3, [8 x i16]* %in_block_4, [8 x i16]* %in_block_5, [8 x i16]* %in_block_6, [8 x i16]* %in_block_7, i4 %i, [64 x i16]* %row_outbuf, i4 %i)

ST_3: stg_30 [1/1] 0.00ns
:2  br label %1


 <State 4>: 5.75ns
ST_4: indvar_flatten [1/1] 0.00ns
.preheader7.preheader:0  %indvar_flatten = phi i7 [ %indvar_flatten_next, %ifBlock ], [ 0, %1 ]

ST_4: j [1/1] 0.00ns
.preheader7.preheader:1  %j = phi i4 [ %j_mid2, %ifBlock ], [ 0, %1 ]

ST_4: i_1 [1/1] 0.00ns
.preheader7.preheader:2  %i_1 = phi i4 [ %i_6, %ifBlock ], [ 0, %1 ]

ST_4: exitcond_flatten [1/1] 1.35ns
.preheader7.preheader:3  %exitcond_flatten = icmp eq i7 %indvar_flatten, -64

ST_4: indvar_flatten_next [1/1] 1.34ns
.preheader7.preheader:4  %indvar_flatten_next = add i7 %indvar_flatten, 1

ST_4: stg_36 [1/1] 1.08ns
.preheader7.preheader:5  br i1 %exitcond_flatten, label %.preheader6, label %.preheader7

ST_4: j_2 [1/1] 0.48ns
.preheader7:0  %j_2 = add i4 1, %j

ST_4: exitcond [1/1] 1.24ns
.preheader7:3  %exitcond = icmp eq i4 %i_1, -8

ST_4: i_1_mid2 [1/1] 0.84ns
.preheader7:4  %i_1_mid2 = select i1 %exitcond, i4 0, i4 %i_1

ST_4: j_mid2 [1/1] 0.84ns
.preheader7:5  %j_mid2 = select i1 %exitcond, i4 %j_2, i4 %j

ST_4: tmp_cast [1/1] 0.00ns
.preheader7:7  %tmp_cast = zext i4 %j_mid2 to i8

ST_4: tmp [1/1] 0.00ns
.preheader7:11  %tmp = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %i_1_mid2, i3 0)

ST_4: tmp_11_cast [1/1] 0.00ns
.preheader7:12  %tmp_11_cast = zext i7 %tmp to i8

ST_4: tmp_1 [1/1] 1.34ns
.preheader7:13  %tmp_1 = add i8 %tmp_11_cast, %tmp_cast

ST_4: tmp_12_cast [1/1] 0.00ns
.preheader7:14  %tmp_12_cast = zext i8 %tmp_1 to i64

ST_4: row_outbuf_addr [1/1] 0.00ns
.preheader7:15  %row_outbuf_addr = getelementptr [64 x i16]* %row_outbuf, i64 0, i64 %tmp_12_cast

ST_4: row_outbuf_load [2/2] 2.33ns
.preheader7:16  %row_outbuf_load = load i16* %row_outbuf_addr, align 2

ST_4: tmp_5 [1/1] 0.00ns
.preheader7:17  %tmp_5 = trunc i4 %i_1_mid2 to i3

ST_4: stg_49 [1/1] 1.27ns
.preheader7:18  switch i3 %tmp_5, label %branch7 [
    i3 0, label %branch0
    i3 1, label %branch1
    i3 2, label %branch2
    i3 3, label %branch3
    i3 -4, label %branch4
    i3 -3, label %branch5
    i3 -2, label %branch6
  ]

ST_4: i_6 [1/1] 0.48ns
ifBlock:1  %i_6 = add i4 %i_1_mid2, 1


 <State 5>: 4.72ns
ST_5: stg_51 [1/1] 0.00ns
.preheader7:1  call void (...)* @_ssdm_op_SpecLoopName([42 x i8]* @Xpose_Row_Outer_Loop_Xpose_Row)

ST_5: empty_8 [1/1] 0.00ns
.preheader7:2  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_5: tmp_s [1/1] 0.00ns
.preheader7:6  %tmp_s = zext i4 %j_mid2 to i64

ST_5: stg_54 [1/1] 0.00ns
.preheader7:8  call void (...)* @_ssdm_op_SpecLoopName([21 x i8]* @p_str6) nounwind

ST_5: tmp_6 [1/1] 0.00ns
.preheader7:9  %tmp_6 = call i32 (...)* @_ssdm_op_SpecRegionBegin([21 x i8]* @p_str6)

ST_5: stg_56 [1/1] 0.00ns
.preheader7:10  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_5: row_outbuf_load [1/2] 2.33ns
.preheader7:16  %row_outbuf_load = load i16* %row_outbuf_addr, align 2

ST_5: col_inbuf_6_addr [1/1] 0.00ns
branch6:0  %col_inbuf_6_addr = getelementptr [8 x i16]* %col_inbuf_6, i64 0, i64 %tmp_s

ST_5: stg_59 [1/1] 2.39ns
branch6:1  store i16 %row_outbuf_load, i16* %col_inbuf_6_addr, align 2

ST_5: stg_60 [1/1] 0.00ns
branch6:2  br label %ifBlock

ST_5: col_inbuf_5_addr [1/1] 0.00ns
branch5:0  %col_inbuf_5_addr = getelementptr [8 x i16]* %col_inbuf_5, i64 0, i64 %tmp_s

ST_5: stg_62 [1/1] 2.39ns
branch5:1  store i16 %row_outbuf_load, i16* %col_inbuf_5_addr, align 2

ST_5: stg_63 [1/1] 0.00ns
branch5:2  br label %ifBlock

ST_5: col_inbuf_4_addr [1/1] 0.00ns
branch4:0  %col_inbuf_4_addr = getelementptr [8 x i16]* %col_inbuf_4, i64 0, i64 %tmp_s

ST_5: stg_65 [1/1] 2.39ns
branch4:1  store i16 %row_outbuf_load, i16* %col_inbuf_4_addr, align 2

ST_5: stg_66 [1/1] 0.00ns
branch4:2  br label %ifBlock

ST_5: col_inbuf_3_addr [1/1] 0.00ns
branch3:0  %col_inbuf_3_addr = getelementptr [8 x i16]* %col_inbuf_3, i64 0, i64 %tmp_s

ST_5: stg_68 [1/1] 2.39ns
branch3:1  store i16 %row_outbuf_load, i16* %col_inbuf_3_addr, align 2

ST_5: stg_69 [1/1] 0.00ns
branch3:2  br label %ifBlock

ST_5: col_inbuf_2_addr [1/1] 0.00ns
branch2:0  %col_inbuf_2_addr = getelementptr [8 x i16]* %col_inbuf_2, i64 0, i64 %tmp_s

ST_5: stg_71 [1/1] 2.39ns
branch2:1  store i16 %row_outbuf_load, i16* %col_inbuf_2_addr, align 2

ST_5: stg_72 [1/1] 0.00ns
branch2:2  br label %ifBlock

ST_5: col_inbuf_1_addr [1/1] 0.00ns
branch1:0  %col_inbuf_1_addr = getelementptr [8 x i16]* %col_inbuf_1, i64 0, i64 %tmp_s

ST_5: stg_74 [1/1] 2.39ns
branch1:1  store i16 %row_outbuf_load, i16* %col_inbuf_1_addr, align 2

ST_5: stg_75 [1/1] 0.00ns
branch1:2  br label %ifBlock

ST_5: col_inbuf_0_addr [1/1] 0.00ns
branch0:0  %col_inbuf_0_addr = getelementptr [8 x i16]* %col_inbuf_0, i64 0, i64 %tmp_s

ST_5: stg_77 [1/1] 2.39ns
branch0:1  store i16 %row_outbuf_load, i16* %col_inbuf_0_addr, align 2

ST_5: stg_78 [1/1] 0.00ns
branch0:2  br label %ifBlock

ST_5: col_inbuf_7_addr [1/1] 0.00ns
branch7:0  %col_inbuf_7_addr = getelementptr [8 x i16]* %col_inbuf_7, i64 0, i64 %tmp_s

ST_5: stg_80 [1/1] 2.39ns
branch7:1  store i16 %row_outbuf_load, i16* %col_inbuf_7_addr, align 2

ST_5: stg_81 [1/1] 0.00ns
branch7:2  br label %ifBlock

ST_5: empty_7 [1/1] 0.00ns
ifBlock:0  %empty_7 = call i32 (...)* @_ssdm_op_SpecRegionEnd([21 x i8]* @p_str6, i32 %tmp_6)

ST_5: stg_83 [1/1] 0.00ns
ifBlock:2  br label %.preheader7.preheader


 <State 6>: 2.32ns
ST_6: i_2 [1/1] 0.00ns
.preheader6:0  %i_2 = phi i4 [ %i_5, %3 ], [ 0, %.preheader7.preheader ]

ST_6: exitcond2 [1/1] 1.24ns
.preheader6:1  %exitcond2 = icmp eq i4 %i_2, -8

ST_6: empty_9 [1/1] 0.00ns
.preheader6:2  %empty_9 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_6: i_5 [1/1] 0.48ns
.preheader6:3  %i_5 = add i4 %i_2, 1

ST_6: stg_88 [1/1] 1.08ns
.preheader6:4  br i1 %exitcond2, label %.preheader.preheader, label %3

ST_6: stg_89 [2/2] 0.72ns
:1  call fastcc void @dct_dct_1d([8 x i16]* %col_inbuf_0, [8 x i16]* %col_inbuf_1, [8 x i16]* %col_inbuf_2, [8 x i16]* %col_inbuf_3, [8 x i16]* %col_inbuf_4, [8 x i16]* %col_inbuf_5, [8 x i16]* %col_inbuf_6, [8 x i16]* %col_inbuf_7, i4 %i_2, [64 x i16]* %col_outbuf, i4 %i_2)


 <State 7>: 0.00ns
ST_7: stg_90 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str7) nounwind

ST_7: stg_91 [1/2] 0.00ns
:1  call fastcc void @dct_dct_1d([8 x i16]* %col_inbuf_0, [8 x i16]* %col_inbuf_1, [8 x i16]* %col_inbuf_2, [8 x i16]* %col_inbuf_3, [8 x i16]* %col_inbuf_4, [8 x i16]* %col_inbuf_5, [8 x i16]* %col_inbuf_6, [8 x i16]* %col_inbuf_7, i4 %i_2, [64 x i16]* %col_outbuf, i4 %i_2)

ST_7: stg_92 [1/1] 0.00ns
:2  br label %.preheader6


 <State 8>: 5.75ns
ST_8: indvar_flatten1 [1/1] 0.00ns
.preheader.preheader:0  %indvar_flatten1 = phi i7 [ %indvar_flatten_next1, %.preheader ], [ 0, %.preheader6 ]

ST_8: j_1 [1/1] 0.00ns
.preheader.preheader:1  %j_1 = phi i4 [ %j_1_mid2, %.preheader ], [ 0, %.preheader6 ]

ST_8: i_3 [1/1] 0.00ns
.preheader.preheader:2  %i_3 = phi i4 [ %i_7, %.preheader ], [ 0, %.preheader6 ]

ST_8: exitcond_flatten1 [1/1] 1.35ns
.preheader.preheader:3  %exitcond_flatten1 = icmp eq i7 %indvar_flatten1, -64

ST_8: indvar_flatten_next1 [1/1] 1.34ns
.preheader.preheader:4  %indvar_flatten_next1 = add i7 %indvar_flatten1, 1

ST_8: stg_98 [1/1] 0.00ns
.preheader.preheader:5  br i1 %exitcond_flatten1, label %4, label %.preheader

ST_8: j_3 [1/1] 0.48ns
.preheader:0  %j_3 = add i4 %j_1, 1

ST_8: exitcond1 [1/1] 1.24ns
.preheader:3  %exitcond1 = icmp eq i4 %i_3, -8

ST_8: i_3_mid2 [1/1] 0.84ns
.preheader:4  %i_3_mid2 = select i1 %exitcond1, i4 0, i4 %i_3

ST_8: j_1_mid2 [1/1] 0.84ns
.preheader:5  %j_1_mid2 = select i1 %exitcond1, i4 %j_3, i4 %j_1

ST_8: tmp_4_cast [1/1] 0.00ns
.preheader:6  %tmp_4_cast = zext i4 %j_1_mid2 to i8

ST_8: tmp_4 [1/1] 0.00ns
.preheader:16  %tmp_4 = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %i_3_mid2, i3 0)

ST_8: tmp_17_cast [1/1] 0.00ns
.preheader:17  %tmp_17_cast = zext i7 %tmp_4 to i8

ST_8: tmp_7 [1/1] 1.34ns
.preheader:18  %tmp_7 = add i8 %tmp_4_cast, %tmp_17_cast

ST_8: tmp_18_cast [1/1] 0.00ns
.preheader:19  %tmp_18_cast = zext i8 %tmp_7 to i64

ST_8: col_outbuf_addr [1/1] 0.00ns
.preheader:20  %col_outbuf_addr = getelementptr [64 x i16]* %col_outbuf, i64 0, i64 %tmp_18_cast

ST_8: col_outbuf_load [2/2] 2.33ns
.preheader:21  %col_outbuf_load = load i16* %col_outbuf_addr, align 2

ST_8: i_7 [1/1] 0.48ns
.preheader:24  %i_7 = add i4 %i_3_mid2, 1


 <State 9>: 4.66ns
ST_9: stg_111 [1/1] 0.00ns
.preheader:1  call void (...)* @_ssdm_op_SpecLoopName([42 x i8]* @Xpose_Col_Outer_Loop_Xpose_Col)

ST_9: empty_10 [1/1] 0.00ns
.preheader:2  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_9: tmp_2 [1/1] 0.00ns
.preheader:7  %tmp_2 = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %j_1_mid2, i3 0)

ST_9: tmp_14_cast [1/1] 0.00ns
.preheader:8  %tmp_14_cast = zext i7 %tmp_2 to i8

ST_9: stg_115 [1/1] 0.00ns
.preheader:9  call void (...)* @_ssdm_op_SpecLoopName([21 x i8]* @p_str9) nounwind

ST_9: tmp_8 [1/1] 0.00ns
.preheader:10  %tmp_8 = call i32 (...)* @_ssdm_op_SpecRegionBegin([21 x i8]* @p_str9)

ST_9: stg_117 [1/1] 0.00ns
.preheader:11  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_9: tmp_5_cast [1/1] 0.00ns
.preheader:12  %tmp_5_cast = zext i4 %i_3_mid2 to i8

ST_9: tmp_3 [1/1] 1.34ns
.preheader:13  %tmp_3 = add i8 %tmp_5_cast, %tmp_14_cast

ST_9: tmp_15_cast [1/1] 0.00ns
.preheader:14  %tmp_15_cast = zext i8 %tmp_3 to i64

ST_9: out_block_addr [1/1] 0.00ns
.preheader:15  %out_block_addr = getelementptr [64 x i16]* %out_block, i64 0, i64 %tmp_15_cast

ST_9: col_outbuf_load [1/2] 2.33ns
.preheader:21  %col_outbuf_load = load i16* %col_outbuf_addr, align 2

ST_9: stg_123 [1/1] 2.33ns
.preheader:22  store i16 %col_outbuf_load, i16* %out_block_addr, align 2

ST_9: empty_11 [1/1] 0.00ns
.preheader:23  %empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([21 x i8]* @p_str9, i32 %tmp_8)

ST_9: stg_125 [1/1] 0.00ns
.preheader:25  br label %.preheader.preheader


 <State 10>: 0.00ns
ST_10: stg_126 [1/1] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
