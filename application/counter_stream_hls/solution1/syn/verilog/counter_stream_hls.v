// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="counter_stream_hls,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.888000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=442,HLS_SYN_LUT=508}" *)

module counter_stream_hls (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        counter_TDATA,
        counter_TVALID,
        counter_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        s_axi_cpuControl_AWVALID,
        s_axi_cpuControl_AWREADY,
        s_axi_cpuControl_AWADDR,
        s_axi_cpuControl_WVALID,
        s_axi_cpuControl_WREADY,
        s_axi_cpuControl_WDATA,
        s_axi_cpuControl_WSTRB,
        s_axi_cpuControl_ARVALID,
        s_axi_cpuControl_ARREADY,
        s_axi_cpuControl_ARADDR,
        s_axi_cpuControl_RVALID,
        s_axi_cpuControl_RREADY,
        s_axi_cpuControl_RDATA,
        s_axi_cpuControl_RRESP,
        s_axi_cpuControl_BVALID,
        s_axi_cpuControl_BREADY,
        s_axi_cpuControl_BRESP
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CPUCONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CPUCONTROL_ADDR_WIDTH = 6;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_CPUCONTROL_WSTRB_WIDTH = (C_S_AXI_CPUCONTROL_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] counter_TDATA;
output   counter_TVALID;
input   counter_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   s_axi_cpuControl_AWVALID;
output   s_axi_cpuControl_AWREADY;
input  [C_S_AXI_CPUCONTROL_ADDR_WIDTH - 1 : 0] s_axi_cpuControl_AWADDR;
input   s_axi_cpuControl_WVALID;
output   s_axi_cpuControl_WREADY;
input  [C_S_AXI_CPUCONTROL_DATA_WIDTH - 1 : 0] s_axi_cpuControl_WDATA;
input  [C_S_AXI_CPUCONTROL_WSTRB_WIDTH - 1 : 0] s_axi_cpuControl_WSTRB;
input   s_axi_cpuControl_ARVALID;
output   s_axi_cpuControl_ARREADY;
input  [C_S_AXI_CPUCONTROL_ADDR_WIDTH - 1 : 0] s_axi_cpuControl_ARADDR;
output   s_axi_cpuControl_RVALID;
input   s_axi_cpuControl_RREADY;
output  [C_S_AXI_CPUCONTROL_DATA_WIDTH - 1 : 0] s_axi_cpuControl_RDATA;
output  [1:0] s_axi_cpuControl_RRESP;
output   s_axi_cpuControl_BVALID;
input   s_axi_cpuControl_BREADY;
output  [1:0] s_axi_cpuControl_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg counter_TVALID;
reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [31:0] init;
wire   [31:0] resolution;
wire   [31:0] numWord;
wire   [31:0] index;
reg    index_ap_vld;
wire    counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce;
wire    counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce;
reg   [30:0] i_reg_82;
reg   [31:0] phi_mul_reg_93;
reg   [31:0] numWord_read_reg_129;
reg   [31:0] resolution_read_reg_134;
reg   [31:0] init_read_reg_139;
wire   [31:0] i_cast_fu_104_p1;
reg   [31:0] i_cast_reg_144;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_121;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg   [0:0] tmp_reg_149;
reg    ap_sig_ioackin_counter_TREADY;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [0:0] tmp_fu_108_p2;
wire   [30:0] i_1_fu_113_p2;
wire   [31:0] next_mul_fu_119_p2;
wire   [31:0] tmp_2_fu_124_p2;
reg   [31:0] tmp_2_reg_163;
reg    ap_reg_ioackin_counter_TREADY = 1'b0;
reg    ap_reg_ioackin_index_dummy_ack = 1'b0;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_bdd_193;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_157;


counter_stream_hls_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
counter_stream_hls_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce ),
    .index( index ),
    .index_ap_vld( index_ap_vld )
);

counter_stream_hls_cpuControl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CPUCONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CPUCONTROL_DATA_WIDTH ))
counter_stream_hls_cpuControl_s_axi_U(
    .AWVALID( s_axi_cpuControl_AWVALID ),
    .AWREADY( s_axi_cpuControl_AWREADY ),
    .AWADDR( s_axi_cpuControl_AWADDR ),
    .WVALID( s_axi_cpuControl_WVALID ),
    .WREADY( s_axi_cpuControl_WREADY ),
    .WDATA( s_axi_cpuControl_WDATA ),
    .WSTRB( s_axi_cpuControl_WSTRB ),
    .ARVALID( s_axi_cpuControl_ARVALID ),
    .ARREADY( s_axi_cpuControl_ARREADY ),
    .ARADDR( s_axi_cpuControl_ARADDR ),
    .RVALID( s_axi_cpuControl_RVALID ),
    .RREADY( s_axi_cpuControl_RREADY ),
    .RDATA( s_axi_cpuControl_RDATA ),
    .RRESP( s_axi_cpuControl_RRESP ),
    .BVALID( s_axi_cpuControl_BVALID ),
    .BREADY( s_axi_cpuControl_BREADY ),
    .BRESP( s_axi_cpuControl_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce ),
    .init( init ),
    .resolution( resolution ),
    .numWord( numWord )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_counter_TREADY assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_counter_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_counter_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_157) begin
            if (~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_reg_ioackin_counter_TREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == counter_TREADY)) begin
                ap_reg_ioackin_counter_TREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_index_dummy_ack assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_index_dummy_ack
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_index_dummy_ack <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_157) begin
            if (~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_reg_ioackin_index_dummy_ack <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == ap_const_logic_1)) begin
                ap_reg_ioackin_index_dummy_ack <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == tmp_fu_108_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == tmp_fu_108_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == tmp_fu_108_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == tmp_fu_108_p2))) begin
        i_reg_82 <= i_1_fu_113_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_82 <= ap_const_lv31_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == tmp_fu_108_p2))) begin
        phi_mul_reg_93 <= next_mul_fu_119_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        phi_mul_reg_93 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        i_cast_reg_144[30 : 0] <= i_cast_fu_104_p1[30 : 0];
        tmp_reg_149 <= tmp_fu_108_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        init_read_reg_139 <= init;
        numWord_read_reg_129 <= numWord;
        resolution_read_reg_134 <= resolution;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == tmp_fu_108_p2))) begin
        tmp_2_reg_163 <= tmp_2_fu_124_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_121) begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_2 assign process. ///
always @ (ap_sig_bdd_193) begin
    if (ap_sig_bdd_193) begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_counter_TREADY assign process. ///
always @ (counter_TREADY or ap_reg_ioackin_counter_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_counter_TREADY)) begin
        ap_sig_ioackin_counter_TREADY = counter_TREADY;
    end else begin
        ap_sig_ioackin_counter_TREADY = ap_const_logic_1;
    end
end

/// counter_TVALID assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_reg_149 or ap_reg_ppiten_pp0_it1 or ap_reg_ioackin_counter_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ioackin_counter_TREADY))) begin
        counter_TVALID = ap_const_logic_1;
    end else begin
        counter_TVALID = ap_const_logic_0;
    end
end

/// index_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_reg_149 or ap_reg_ppiten_pp0_it1 or ap_reg_ioackin_index_dummy_ack) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ioackin_index_dummy_ack))) begin
        index_ap_vld = ap_const_logic_1;
    end else begin
        index_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or tmp_reg_149 or ap_sig_ioackin_counter_TREADY or ap_reg_ppiten_pp0_it1 or tmp_fu_108_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == tmp_fu_108_p2))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_counter_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == tmp_fu_108_p2))) begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st4_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_121 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_157 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or tmp_reg_149 or ap_reg_ppiten_pp0_it1) begin
    ap_sig_bdd_157 = ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(tmp_reg_149 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1));
end

/// ap_sig_bdd_193 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_193 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign counter_TDATA = tmp_2_reg_163;
assign counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign i_1_fu_113_p2 = (i_reg_82 + ap_const_lv31_1);
assign i_cast_fu_104_p1 = i_reg_82;
assign index = i_cast_reg_144;
assign next_mul_fu_119_p2 = (phi_mul_reg_93 + resolution_read_reg_134);
assign tmp_2_fu_124_p2 = (phi_mul_reg_93 + init_read_reg_139);
assign tmp_fu_108_p2 = ($signed(i_cast_fu_104_p1) < $signed(numWord_read_reg_129)? 1'b1: 1'b0);
always @ (posedge ap_clk) begin
    i_cast_reg_144[31] <= 1'b0;
end



endmodule //counter_stream_hls

