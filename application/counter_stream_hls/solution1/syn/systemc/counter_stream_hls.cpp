// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "counter_stream_hls.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic counter_stream_hls::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic counter_stream_hls::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> counter_stream_hls::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> counter_stream_hls::ap_ST_pp0_stg0_fsm_1 = "10";
const sc_lv<3> counter_stream_hls::ap_ST_st4_fsm_2 = "100";
const sc_lv<32> counter_stream_hls::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> counter_stream_hls::ap_const_lv1_1 = "1";
const int counter_stream_hls::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> counter_stream_hls::ap_const_lv32_1 = "1";
const sc_lv<1> counter_stream_hls::ap_const_lv1_0 = "0";
const sc_lv<31> counter_stream_hls::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> counter_stream_hls::ap_const_lv31_1 = "1";
const sc_lv<32> counter_stream_hls::ap_const_lv32_2 = "10";

counter_stream_hls::counter_stream_hls(sc_module_name name) : sc_module(name), mVcdFile(0) {
    counter_stream_hls_AXILiteS_s_axi_U = new counter_stream_hls_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("counter_stream_hls_AXILiteS_s_axi_U");
    counter_stream_hls_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    counter_stream_hls_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    counter_stream_hls_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    counter_stream_hls_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    counter_stream_hls_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    counter_stream_hls_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    counter_stream_hls_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    counter_stream_hls_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    counter_stream_hls_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    counter_stream_hls_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    counter_stream_hls_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    counter_stream_hls_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    counter_stream_hls_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    counter_stream_hls_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    counter_stream_hls_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    counter_stream_hls_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    counter_stream_hls_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    counter_stream_hls_AXILiteS_s_axi_U->ACLK(ap_clk);
    counter_stream_hls_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    counter_stream_hls_AXILiteS_s_axi_U->ACLK_EN(counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce);
    counter_stream_hls_AXILiteS_s_axi_U->index(index);
    counter_stream_hls_AXILiteS_s_axi_U->index_ap_vld(index_ap_vld);
    counter_stream_hls_cpuControl_s_axi_U = new counter_stream_hls_cpuControl_s_axi<C_S_AXI_CPUCONTROL_ADDR_WIDTH,C_S_AXI_CPUCONTROL_DATA_WIDTH>("counter_stream_hls_cpuControl_s_axi_U");
    counter_stream_hls_cpuControl_s_axi_U->AWVALID(s_axi_cpuControl_AWVALID);
    counter_stream_hls_cpuControl_s_axi_U->AWREADY(s_axi_cpuControl_AWREADY);
    counter_stream_hls_cpuControl_s_axi_U->AWADDR(s_axi_cpuControl_AWADDR);
    counter_stream_hls_cpuControl_s_axi_U->WVALID(s_axi_cpuControl_WVALID);
    counter_stream_hls_cpuControl_s_axi_U->WREADY(s_axi_cpuControl_WREADY);
    counter_stream_hls_cpuControl_s_axi_U->WDATA(s_axi_cpuControl_WDATA);
    counter_stream_hls_cpuControl_s_axi_U->WSTRB(s_axi_cpuControl_WSTRB);
    counter_stream_hls_cpuControl_s_axi_U->ARVALID(s_axi_cpuControl_ARVALID);
    counter_stream_hls_cpuControl_s_axi_U->ARREADY(s_axi_cpuControl_ARREADY);
    counter_stream_hls_cpuControl_s_axi_U->ARADDR(s_axi_cpuControl_ARADDR);
    counter_stream_hls_cpuControl_s_axi_U->RVALID(s_axi_cpuControl_RVALID);
    counter_stream_hls_cpuControl_s_axi_U->RREADY(s_axi_cpuControl_RREADY);
    counter_stream_hls_cpuControl_s_axi_U->RDATA(s_axi_cpuControl_RDATA);
    counter_stream_hls_cpuControl_s_axi_U->RRESP(s_axi_cpuControl_RRESP);
    counter_stream_hls_cpuControl_s_axi_U->BVALID(s_axi_cpuControl_BVALID);
    counter_stream_hls_cpuControl_s_axi_U->BREADY(s_axi_cpuControl_BREADY);
    counter_stream_hls_cpuControl_s_axi_U->BRESP(s_axi_cpuControl_BRESP);
    counter_stream_hls_cpuControl_s_axi_U->ACLK(ap_clk);
    counter_stream_hls_cpuControl_s_axi_U->ARESET(ap_rst_n_inv);
    counter_stream_hls_cpuControl_s_axi_U->ACLK_EN(counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce);
    counter_stream_hls_cpuControl_s_axi_U->init(init);
    counter_stream_hls_cpuControl_s_axi_U->resolution(resolution);
    counter_stream_hls_cpuControl_s_axi_U->numWord(numWord);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_121);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_157);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_ap_sig_bdd_193);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_1);
    sensitive << ( ap_sig_bdd_121 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_2);
    sensitive << ( ap_sig_bdd_193 );

    SC_METHOD(thread_ap_sig_ioackin_counter_TREADY);
    sensitive << ( counter_TREADY );
    sensitive << ( ap_reg_ioackin_counter_TREADY );

    SC_METHOD(thread_counter_TDATA);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_2_reg_163 );

    SC_METHOD(thread_counter_TVALID);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ioackin_counter_TREADY );

    SC_METHOD(thread_counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_i_1_fu_113_p2);
    sensitive << ( i_reg_82 );

    SC_METHOD(thread_i_cast_fu_104_p1);
    sensitive << ( i_reg_82 );

    SC_METHOD(thread_index);
    sensitive << ( i_cast_reg_144 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_index_ap_vld);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ioackin_index_dummy_ack );

    SC_METHOD(thread_next_mul_fu_119_p2);
    sensitive << ( phi_mul_reg_93 );
    sensitive << ( resolution_read_reg_134 );

    SC_METHOD(thread_tmp_2_fu_124_p2);
    sensitive << ( phi_mul_reg_93 );
    sensitive << ( init_read_reg_139 );

    SC_METHOD(thread_tmp_fu_108_p2);
    sensitive << ( numWord_read_reg_129 );
    sensitive << ( i_cast_fu_104_p1 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_1 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_sig_ioackin_counter_TREADY );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_reg_149 );
    sensitive << ( ap_sig_ioackin_counter_TREADY );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_fu_108_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ioackin_counter_TREADY = SC_LOGIC_0;
    ap_reg_ioackin_index_dummy_ack = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "counter_stream_hls_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, counter_TDATA, "(port)counter_TDATA");
    sc_trace(mVcdFile, counter_TVALID, "(port)counter_TVALID");
    sc_trace(mVcdFile, counter_TREADY, "(port)counter_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, s_axi_cpuControl_AWVALID, "(port)s_axi_cpuControl_AWVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_AWREADY, "(port)s_axi_cpuControl_AWREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_AWADDR, "(port)s_axi_cpuControl_AWADDR");
    sc_trace(mVcdFile, s_axi_cpuControl_WVALID, "(port)s_axi_cpuControl_WVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_WREADY, "(port)s_axi_cpuControl_WREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_WDATA, "(port)s_axi_cpuControl_WDATA");
    sc_trace(mVcdFile, s_axi_cpuControl_WSTRB, "(port)s_axi_cpuControl_WSTRB");
    sc_trace(mVcdFile, s_axi_cpuControl_ARVALID, "(port)s_axi_cpuControl_ARVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_ARREADY, "(port)s_axi_cpuControl_ARREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_ARADDR, "(port)s_axi_cpuControl_ARADDR");
    sc_trace(mVcdFile, s_axi_cpuControl_RVALID, "(port)s_axi_cpuControl_RVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_RREADY, "(port)s_axi_cpuControl_RREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_RDATA, "(port)s_axi_cpuControl_RDATA");
    sc_trace(mVcdFile, s_axi_cpuControl_RRESP, "(port)s_axi_cpuControl_RRESP");
    sc_trace(mVcdFile, s_axi_cpuControl_BVALID, "(port)s_axi_cpuControl_BVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_BREADY, "(port)s_axi_cpuControl_BREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_BRESP, "(port)s_axi_cpuControl_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_21, "ap_sig_bdd_21");
    sc_trace(mVcdFile, init, "init");
    sc_trace(mVcdFile, resolution, "resolution");
    sc_trace(mVcdFile, numWord, "numWord");
    sc_trace(mVcdFile, index, "index");
    sc_trace(mVcdFile, index_ap_vld, "index_ap_vld");
    sc_trace(mVcdFile, counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce, "counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce, "counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, i_reg_82, "i_reg_82");
    sc_trace(mVcdFile, phi_mul_reg_93, "phi_mul_reg_93");
    sc_trace(mVcdFile, numWord_read_reg_129, "numWord_read_reg_129");
    sc_trace(mVcdFile, resolution_read_reg_134, "resolution_read_reg_134");
    sc_trace(mVcdFile, init_read_reg_139, "init_read_reg_139");
    sc_trace(mVcdFile, i_cast_fu_104_p1, "i_cast_fu_104_p1");
    sc_trace(mVcdFile, i_cast_reg_144, "i_cast_reg_144");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_1, "ap_sig_cseq_ST_pp0_stg0_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_121, "ap_sig_bdd_121");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, tmp_reg_149, "tmp_reg_149");
    sc_trace(mVcdFile, ap_sig_ioackin_counter_TREADY, "ap_sig_ioackin_counter_TREADY");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, tmp_fu_108_p2, "tmp_fu_108_p2");
    sc_trace(mVcdFile, i_1_fu_113_p2, "i_1_fu_113_p2");
    sc_trace(mVcdFile, next_mul_fu_119_p2, "next_mul_fu_119_p2");
    sc_trace(mVcdFile, tmp_2_fu_124_p2, "tmp_2_fu_124_p2");
    sc_trace(mVcdFile, tmp_2_reg_163, "tmp_2_reg_163");
    sc_trace(mVcdFile, ap_reg_ioackin_counter_TREADY, "ap_reg_ioackin_counter_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_index_dummy_ack, "ap_reg_ioackin_index_dummy_ack");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_2, "ap_sig_cseq_ST_st4_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_193, "ap_sig_bdd_193");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_157, "ap_sig_bdd_157");
#endif

    }
    mHdltvinHandle.open("counter_stream_hls.hdltvin.dat");
    mHdltvoutHandle.open("counter_stream_hls.hdltvout.dat");
}

counter_stream_hls::~counter_stream_hls() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete counter_stream_hls_AXILiteS_s_axi_U;
    delete counter_stream_hls_cpuControl_s_axi_U;
}

void counter_stream_hls::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_counter_TREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_157.read()) {
            if (!(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
                ap_reg_ioackin_counter_TREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, counter_TREADY.read())) {
                ap_reg_ioackin_counter_TREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_index_dummy_ack = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_157.read()) {
            if (!(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
                ap_reg_ioackin_index_dummy_ack = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)) {
                ap_reg_ioackin_index_dummy_ack = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                    !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
             !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
                     !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
        i_reg_82 = i_1_fu_113_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_82 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
        phi_mul_reg_93 = next_mul_fu_119_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        phi_mul_reg_93 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
        i_cast_reg_144 = i_cast_fu_104_p1.read();
        tmp_reg_149 = tmp_fu_108_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        init_read_reg_139 = init.read();
        numWord_read_reg_129 = numWord.read();
        resolution_read_reg_134 = resolution.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
        tmp_2_reg_163 = tmp_2_fu_124_p2.read();
    }
}

void counter_stream_hls::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void counter_stream_hls::thread_ap_sig_bdd_121() {
    ap_sig_bdd_121 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void counter_stream_hls::thread_ap_sig_bdd_157() {
    ap_sig_bdd_157 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && !esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()));
}

void counter_stream_hls::thread_ap_sig_bdd_193() {
    ap_sig_bdd_193 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void counter_stream_hls::thread_ap_sig_bdd_21() {
    ap_sig_bdd_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void counter_stream_hls::thread_ap_sig_cseq_ST_pp0_stg0_fsm_1() {
    if (ap_sig_bdd_121.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_ap_sig_cseq_ST_st4_fsm_2() {
    if (ap_sig_bdd_193.read()) {
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_ap_sig_ioackin_counter_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_counter_TREADY.read())) {
        ap_sig_ioackin_counter_TREADY = counter_TREADY.read();
    } else {
        ap_sig_ioackin_counter_TREADY = ap_const_logic_1;
    }
}

void counter_stream_hls::thread_counter_TDATA() {
    counter_TDATA = tmp_2_reg_163.read();
}

void counter_stream_hls::thread_counter_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_counter_TREADY.read()))) {
        counter_TVALID = ap_const_logic_1;
    } else {
        counter_TVALID = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce() {
    counter_stream_hls_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void counter_stream_hls::thread_counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce() {
    counter_stream_hls_cpuControl_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void counter_stream_hls::thread_i_1_fu_113_p2() {
    i_1_fu_113_p2 = (!i_reg_82.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_82.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void counter_stream_hls::thread_i_cast_fu_104_p1() {
    i_cast_fu_104_p1 = esl_zext<32,31>(i_reg_82.read());
}

void counter_stream_hls::thread_index() {
    index = i_cast_reg_144.read();
}

void counter_stream_hls::thread_index_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_index_dummy_ack.read()))) {
        index_ap_vld = ap_const_logic_1;
    } else {
        index_ap_vld = ap_const_logic_0;
    }
}

void counter_stream_hls::thread_next_mul_fu_119_p2() {
    next_mul_fu_119_p2 = (!phi_mul_reg_93.read().is_01() || !resolution_read_reg_134.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_93.read()) + sc_biguint<32>(resolution_read_reg_134.read()));
}

void counter_stream_hls::thread_tmp_2_fu_124_p2() {
    tmp_2_fu_124_p2 = (!phi_mul_reg_93.read().is_01() || !init_read_reg_139.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_93.read()) + sc_biguint<32>(init_read_reg_139.read()));
}

void counter_stream_hls::thread_tmp_fu_108_p2() {
    tmp_fu_108_p2 = (!i_cast_fu_104_p1.read().is_01() || !numWord_read_reg_129.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_104_p1.read()) < sc_bigint<32>(numWord_read_reg_129.read()));
}

void counter_stream_hls::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(!esl_seteq<1,1,1>(tmp_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_counter_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_108_p2.read()))) {
                ap_NS_fsm = ap_ST_st4_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void counter_stream_hls::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"counter_TDATA\" :  \"" << counter_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"counter_TVALID\" :  \"" << counter_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"counter_TREADY\" :  \"" << counter_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_AWVALID\" :  \"" << s_axi_cpuControl_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_AWREADY\" :  \"" << s_axi_cpuControl_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_AWADDR\" :  \"" << s_axi_cpuControl_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_WVALID\" :  \"" << s_axi_cpuControl_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_WREADY\" :  \"" << s_axi_cpuControl_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_WDATA\" :  \"" << s_axi_cpuControl_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_WSTRB\" :  \"" << s_axi_cpuControl_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_ARVALID\" :  \"" << s_axi_cpuControl_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_ARREADY\" :  \"" << s_axi_cpuControl_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_ARADDR\" :  \"" << s_axi_cpuControl_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_RVALID\" :  \"" << s_axi_cpuControl_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_RREADY\" :  \"" << s_axi_cpuControl_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_RDATA\" :  \"" << s_axi_cpuControl_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_RRESP\" :  \"" << s_axi_cpuControl_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_BVALID\" :  \"" << s_axi_cpuControl_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_BREADY\" :  \"" << s_axi_cpuControl_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_BRESP\" :  \"" << s_axi_cpuControl_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

