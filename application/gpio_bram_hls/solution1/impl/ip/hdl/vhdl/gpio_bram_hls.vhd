-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gpio_bram_hls is
generic (
    C_S_AXI_CPUCONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CPUCONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_cpuControl_AWVALID : IN STD_LOGIC;
    s_axi_cpuControl_AWREADY : OUT STD_LOGIC;
    s_axi_cpuControl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_cpuControl_WVALID : IN STD_LOGIC;
    s_axi_cpuControl_WREADY : OUT STD_LOGIC;
    s_axi_cpuControl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH-1 downto 0);
    s_axi_cpuControl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_cpuControl_ARVALID : IN STD_LOGIC;
    s_axi_cpuControl_ARREADY : OUT STD_LOGIC;
    s_axi_cpuControl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_cpuControl_RVALID : OUT STD_LOGIC;
    s_axi_cpuControl_RREADY : IN STD_LOGIC;
    s_axi_cpuControl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH-1 downto 0);
    s_axi_cpuControl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cpuControl_BVALID : OUT STD_LOGIC;
    s_axi_cpuControl_BREADY : IN STD_LOGIC;
    s_axi_cpuControl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gpio_bram_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gpio_bram_hls,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.520000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=459,HLS_SYN_LUT=511}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp0_stg0_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st10_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rep : STD_LOGIC_VECTOR (31 downto 0);
    signal inc : STD_LOGIC_VECTOR (31 downto 0);
    signal index : STD_LOGIC_VECTOR (31 downto 0);
    signal index_ap_vld : STD_LOGIC;
    signal counter : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_ap_vld : STD_LOGIC;
    signal gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal i_reg_76 : STD_LOGIC_VECTOR (30 downto 0);
    signal inc_read_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal rep_read_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal C0_read_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_fu_97_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_reg_148 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal c_fu_113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal i_cast_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal tmp_3_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_127_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal tmp_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_93_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_108_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component gpio_bram_hls_mul_32s_31ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gpio_bram_hls_cpuControl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        rep : OUT STD_LOGIC_VECTOR (31 downto 0);
        inc : OUT STD_LOGIC_VECTOR (31 downto 0);
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        index_ap_vld : IN STD_LOGIC;
        counter : IN STD_LOGIC_VECTOR (31 downto 0);
        counter_ap_vld : IN STD_LOGIC );
    end component;



begin
    gpio_bram_hls_cpuControl_s_axi_U : component gpio_bram_hls_cpuControl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CPUCONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CPUCONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cpuControl_AWVALID,
        AWREADY => s_axi_cpuControl_AWREADY,
        AWADDR => s_axi_cpuControl_AWADDR,
        WVALID => s_axi_cpuControl_WVALID,
        WREADY => s_axi_cpuControl_WREADY,
        WDATA => s_axi_cpuControl_WDATA,
        WSTRB => s_axi_cpuControl_WSTRB,
        ARVALID => s_axi_cpuControl_ARVALID,
        ARREADY => s_axi_cpuControl_ARREADY,
        ARADDR => s_axi_cpuControl_ARADDR,
        RVALID => s_axi_cpuControl_RVALID,
        RREADY => s_axi_cpuControl_RREADY,
        RDATA => s_axi_cpuControl_RDATA,
        RRESP => s_axi_cpuControl_RRESP,
        BVALID => s_axi_cpuControl_BVALID,
        BREADY => s_axi_cpuControl_BREADY,
        BRESP => s_axi_cpuControl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        C0 => C0,
        rep => rep,
        inc => inc,
        index => index,
        index_ap_vld => index_ap_vld,
        counter => counter,
        counter_ap_vld => counter_ap_vld);

    gpio_bram_hls_mul_32s_31ns_32_6_U1 : component gpio_bram_hls_mul_32s_31ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => inc_read_reg_133,
        din1 => grp_fu_108_p1,
        ce => grp_fu_108_ce,
        dout => grp_fu_108_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (tmp_3_fu_122_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and not((tmp_3_fu_122_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (tmp_3_fu_122_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_76 assign process. --
    i_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_3_fu_122_p2 = ap_const_lv1_0)))) then 
                i_reg_76 <= i_1_fu_127_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_reg_76 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                C0_read_reg_143 <= C0;
                inc_read_reg_133 <= inc;
                rep_read_reg_138 <= rep;
                smax_reg_148 <= smax_fu_97_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                c_reg_158 <= c_fu_113_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7)) then
                    i_cast_reg_163(30 downto 0) <= i_cast_fu_118_p1(30 downto 0);
                tmp_3_reg_168 <= tmp_3_fu_122_p2;
            end if;
        end if;
    end process;
    i_cast_reg_163(31) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_3_fu_122_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
            when ap_ST_pp0_stg0_fsm_7 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (tmp_3_fu_122_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_8;
                end if;
            when ap_ST_st10_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st10_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_7_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_8 assign process. --
    ap_sig_cseq_ST_st10_fsm_8_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_st10_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_113_p2 <= std_logic_vector(unsigned(C0_read_reg_143) + unsigned(grp_fu_108_p2));
    counter <= c_reg_158;

    -- counter_ap_vld assign process. --
    counter_ap_vld_assign_proc : process(ap_sig_cseq_ST_st10_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_8)) then 
            counter_ap_vld <= ap_const_logic_1;
        else 
            counter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    grp_fu_108_ce <= ap_const_logic_1;
    grp_fu_108_p1 <= grp_fu_108_p10(31 - 1 downto 0);
    grp_fu_108_p10 <= std_logic_vector(resize(unsigned(smax_reg_148),32));
    i_1_fu_127_p2 <= std_logic_vector(unsigned(i_reg_76) + unsigned(ap_const_lv31_1));
    i_cast_fu_118_p1 <= std_logic_vector(resize(unsigned(i_reg_76),32));
    index <= i_cast_reg_163;

    -- index_ap_vld assign process. --
    index_ap_vld_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_7, ap_reg_ppiten_pp0_it1, tmp_3_reg_168)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((tmp_3_reg_168 = ap_const_lv1_0)))) then 
            index_ap_vld <= ap_const_logic_1;
        else 
            index_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    smax_fu_97_p3 <= 
        tmp_4_fu_93_p1 when (tmp_fu_87_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_3_fu_122_p2 <= "1" when (signed(i_cast_fu_118_p1) < signed(rep_read_reg_138)) else "0";
    tmp_4_fu_93_p1 <= rep(31 - 1 downto 0);
    tmp_fu_87_p2 <= "1" when (signed(rep) > signed(ap_const_lv32_0)) else "0";
end behav;
