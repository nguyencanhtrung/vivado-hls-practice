// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _gpio_bram_hls_HH_
#define _gpio_bram_hls_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "gpio_bram_hls_mul_32s_31ns_32_6.h"
#include "gpio_bram_hls_cpuControl_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CPUCONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CPUCONTROL_DATA_WIDTH = 32>
struct gpio_bram_hls : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_cpuControl_AWVALID;
    sc_out< sc_logic > s_axi_cpuControl_AWREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_ADDR_WIDTH> > s_axi_cpuControl_AWADDR;
    sc_in< sc_logic > s_axi_cpuControl_WVALID;
    sc_out< sc_logic > s_axi_cpuControl_WREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH> > s_axi_cpuControl_WDATA;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH/8> > s_axi_cpuControl_WSTRB;
    sc_in< sc_logic > s_axi_cpuControl_ARVALID;
    sc_out< sc_logic > s_axi_cpuControl_ARREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_ADDR_WIDTH> > s_axi_cpuControl_ARADDR;
    sc_out< sc_logic > s_axi_cpuControl_RVALID;
    sc_in< sc_logic > s_axi_cpuControl_RREADY;
    sc_out< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH> > s_axi_cpuControl_RDATA;
    sc_out< sc_lv<2> > s_axi_cpuControl_RRESP;
    sc_out< sc_logic > s_axi_cpuControl_BVALID;
    sc_in< sc_logic > s_axi_cpuControl_BREADY;
    sc_out< sc_lv<2> > s_axi_cpuControl_BRESP;
    sc_out< sc_logic > interrupt;


    // Module declarations
    gpio_bram_hls(sc_module_name name);
    SC_HAS_PROCESS(gpio_bram_hls);

    ~gpio_bram_hls();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    gpio_bram_hls_cpuControl_s_axi<C_S_AXI_CPUCONTROL_ADDR_WIDTH,C_S_AXI_CPUCONTROL_DATA_WIDTH>* gpio_bram_hls_cpuControl_s_axi_U;
    gpio_bram_hls_mul_32s_31ns_32_6<1,6,32,31,32>* gpio_bram_hls_mul_32s_31ns_32_6_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_27;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > C0;
    sc_signal< sc_lv<32> > rep;
    sc_signal< sc_lv<32> > inc;
    sc_signal< sc_lv<32> > index;
    sc_signal< sc_logic > index_ap_vld;
    sc_signal< sc_lv<32> > counter;
    sc_signal< sc_logic > counter_ap_vld;
    sc_signal< sc_logic > gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<31> > i_reg_76;
    sc_signal< sc_lv<32> > inc_read_reg_133;
    sc_signal< sc_lv<32> > rep_read_reg_138;
    sc_signal< sc_lv<32> > C0_read_reg_143;
    sc_signal< sc_lv<31> > smax_fu_97_p3;
    sc_signal< sc_lv<31> > smax_reg_148;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_97;
    sc_signal< sc_lv<32> > c_fu_113_p2;
    sc_signal< sc_lv<32> > c_reg_158;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_106;
    sc_signal< sc_lv<32> > i_cast_fu_118_p1;
    sc_signal< sc_lv<32> > i_cast_reg_163;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_7;
    sc_signal< bool > ap_sig_bdd_115;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<1> > tmp_3_fu_122_p2;
    sc_signal< sc_lv<1> > tmp_3_reg_168;
    sc_signal< sc_lv<31> > i_1_fu_127_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_8;
    sc_signal< bool > ap_sig_bdd_144;
    sc_signal< sc_lv<1> > tmp_fu_87_p2;
    sc_signal< sc_lv<31> > tmp_4_fu_93_p1;
    sc_signal< sc_lv<31> > grp_fu_108_p1;
    sc_signal< sc_lv<32> > grp_fu_108_p2;
    sc_signal< sc_logic > grp_fu_108_ce;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_lv<32> > grp_fu_108_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_st1_fsm_0;
    static const sc_lv<9> ap_ST_st2_fsm_1;
    static const sc_lv<9> ap_ST_st3_fsm_2;
    static const sc_lv<9> ap_ST_st4_fsm_3;
    static const sc_lv<9> ap_ST_st5_fsm_4;
    static const sc_lv<9> ap_ST_st6_fsm_5;
    static const sc_lv<9> ap_ST_st7_fsm_6;
    static const sc_lv<9> ap_ST_pp0_stg0_fsm_7;
    static const sc_lv<9> ap_ST_st10_fsm_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<31> ap_const_lv31_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_106();
    void thread_ap_sig_bdd_115();
    void thread_ap_sig_bdd_144();
    void thread_ap_sig_bdd_27();
    void thread_ap_sig_bdd_97();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_7();
    void thread_ap_sig_cseq_ST_st10_fsm_8();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_c_fu_113_p2();
    void thread_counter();
    void thread_counter_ap_vld();
    void thread_gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce();
    void thread_grp_fu_108_ce();
    void thread_grp_fu_108_p1();
    void thread_grp_fu_108_p10();
    void thread_i_1_fu_127_p2();
    void thread_i_cast_fu_118_p1();
    void thread_index();
    void thread_index_ap_vld();
    void thread_smax_fu_97_p3();
    void thread_tmp_3_fu_122_p2();
    void thread_tmp_4_fu_93_p1();
    void thread_tmp_fu_87_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
