// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "gpio_bram_hls.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gpio_bram_hls::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gpio_bram_hls::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> gpio_bram_hls::ap_ST_st1_fsm_0 = "1";
const sc_lv<9> gpio_bram_hls::ap_ST_st2_fsm_1 = "10";
const sc_lv<9> gpio_bram_hls::ap_ST_st3_fsm_2 = "100";
const sc_lv<9> gpio_bram_hls::ap_ST_st4_fsm_3 = "1000";
const sc_lv<9> gpio_bram_hls::ap_ST_st5_fsm_4 = "10000";
const sc_lv<9> gpio_bram_hls::ap_ST_st6_fsm_5 = "100000";
const sc_lv<9> gpio_bram_hls::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<9> gpio_bram_hls::ap_ST_pp0_stg0_fsm_7 = "10000000";
const sc_lv<9> gpio_bram_hls::ap_ST_st10_fsm_8 = "100000000";
const sc_lv<32> gpio_bram_hls::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> gpio_bram_hls::ap_const_lv1_1 = "1";
const int gpio_bram_hls::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> gpio_bram_hls::ap_const_lv32_1 = "1";
const sc_lv<32> gpio_bram_hls::ap_const_lv32_6 = "110";
const sc_lv<32> gpio_bram_hls::ap_const_lv32_7 = "111";
const sc_lv<1> gpio_bram_hls::ap_const_lv1_0 = "0";
const sc_lv<31> gpio_bram_hls::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> gpio_bram_hls::ap_const_lv32_8 = "1000";
const sc_lv<31> gpio_bram_hls::ap_const_lv31_1 = "1";

gpio_bram_hls::gpio_bram_hls(sc_module_name name) : sc_module(name), mVcdFile(0) {
    gpio_bram_hls_cpuControl_s_axi_U = new gpio_bram_hls_cpuControl_s_axi<C_S_AXI_CPUCONTROL_ADDR_WIDTH,C_S_AXI_CPUCONTROL_DATA_WIDTH>("gpio_bram_hls_cpuControl_s_axi_U");
    gpio_bram_hls_cpuControl_s_axi_U->AWVALID(s_axi_cpuControl_AWVALID);
    gpio_bram_hls_cpuControl_s_axi_U->AWREADY(s_axi_cpuControl_AWREADY);
    gpio_bram_hls_cpuControl_s_axi_U->AWADDR(s_axi_cpuControl_AWADDR);
    gpio_bram_hls_cpuControl_s_axi_U->WVALID(s_axi_cpuControl_WVALID);
    gpio_bram_hls_cpuControl_s_axi_U->WREADY(s_axi_cpuControl_WREADY);
    gpio_bram_hls_cpuControl_s_axi_U->WDATA(s_axi_cpuControl_WDATA);
    gpio_bram_hls_cpuControl_s_axi_U->WSTRB(s_axi_cpuControl_WSTRB);
    gpio_bram_hls_cpuControl_s_axi_U->ARVALID(s_axi_cpuControl_ARVALID);
    gpio_bram_hls_cpuControl_s_axi_U->ARREADY(s_axi_cpuControl_ARREADY);
    gpio_bram_hls_cpuControl_s_axi_U->ARADDR(s_axi_cpuControl_ARADDR);
    gpio_bram_hls_cpuControl_s_axi_U->RVALID(s_axi_cpuControl_RVALID);
    gpio_bram_hls_cpuControl_s_axi_U->RREADY(s_axi_cpuControl_RREADY);
    gpio_bram_hls_cpuControl_s_axi_U->RDATA(s_axi_cpuControl_RDATA);
    gpio_bram_hls_cpuControl_s_axi_U->RRESP(s_axi_cpuControl_RRESP);
    gpio_bram_hls_cpuControl_s_axi_U->BVALID(s_axi_cpuControl_BVALID);
    gpio_bram_hls_cpuControl_s_axi_U->BREADY(s_axi_cpuControl_BREADY);
    gpio_bram_hls_cpuControl_s_axi_U->BRESP(s_axi_cpuControl_BRESP);
    gpio_bram_hls_cpuControl_s_axi_U->ACLK(ap_clk);
    gpio_bram_hls_cpuControl_s_axi_U->ARESET(ap_rst_n_inv);
    gpio_bram_hls_cpuControl_s_axi_U->ACLK_EN(gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce);
    gpio_bram_hls_cpuControl_s_axi_U->ap_start(ap_start);
    gpio_bram_hls_cpuControl_s_axi_U->interrupt(interrupt);
    gpio_bram_hls_cpuControl_s_axi_U->ap_ready(ap_ready);
    gpio_bram_hls_cpuControl_s_axi_U->ap_done(ap_done);
    gpio_bram_hls_cpuControl_s_axi_U->ap_idle(ap_idle);
    gpio_bram_hls_cpuControl_s_axi_U->C0(C0);
    gpio_bram_hls_cpuControl_s_axi_U->rep(rep);
    gpio_bram_hls_cpuControl_s_axi_U->inc(inc);
    gpio_bram_hls_cpuControl_s_axi_U->index(index);
    gpio_bram_hls_cpuControl_s_axi_U->index_ap_vld(index_ap_vld);
    gpio_bram_hls_cpuControl_s_axi_U->counter(counter);
    gpio_bram_hls_cpuControl_s_axi_U->counter_ap_vld(counter_ap_vld);
    gpio_bram_hls_mul_32s_31ns_32_6_U1 = new gpio_bram_hls_mul_32s_31ns_32_6<1,6,32,31,32>("gpio_bram_hls_mul_32s_31ns_32_6_U1");
    gpio_bram_hls_mul_32s_31ns_32_6_U1->clk(ap_clk);
    gpio_bram_hls_mul_32s_31ns_32_6_U1->reset(ap_rst_n_inv);
    gpio_bram_hls_mul_32s_31ns_32_6_U1->din0(inc_read_reg_133);
    gpio_bram_hls_mul_32s_31ns_32_6_U1->din1(grp_fu_108_p1);
    gpio_bram_hls_mul_32s_31ns_32_6_U1->ce(grp_fu_108_ce);
    gpio_bram_hls_mul_32s_31ns_32_6_U1->dout(grp_fu_108_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st10_fsm_8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st10_fsm_8 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_106);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_115);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_144);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_97);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_7);
    sensitive << ( ap_sig_bdd_115 );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_8);
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_27 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_97 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_106 );

    SC_METHOD(thread_c_fu_113_p2);
    sensitive << ( C0_read_reg_143 );
    sensitive << ( grp_fu_108_p2 );

    SC_METHOD(thread_counter);
    sensitive << ( c_reg_158 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_8 );

    SC_METHOD(thread_counter_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st10_fsm_8 );

    SC_METHOD(thread_gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_grp_fu_108_ce);

    SC_METHOD(thread_grp_fu_108_p1);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( grp_fu_108_p10 );

    SC_METHOD(thread_grp_fu_108_p10);
    sensitive << ( smax_reg_148 );

    SC_METHOD(thread_i_1_fu_127_p2);
    sensitive << ( i_reg_76 );

    SC_METHOD(thread_i_cast_fu_118_p1);
    sensitive << ( i_reg_76 );

    SC_METHOD(thread_index);
    sensitive << ( i_cast_reg_163 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_7 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_3_reg_168 );

    SC_METHOD(thread_index_ap_vld);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_7 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_3_reg_168 );

    SC_METHOD(thread_smax_fu_97_p3);
    sensitive << ( tmp_fu_87_p2 );
    sensitive << ( tmp_4_fu_93_p1 );

    SC_METHOD(thread_tmp_3_fu_122_p2);
    sensitive << ( rep_read_reg_138 );
    sensitive << ( i_cast_fu_118_p1 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_7 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );

    SC_METHOD(thread_tmp_4_fu_93_p1);
    sensitive << ( rep );

    SC_METHOD(thread_tmp_fu_87_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( rep );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_3_fu_122_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gpio_bram_hls_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_cpuControl_AWVALID, "(port)s_axi_cpuControl_AWVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_AWREADY, "(port)s_axi_cpuControl_AWREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_AWADDR, "(port)s_axi_cpuControl_AWADDR");
    sc_trace(mVcdFile, s_axi_cpuControl_WVALID, "(port)s_axi_cpuControl_WVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_WREADY, "(port)s_axi_cpuControl_WREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_WDATA, "(port)s_axi_cpuControl_WDATA");
    sc_trace(mVcdFile, s_axi_cpuControl_WSTRB, "(port)s_axi_cpuControl_WSTRB");
    sc_trace(mVcdFile, s_axi_cpuControl_ARVALID, "(port)s_axi_cpuControl_ARVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_ARREADY, "(port)s_axi_cpuControl_ARREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_ARADDR, "(port)s_axi_cpuControl_ARADDR");
    sc_trace(mVcdFile, s_axi_cpuControl_RVALID, "(port)s_axi_cpuControl_RVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_RREADY, "(port)s_axi_cpuControl_RREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_RDATA, "(port)s_axi_cpuControl_RDATA");
    sc_trace(mVcdFile, s_axi_cpuControl_RRESP, "(port)s_axi_cpuControl_RRESP");
    sc_trace(mVcdFile, s_axi_cpuControl_BVALID, "(port)s_axi_cpuControl_BVALID");
    sc_trace(mVcdFile, s_axi_cpuControl_BREADY, "(port)s_axi_cpuControl_BREADY");
    sc_trace(mVcdFile, s_axi_cpuControl_BRESP, "(port)s_axi_cpuControl_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_27, "ap_sig_bdd_27");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, C0, "C0");
    sc_trace(mVcdFile, rep, "rep");
    sc_trace(mVcdFile, inc, "inc");
    sc_trace(mVcdFile, index, "index");
    sc_trace(mVcdFile, index_ap_vld, "index_ap_vld");
    sc_trace(mVcdFile, counter, "counter");
    sc_trace(mVcdFile, counter_ap_vld, "counter_ap_vld");
    sc_trace(mVcdFile, gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce, "gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, i_reg_76, "i_reg_76");
    sc_trace(mVcdFile, inc_read_reg_133, "inc_read_reg_133");
    sc_trace(mVcdFile, rep_read_reg_138, "rep_read_reg_138");
    sc_trace(mVcdFile, C0_read_reg_143, "C0_read_reg_143");
    sc_trace(mVcdFile, smax_fu_97_p3, "smax_fu_97_p3");
    sc_trace(mVcdFile, smax_reg_148, "smax_reg_148");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_97, "ap_sig_bdd_97");
    sc_trace(mVcdFile, c_fu_113_p2, "c_fu_113_p2");
    sc_trace(mVcdFile, c_reg_158, "c_reg_158");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_106, "ap_sig_bdd_106");
    sc_trace(mVcdFile, i_cast_fu_118_p1, "i_cast_fu_118_p1");
    sc_trace(mVcdFile, i_cast_reg_163, "i_cast_reg_163");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_7, "ap_sig_cseq_ST_pp0_stg0_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_115, "ap_sig_bdd_115");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, tmp_3_fu_122_p2, "tmp_3_fu_122_p2");
    sc_trace(mVcdFile, tmp_3_reg_168, "tmp_3_reg_168");
    sc_trace(mVcdFile, i_1_fu_127_p2, "i_1_fu_127_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_8, "ap_sig_cseq_ST_st10_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_144, "ap_sig_bdd_144");
    sc_trace(mVcdFile, tmp_fu_87_p2, "tmp_fu_87_p2");
    sc_trace(mVcdFile, tmp_4_fu_93_p1, "tmp_4_fu_93_p1");
    sc_trace(mVcdFile, grp_fu_108_p1, "grp_fu_108_p1");
    sc_trace(mVcdFile, grp_fu_108_p2, "grp_fu_108_p2");
    sc_trace(mVcdFile, grp_fu_108_ce, "grp_fu_108_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_108_p10, "grp_fu_108_p10");
#endif

    }
    mHdltvinHandle.open("gpio_bram_hls.hdltvin.dat");
    mHdltvoutHandle.open("gpio_bram_hls.hdltvout.dat");
}

gpio_bram_hls::~gpio_bram_hls() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete gpio_bram_hls_cpuControl_s_axi_U;
    delete gpio_bram_hls_mul_32s_31ns_32_6_U1;
}

void gpio_bram_hls::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
             esl_seteq<1,1,1>(tmp_3_fu_122_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
             !esl_seteq<1,1,1>(tmp_3_fu_122_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
                     esl_seteq<1,1,1>(tmp_3_fu_122_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !esl_seteq<1,1,1>(tmp_3_fu_122_p2.read(), ap_const_lv1_0))) {
        i_reg_76 = i_1_fu_127_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        i_reg_76 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        C0_read_reg_143 = C0.read();
        inc_read_reg_133 = inc.read();
        rep_read_reg_138 = rep.read();
        smax_reg_148 = smax_fu_97_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        c_reg_158 = c_fu_113_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read())) {
        i_cast_reg_163 = i_cast_fu_118_p1.read();
        tmp_3_reg_168 = tmp_3_fu_122_p2.read();
    }
}

void gpio_bram_hls::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void gpio_bram_hls::thread_ap_sig_bdd_106() {
    ap_sig_bdd_106 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void gpio_bram_hls::thread_ap_sig_bdd_115() {
    ap_sig_bdd_115 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void gpio_bram_hls::thread_ap_sig_bdd_144() {
    ap_sig_bdd_144 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void gpio_bram_hls::thread_ap_sig_bdd_27() {
    ap_sig_bdd_27 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void gpio_bram_hls::thread_ap_sig_bdd_97() {
    ap_sig_bdd_97 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void gpio_bram_hls::thread_ap_sig_cseq_ST_pp0_stg0_fsm_7() {
    if (ap_sig_bdd_115.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_sig_cseq_ST_st10_fsm_8() {
    if (ap_sig_bdd_144.read()) {
        ap_sig_cseq_ST_st10_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_8 = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_27.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_97.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_106.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_c_fu_113_p2() {
    c_fu_113_p2 = (!C0_read_reg_143.read().is_01() || !grp_fu_108_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(C0_read_reg_143.read()) + sc_biguint<32>(grp_fu_108_p2.read()));
}

void gpio_bram_hls::thread_counter() {
    counter = c_reg_158.read();
}

void gpio_bram_hls::thread_counter_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_8.read())) {
        counter_ap_vld = ap_const_logic_1;
    } else {
        counter_ap_vld = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce() {
    gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void gpio_bram_hls::thread_grp_fu_108_ce() {
    grp_fu_108_ce = ap_const_logic_1;
}

void gpio_bram_hls::thread_grp_fu_108_p1() {
    grp_fu_108_p1 =  (sc_lv<31>) (grp_fu_108_p10.read());
}

void gpio_bram_hls::thread_grp_fu_108_p10() {
    grp_fu_108_p10 = esl_zext<32,31>(smax_reg_148.read());
}

void gpio_bram_hls::thread_i_1_fu_127_p2() {
    i_1_fu_127_p2 = (!i_reg_76.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_76.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void gpio_bram_hls::thread_i_cast_fu_118_p1() {
    i_cast_fu_118_p1 = esl_zext<32,31>(i_reg_76.read());
}

void gpio_bram_hls::thread_index() {
    index = i_cast_reg_163.read();
}

void gpio_bram_hls::thread_index_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !esl_seteq<1,1,1>(tmp_3_reg_168.read(), ap_const_lv1_0))) {
        index_ap_vld = ap_const_logic_1;
    } else {
        index_ap_vld = ap_const_logic_0;
    }
}

void gpio_bram_hls::thread_smax_fu_97_p3() {
    smax_fu_97_p3 = (!tmp_fu_87_p2.read()[0].is_01())? sc_lv<31>(): ((tmp_fu_87_p2.read()[0].to_bool())? tmp_4_fu_93_p1.read(): ap_const_lv31_0);
}

void gpio_bram_hls::thread_tmp_3_fu_122_p2() {
    tmp_3_fu_122_p2 = (!i_cast_fu_118_p1.read().is_01() || !rep_read_reg_138.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_118_p1.read()) < sc_bigint<32>(rep_read_reg_138.read()));
}

void gpio_bram_hls::thread_tmp_4_fu_93_p1() {
    tmp_4_fu_93_p1 = rep.read().range(31-1, 0);
}

void gpio_bram_hls::thread_tmp_fu_87_p2() {
    tmp_fu_87_p2 = (!rep.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(rep.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void gpio_bram_hls::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            break;
        case 128 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(tmp_3_fu_122_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st10_fsm_8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void gpio_bram_hls::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_AWVALID\" :  \"" << s_axi_cpuControl_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_cpuControl_AWREADY\" :  \"" << s_axi_cpuControl_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_AWADDR\" :  \"" << s_axi_cpuControl_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_WVALID\" :  \"" << s_axi_cpuControl_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_WREADY\" :  \"" << s_axi_cpuControl_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_WDATA\" :  \"" << s_axi_cpuControl_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_WSTRB\" :  \"" << s_axi_cpuControl_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_ARVALID\" :  \"" << s_axi_cpuControl_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_ARREADY\" :  \"" << s_axi_cpuControl_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_ARADDR\" :  \"" << s_axi_cpuControl_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_RVALID\" :  \"" << s_axi_cpuControl_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_RREADY\" :  \"" << s_axi_cpuControl_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_RDATA\" :  \"" << s_axi_cpuControl_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_RRESP\" :  \"" << s_axi_cpuControl_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_BVALID\" :  \"" << s_axi_cpuControl_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_cpuControl_BREADY\" :  \"" << s_axi_cpuControl_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_cpuControl_BRESP\" :  \"" << s_axi_cpuControl_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

