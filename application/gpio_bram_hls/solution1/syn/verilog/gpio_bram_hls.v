// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gpio_bram_hls,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.520000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=459,HLS_SYN_LUT=511}" *)

module gpio_bram_hls (
        ap_clk,
        ap_rst_n,
        s_axi_cpuControl_AWVALID,
        s_axi_cpuControl_AWREADY,
        s_axi_cpuControl_AWADDR,
        s_axi_cpuControl_WVALID,
        s_axi_cpuControl_WREADY,
        s_axi_cpuControl_WDATA,
        s_axi_cpuControl_WSTRB,
        s_axi_cpuControl_ARVALID,
        s_axi_cpuControl_ARREADY,
        s_axi_cpuControl_ARADDR,
        s_axi_cpuControl_RVALID,
        s_axi_cpuControl_RREADY,
        s_axi_cpuControl_RDATA,
        s_axi_cpuControl_RRESP,
        s_axi_cpuControl_BVALID,
        s_axi_cpuControl_BREADY,
        s_axi_cpuControl_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 9'b1;
parameter    ap_ST_st2_fsm_1 = 9'b10;
parameter    ap_ST_st3_fsm_2 = 9'b100;
parameter    ap_ST_st4_fsm_3 = 9'b1000;
parameter    ap_ST_st5_fsm_4 = 9'b10000;
parameter    ap_ST_st6_fsm_5 = 9'b100000;
parameter    ap_ST_st7_fsm_6 = 9'b1000000;
parameter    ap_ST_pp0_stg0_fsm_7 = 9'b10000000;
parameter    ap_ST_st10_fsm_8 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_CPUCONTROL_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CPUCONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CPUCONTROL_WSTRB_WIDTH = (C_S_AXI_CPUCONTROL_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_cpuControl_AWVALID;
output   s_axi_cpuControl_AWREADY;
input  [C_S_AXI_CPUCONTROL_ADDR_WIDTH - 1 : 0] s_axi_cpuControl_AWADDR;
input   s_axi_cpuControl_WVALID;
output   s_axi_cpuControl_WREADY;
input  [C_S_AXI_CPUCONTROL_DATA_WIDTH - 1 : 0] s_axi_cpuControl_WDATA;
input  [C_S_AXI_CPUCONTROL_WSTRB_WIDTH - 1 : 0] s_axi_cpuControl_WSTRB;
input   s_axi_cpuControl_ARVALID;
output   s_axi_cpuControl_ARREADY;
input  [C_S_AXI_CPUCONTROL_ADDR_WIDTH - 1 : 0] s_axi_cpuControl_ARADDR;
output   s_axi_cpuControl_RVALID;
input   s_axi_cpuControl_RREADY;
output  [C_S_AXI_CPUCONTROL_DATA_WIDTH - 1 : 0] s_axi_cpuControl_RDATA;
output  [1:0] s_axi_cpuControl_RRESP;
output   s_axi_cpuControl_BVALID;
input   s_axi_cpuControl_BREADY;
output  [1:0] s_axi_cpuControl_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm = 9'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
reg    ap_ready;
wire   [31:0] C0;
wire   [31:0] rep;
wire   [31:0] inc;
wire   [31:0] index;
reg    index_ap_vld;
wire   [31:0] counter;
reg    counter_ap_vld;
wire    gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce;
reg   [30:0] i_reg_76;
reg  signed [31:0] inc_read_reg_133;
reg   [31:0] rep_read_reg_138;
reg   [31:0] C0_read_reg_143;
wire   [30:0] smax_fu_97_p3;
reg   [30:0] smax_reg_148;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_97;
wire   [31:0] c_fu_113_p2;
reg   [31:0] c_reg_158;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_106;
wire   [31:0] i_cast_fu_118_p1;
reg   [31:0] i_cast_reg_163;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_7;
reg    ap_sig_bdd_115;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [0:0] tmp_3_fu_122_p2;
reg   [0:0] tmp_3_reg_168;
wire   [30:0] i_1_fu_127_p2;
reg    ap_sig_cseq_ST_st10_fsm_8;
reg    ap_sig_bdd_144;
wire   [0:0] tmp_fu_87_p2;
wire   [30:0] tmp_4_fu_93_p1;
wire   [30:0] grp_fu_108_p1;
wire   [31:0] grp_fu_108_p2;
wire    grp_fu_108_ce;
reg   [8:0] ap_NS_fsm;
wire   [31:0] grp_fu_108_p10;


gpio_bram_hls_cpuControl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CPUCONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CPUCONTROL_DATA_WIDTH ))
gpio_bram_hls_cpuControl_s_axi_U(
    .AWVALID( s_axi_cpuControl_AWVALID ),
    .AWREADY( s_axi_cpuControl_AWREADY ),
    .AWADDR( s_axi_cpuControl_AWADDR ),
    .WVALID( s_axi_cpuControl_WVALID ),
    .WREADY( s_axi_cpuControl_WREADY ),
    .WDATA( s_axi_cpuControl_WDATA ),
    .WSTRB( s_axi_cpuControl_WSTRB ),
    .ARVALID( s_axi_cpuControl_ARVALID ),
    .ARREADY( s_axi_cpuControl_ARREADY ),
    .ARADDR( s_axi_cpuControl_ARADDR ),
    .RVALID( s_axi_cpuControl_RVALID ),
    .RREADY( s_axi_cpuControl_RREADY ),
    .RDATA( s_axi_cpuControl_RDATA ),
    .RRESP( s_axi_cpuControl_RRESP ),
    .BVALID( s_axi_cpuControl_BVALID ),
    .BREADY( s_axi_cpuControl_BREADY ),
    .BRESP( s_axi_cpuControl_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .C0( C0 ),
    .rep( rep ),
    .inc( inc ),
    .index( index ),
    .index_ap_vld( index_ap_vld ),
    .counter( counter ),
    .counter_ap_vld( counter_ap_vld )
);

gpio_bram_hls_mul_32s_31ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
gpio_bram_hls_mul_32s_31ns_32_6_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( inc_read_reg_133 ),
    .din1( grp_fu_108_p1 ),
    .ce( grp_fu_108_ce ),
    .dout( grp_fu_108_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (tmp_3_fu_122_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(tmp_3_fu_122_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (tmp_3_fu_122_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(tmp_3_fu_122_p2 == ap_const_lv1_0))) begin
        i_reg_76 <= i_1_fu_127_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_reg_76 <= ap_const_lv31_0;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        C0_read_reg_143 <= C0;
        inc_read_reg_133 <= inc;
        rep_read_reg_138 <= rep;
        smax_reg_148 <= smax_fu_97_p3;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        c_reg_158 <= c_fu_113_p2;
    end
end

/// assign process. ///
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7)) begin
        i_cast_reg_163[30 : 0] <= i_cast_fu_118_p1[30 : 0];
        tmp_3_reg_168 <= tmp_3_fu_122_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_7 assign process. ///
always @ (ap_sig_bdd_115) begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_8 assign process. ///
always @ (ap_sig_bdd_144) begin
    if (ap_sig_bdd_144) begin
        ap_sig_cseq_ST_st10_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_27) begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_97) begin
    if (ap_sig_bdd_97) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_106) begin
    if (ap_sig_bdd_106) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// counter_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8)) begin
        counter_ap_vld = ap_const_logic_1;
    end else begin
        counter_ap_vld = ap_const_logic_0;
    end
end

/// index_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it1 or tmp_3_reg_168) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(tmp_3_reg_168 == ap_const_lv1_0))) begin
        index_ap_vld = ap_const_logic_1;
    end else begin
        index_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or tmp_3_fu_122_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
        end
        ap_ST_pp0_stg0_fsm_7 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (tmp_3_fu_122_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_8;
            end
        end
        ap_ST_st10_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_106 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_106 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_115 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_144 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_144 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_27 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_97 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_97 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign c_fu_113_p2 = (C0_read_reg_143 + grp_fu_108_p2);
assign counter = c_reg_158;
assign gpio_bram_hls_cpuControl_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign grp_fu_108_ce = ap_const_logic_1;
assign grp_fu_108_p1 = grp_fu_108_p10;
assign grp_fu_108_p10 = smax_reg_148;
assign i_1_fu_127_p2 = (i_reg_76 + ap_const_lv31_1);
assign i_cast_fu_118_p1 = i_reg_76;
assign index = i_cast_reg_163;
assign smax_fu_97_p3 = ((tmp_fu_87_p2[0:0] === 1'b1) ? tmp_4_fu_93_p1 : ap_const_lv31_0);
assign tmp_3_fu_122_p2 = ($signed(i_cast_fu_118_p1) < $signed(rep_read_reg_138)? 1'b1: 1'b0);
assign tmp_4_fu_93_p1 = rep[30:0];
assign tmp_fu_87_p2 = ($signed(rep) > $signed(32'b00000000000000000000000000000000)? 1'b1: 1'b0);
always @ (posedge ap_clk) begin
    i_cast_reg_163[31] <= 1'b0;
end



endmodule //gpio_bram_hls

