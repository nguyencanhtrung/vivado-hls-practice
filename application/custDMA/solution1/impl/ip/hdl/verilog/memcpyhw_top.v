// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module memcpyhw_top (
m_axi_m_AWID,
m_axi_m_AWADDR,
m_axi_m_AWLEN,
m_axi_m_AWSIZE,
m_axi_m_AWBURST,
m_axi_m_AWLOCK,
m_axi_m_AWCACHE,
m_axi_m_AWPROT,
m_axi_m_AWQOS,
m_axi_m_AWUSER,
m_axi_m_AWVALID,
m_axi_m_AWREADY,
m_axi_m_WDATA,
m_axi_m_WSTRB,
m_axi_m_WLAST,
m_axi_m_WUSER,
m_axi_m_WVALID,
m_axi_m_WREADY,
m_axi_m_BID,
m_axi_m_BRESP,
m_axi_m_BUSER,
m_axi_m_BVALID,
m_axi_m_BREADY,
m_axi_m_ARID,
m_axi_m_ARADDR,
m_axi_m_ARLEN,
m_axi_m_ARSIZE,
m_axi_m_ARBURST,
m_axi_m_ARLOCK,
m_axi_m_ARCACHE,
m_axi_m_ARPROT,
m_axi_m_ARQOS,
m_axi_m_ARUSER,
m_axi_m_ARVALID,
m_axi_m_ARREADY,
m_axi_m_RID,
m_axi_m_RDATA,
m_axi_m_RRESP,
m_axi_m_RLAST,
m_axi_m_RUSER,
m_axi_m_RVALID,
m_axi_m_RREADY,
DATA_S_TVALID,
DATA_S_TREADY,
DATA_S_TDATA,
OFFSET_S_TVALID,
OFFSET_S_TREADY,
OFFSET_S_TDATA,
aresetn,
aclk,
wr
);

parameter C_M_AXI_M_ID_WIDTH = 1;
parameter C_M_AXI_M_ADDR_WIDTH = 32;
parameter C_M_AXI_M_DATA_WIDTH = 32;
 // Trung modified
parameter C_M_AXI_M_AWUSER_WIDTH = 5;
parameter C_M_AXI_M_ARUSER_WIDTH = 5;
parameter C_M_AXI_M_WUSER_WIDTH = 5;  // originally = 1;
parameter C_M_AXI_M_RUSER_WIDTH = 5;
parameter C_M_AXI_M_BUSER_WIDTH = 5;
 // End  // Trung modified
parameter C_M_AXI_M_USER_DATA_WIDTH = 32;
parameter C_M_AXI_M_TARGET_ADDR = 32'h00000000;
 // Trung modified
parameter C_M_AXI_M_USER_VALUE = 5'b11111; // originally = 1'b0
 // End Trung modified
parameter C_M_AXI_M_PROT_VALUE = 3'b010;
parameter C_M_AXI_M_CACHE_VALUE = 4'b1111; // origianlly = 4'b0000
parameter RESET_ACTIVE_LOW = 1;

output [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_AWID ;
output [C_M_AXI_M_ADDR_WIDTH - 1:0] m_axi_m_AWADDR ;
output [8 - 1:0] m_axi_m_AWLEN ;
output [3 - 1:0] m_axi_m_AWSIZE ;
output [2 - 1:0] m_axi_m_AWBURST ;
output [2 - 1:0] m_axi_m_AWLOCK ;
output [4 - 1:0] m_axi_m_AWCACHE ;
output [3 - 1:0] m_axi_m_AWPROT ;
output [4 - 1:0] m_axi_m_AWQOS ;
output [C_M_AXI_M_AWUSER_WIDTH - 1:0] m_axi_m_AWUSER ;
output m_axi_m_AWVALID ;
input m_axi_m_AWREADY ;
output [C_M_AXI_M_DATA_WIDTH - 1:0] m_axi_m_WDATA ;
output [C_M_AXI_M_DATA_WIDTH/8 - 1:0] m_axi_m_WSTRB ;
output m_axi_m_WLAST ;
output [C_M_AXI_M_WUSER_WIDTH - 1:0] m_axi_m_WUSER ;
output m_axi_m_WVALID ;
input m_axi_m_WREADY ;
input [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_BID ;
input [2 - 1:0] m_axi_m_BRESP ;
input [C_M_AXI_M_BUSER_WIDTH - 1:0] m_axi_m_BUSER ;
input m_axi_m_BVALID ;
output m_axi_m_BREADY ;
output [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_ARID ;
output [C_M_AXI_M_ADDR_WIDTH - 1:0] m_axi_m_ARADDR ;
output [8 - 1:0] m_axi_m_ARLEN ;
output [3 - 1:0] m_axi_m_ARSIZE ;
output [2 - 1:0] m_axi_m_ARBURST ;
output [2 - 1:0] m_axi_m_ARLOCK ;
output [4 - 1:0] m_axi_m_ARCACHE ;
output [3 - 1:0] m_axi_m_ARPROT ;
output [4 - 1:0] m_axi_m_ARQOS ;
output [C_M_AXI_M_ARUSER_WIDTH - 1:0] m_axi_m_ARUSER ;
output m_axi_m_ARVALID ;
input m_axi_m_ARREADY ;
input [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_RID ;
input [C_M_AXI_M_DATA_WIDTH - 1:0] m_axi_m_RDATA ;
input [2 - 1:0] m_axi_m_RRESP ;
input m_axi_m_RLAST ;
input [C_M_AXI_M_RUSER_WIDTH - 1:0] m_axi_m_RUSER ;
input m_axi_m_RVALID ;
output m_axi_m_RREADY ;


input DATA_S_TVALID ;
output DATA_S_TREADY ;
input [32 - 1:0] DATA_S_TDATA ;


input OFFSET_S_TVALID ;
output OFFSET_S_TREADY ;
input [32 - 1:0] OFFSET_S_TDATA ;

input aresetn ;

input aclk ;

input wr ;


wire [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_AWID;
wire [C_M_AXI_M_ADDR_WIDTH - 1:0] m_axi_m_AWADDR;
wire [8 - 1:0] m_axi_m_AWLEN;
wire [3 - 1:0] m_axi_m_AWSIZE;
wire [2 - 1:0] m_axi_m_AWBURST;
wire [2 - 1:0] m_axi_m_AWLOCK;
wire [4 - 1:0] m_axi_m_AWCACHE;
wire [3 - 1:0] m_axi_m_AWPROT;
wire [4 - 1:0] m_axi_m_AWQOS;
wire [C_M_AXI_M_AWUSER_WIDTH - 1:0] m_axi_m_AWUSER;
wire m_axi_m_AWVALID;
wire m_axi_m_AWREADY;
wire [C_M_AXI_M_DATA_WIDTH - 1:0] m_axi_m_WDATA;
wire [C_M_AXI_M_DATA_WIDTH/8 - 1:0] m_axi_m_WSTRB;
wire m_axi_m_WLAST;
wire [C_M_AXI_M_WUSER_WIDTH - 1:0] m_axi_m_WUSER;
wire m_axi_m_WVALID;
wire m_axi_m_WREADY;
wire [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_BID;
wire [2 - 1:0] m_axi_m_BRESP;
wire [C_M_AXI_M_BUSER_WIDTH - 1:0] m_axi_m_BUSER;
wire m_axi_m_BVALID;
wire m_axi_m_BREADY;
wire [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_ARID;
wire [C_M_AXI_M_ADDR_WIDTH - 1:0] m_axi_m_ARADDR;
wire [8 - 1:0] m_axi_m_ARLEN;
wire [3 - 1:0] m_axi_m_ARSIZE;
wire [2 - 1:0] m_axi_m_ARBURST;
wire [2 - 1:0] m_axi_m_ARLOCK;
wire [4 - 1:0] m_axi_m_ARCACHE;
wire [3 - 1:0] m_axi_m_ARPROT;
wire [4 - 1:0] m_axi_m_ARQOS;
wire [C_M_AXI_M_ARUSER_WIDTH - 1:0] m_axi_m_ARUSER;
wire m_axi_m_ARVALID;
wire m_axi_m_ARREADY;
wire [C_M_AXI_M_ID_WIDTH - 1:0] m_axi_m_RID;
wire [C_M_AXI_M_DATA_WIDTH - 1:0] m_axi_m_RDATA;
wire [2 - 1:0] m_axi_m_RRESP;
wire m_axi_m_RLAST;
wire [C_M_AXI_M_RUSER_WIDTH - 1:0] m_axi_m_RUSER;
wire m_axi_m_RVALID;
wire m_axi_m_RREADY;


wire DATA_S_TVALID;
wire DATA_S_TREADY;
wire [32 - 1:0] DATA_S_TDATA;


wire OFFSET_S_TVALID;
wire OFFSET_S_TREADY;
wire [32 - 1:0] OFFSET_S_TDATA;

wire aresetn;


wire [32 - 1:0] sig_memcpyHW_m_datain;
wire [32 - 1:0] sig_memcpyHW_m_dataout;
wire [32 - 1:0] sig_memcpyHW_m_address;
wire [32 - 1:0] sig_memcpyHW_m_size;
wire sig_memcpyHW_m_req_din;
wire sig_memcpyHW_m_req_full_n;
wire sig_memcpyHW_m_req_write;
wire sig_memcpyHW_m_rsp_empty_n;
wire sig_memcpyHW_m_rsp_read;

wire [32 - 1:0] sig_memcpyHW_dataStream_V_dout;
wire sig_memcpyHW_dataStream_V_empty_n;
wire sig_memcpyHW_dataStream_V_read;

wire [32 - 1:0] sig_memcpyHW_offsetStream_V_dout;
wire sig_memcpyHW_offsetStream_V_empty_n;
wire sig_memcpyHW_offsetStream_V_read;

wire sig_memcpyHW_ap_rst;



memcpyHW memcpyHW_U(
    .m_datain(sig_memcpyHW_m_datain),
    .m_dataout(sig_memcpyHW_m_dataout),
    .m_address(sig_memcpyHW_m_address),
    .m_size(sig_memcpyHW_m_size),
    .m_req_din(sig_memcpyHW_m_req_din),
    .m_req_full_n(sig_memcpyHW_m_req_full_n),
    .m_req_write(sig_memcpyHW_m_req_write),
    .m_rsp_empty_n(sig_memcpyHW_m_rsp_empty_n),
    .m_rsp_read(sig_memcpyHW_m_rsp_read),
    .dataStream_V_dout(sig_memcpyHW_dataStream_V_dout),
    .dataStream_V_empty_n(sig_memcpyHW_dataStream_V_empty_n),
    .dataStream_V_read(sig_memcpyHW_dataStream_V_read),
    .offsetStream_V_dout(sig_memcpyHW_offsetStream_V_dout),
    .offsetStream_V_empty_n(sig_memcpyHW_offsetStream_V_empty_n),
    .offsetStream_V_read(sig_memcpyHW_offsetStream_V_read),
    .ap_rst(sig_memcpyHW_ap_rst),
    .ap_clk(aclk),
    .wr(wr)
);

memcpyHW_m_if #(
    .C_ID_WIDTH(C_M_AXI_M_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_M_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_M_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_M_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_M_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_M_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_M_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_M_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_M_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_M_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_M_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_M_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_M_CACHE_VALUE))
memcpyHW_m_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_memcpyHW_m_datain),
    .USER_dataout(sig_memcpyHW_m_dataout),
    .USER_address(sig_memcpyHW_m_address),
    .USER_size(sig_memcpyHW_m_size),
    .USER_req_din(sig_memcpyHW_m_req_din),
    .USER_req_full_n(sig_memcpyHW_m_req_full_n),
    .USER_req_write(sig_memcpyHW_m_req_write),
    .USER_rsp_empty_n(sig_memcpyHW_m_rsp_empty_n),
    .USER_rsp_read(sig_memcpyHW_m_rsp_read),
    .AWID(m_axi_m_AWID),
    .AWADDR(m_axi_m_AWADDR),
    .AWLEN(m_axi_m_AWLEN),
    .AWSIZE(m_axi_m_AWSIZE),
    .AWBURST(m_axi_m_AWBURST),
    .AWLOCK(m_axi_m_AWLOCK),
    .AWCACHE(m_axi_m_AWCACHE),
    .AWPROT(m_axi_m_AWPROT),
    .AWQOS(m_axi_m_AWQOS),
    .AWUSER(m_axi_m_AWUSER),
    .AWVALID(m_axi_m_AWVALID),
    .AWREADY(m_axi_m_AWREADY),
    .WDATA(m_axi_m_WDATA),
    .WSTRB(m_axi_m_WSTRB),
    .WLAST(m_axi_m_WLAST),
    .WUSER(m_axi_m_WUSER),
    .WVALID(m_axi_m_WVALID),
    .WREADY(m_axi_m_WREADY),
    .BID(m_axi_m_BID),
    .BRESP(m_axi_m_BRESP),
    .BUSER(m_axi_m_BUSER),
    .BVALID(m_axi_m_BVALID),
    .BREADY(m_axi_m_BREADY),
    .ARID(m_axi_m_ARID),
    .ARADDR(m_axi_m_ARADDR),
    .ARLEN(m_axi_m_ARLEN),
    .ARSIZE(m_axi_m_ARSIZE),
    .ARBURST(m_axi_m_ARBURST),
    .ARLOCK(m_axi_m_ARLOCK),
    .ARCACHE(m_axi_m_ARCACHE),
    .ARPROT(m_axi_m_ARPROT),
    .ARQOS(m_axi_m_ARQOS),
    .ARUSER(m_axi_m_ARUSER),
    .ARVALID(m_axi_m_ARVALID),
    .ARREADY(m_axi_m_ARREADY),
    .RID(m_axi_m_RID),
    .RDATA(m_axi_m_RDATA),
    .RRESP(m_axi_m_RRESP),
    .RLAST(m_axi_m_RLAST),
    .RUSER(m_axi_m_RUSER),
    .RVALID(m_axi_m_RVALID),
    .RREADY(m_axi_m_RREADY));

memcpyHW_DATA_S_if memcpyHW_DATA_S_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .dataStream_V_dout(sig_memcpyHW_dataStream_V_dout),
    .dataStream_V_empty_n(sig_memcpyHW_dataStream_V_empty_n),
    .dataStream_V_read(sig_memcpyHW_dataStream_V_read),
    .TVALID(DATA_S_TVALID),
    .TREADY(DATA_S_TREADY),
    .TDATA(DATA_S_TDATA));

memcpyHW_OFFSET_S_if memcpyHW_OFFSET_S_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .offsetStream_V_dout(sig_memcpyHW_offsetStream_V_dout),
    .offsetStream_V_empty_n(sig_memcpyHW_offsetStream_V_empty_n),
    .offsetStream_V_read(sig_memcpyHW_offsetStream_V_read),
    .TVALID(OFFSET_S_TVALID),
    .TREADY(OFFSET_S_TREADY),
    .TDATA(OFFSET_S_TDATA));

memcpyHW_ap_rst_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_if_U(
    .dout(sig_memcpyHW_ap_rst),
    .din(aresetn));

endmodule
