-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm2s is
generic (
    C_M_AXI_MEMORY_MAP_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORY_MAP_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_MAP_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_MAP_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORY_MAP_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_MAP_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_MAP_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_MAP_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CPUCONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CPUCONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORY_MAP_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEMORY_MAP_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEMORY_MAP_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEMORY_MAP_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_memory_map_AWVALID : OUT STD_LOGIC;
    m_axi_memory_map_AWREADY : IN STD_LOGIC;
    m_axi_memory_map_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ADDR_WIDTH-1 downto 0);
    m_axi_memory_map_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ID_WIDTH-1 downto 0);
    m_axi_memory_map_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memory_map_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_map_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_map_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_map_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_map_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_map_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_map_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_map_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_AWUSER_WIDTH-1 downto 0);
    m_axi_memory_map_WVALID : OUT STD_LOGIC;
    m_axi_memory_map_WREADY : IN STD_LOGIC;
    m_axi_memory_map_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_DATA_WIDTH-1 downto 0);
    m_axi_memory_map_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_DATA_WIDTH/8-1 downto 0);
    m_axi_memory_map_WLAST : OUT STD_LOGIC;
    m_axi_memory_map_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ID_WIDTH-1 downto 0);
    m_axi_memory_map_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_WUSER_WIDTH-1 downto 0);
    m_axi_memory_map_ARVALID : OUT STD_LOGIC;
    m_axi_memory_map_ARREADY : IN STD_LOGIC;
    m_axi_memory_map_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ADDR_WIDTH-1 downto 0);
    m_axi_memory_map_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ID_WIDTH-1 downto 0);
    m_axi_memory_map_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memory_map_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_map_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_map_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_map_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_map_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_map_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_map_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_map_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ARUSER_WIDTH-1 downto 0);
    m_axi_memory_map_RVALID : IN STD_LOGIC;
    m_axi_memory_map_RREADY : OUT STD_LOGIC;
    m_axi_memory_map_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_DATA_WIDTH-1 downto 0);
    m_axi_memory_map_RLAST : IN STD_LOGIC;
    m_axi_memory_map_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ID_WIDTH-1 downto 0);
    m_axi_memory_map_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_RUSER_WIDTH-1 downto 0);
    m_axi_memory_map_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_map_BVALID : IN STD_LOGIC;
    m_axi_memory_map_BREADY : OUT STD_LOGIC;
    m_axi_memory_map_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_map_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_ID_WIDTH-1 downto 0);
    m_axi_memory_map_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_MAP_BUSER_WIDTH-1 downto 0);
    stream_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_V_TVALID : OUT STD_LOGIC;
    stream_V_TREADY : IN STD_LOGIC;
    s_axi_cpuControl_AWVALID : IN STD_LOGIC;
    s_axi_cpuControl_AWREADY : OUT STD_LOGIC;
    s_axi_cpuControl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_cpuControl_WVALID : IN STD_LOGIC;
    s_axi_cpuControl_WREADY : OUT STD_LOGIC;
    s_axi_cpuControl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH-1 downto 0);
    s_axi_cpuControl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_cpuControl_ARVALID : IN STD_LOGIC;
    s_axi_cpuControl_ARREADY : OUT STD_LOGIC;
    s_axi_cpuControl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_cpuControl_RVALID : OUT STD_LOGIC;
    s_axi_cpuControl_RREADY : IN STD_LOGIC;
    s_axi_cpuControl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH-1 downto 0);
    s_axi_cpuControl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cpuControl_BVALID : OUT STD_LOGIC;
    s_axi_cpuControl_BREADY : IN STD_LOGIC;
    s_axi_cpuControl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mm2s is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mm2s,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=4,HLS_SYN_FF=1160,HLS_SYN_LUT=1241}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_pp0_stg0_fsm_14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_pp1_stg0_fsm_15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_st20_fsm_16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_35 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal num_of_burst : STD_LOGIC_VECTOR (31 downto 0);
    signal burst_size : STD_LOGIC_VECTOR (31 downto 0);
    signal offset : STD_LOGIC_VECTOR (31 downto 0);
    signal mm2s_cpuControl_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal memory_map_AWVALID : STD_LOGIC;
    signal memory_map_AWREADY : STD_LOGIC;
    signal memory_map_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_map_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_map_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_map_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_map_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_map_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_map_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_WVALID : STD_LOGIC;
    signal memory_map_WREADY : STD_LOGIC;
    signal memory_map_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_map_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_WLAST : STD_LOGIC;
    signal memory_map_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_ARVALID : STD_LOGIC;
    signal memory_map_ARREADY : STD_LOGIC;
    signal memory_map_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_map_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_map_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_map_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_map_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_map_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_map_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_map_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_RVALID : STD_LOGIC;
    signal memory_map_RREADY : STD_LOGIC;
    signal memory_map_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_map_RLAST : STD_LOGIC;
    signal memory_map_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_map_BVALID : STD_LOGIC;
    signal memory_map_BREADY : STD_LOGIC;
    signal memory_map_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_map_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_map_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mm2s_memory_map_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_158 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_reg_ppstg_indvar_reg_158_pp0_it1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond4_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_230 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal k_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal burst_size_read_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_burst_read_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_201_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_reg_304 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_add_i32_shr_cast3_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_add_i32_shr_cast3_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_262 : BOOLEAN;
    signal tmp_5_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_280 : BOOLEAN;
    signal ap_sig_ioackin_memory_map_ARREADY : STD_LOGIC;
    signal exitcond4_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond4_reg_336_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_250_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next_reg_340 : STD_LOGIC_VECTOR (29 downto 0);
    signal memory_map_addr_read_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_303 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_ioackin_stream_V_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal k_1_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_331 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_338 : BOOLEAN;
    signal buff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_366 : BOOLEAN;
    signal tmp_2_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_phi_fu_162_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_memory_map_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_stream_V_TREADY : STD_LOGIC := '0';
    signal tmp_1_fu_187_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_bdd_403 : BOOLEAN;

    component mm2s_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm2s_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm2s_cpuControl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        num_of_burst : OUT STD_LOGIC_VECTOR (31 downto 0);
        burst_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        offset : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm2s_memory_map_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mm2s_cpuControl_s_axi_U : component mm2s_cpuControl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CPUCONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CPUCONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cpuControl_AWVALID,
        AWREADY => s_axi_cpuControl_AWREADY,
        AWADDR => s_axi_cpuControl_AWADDR,
        WVALID => s_axi_cpuControl_WVALID,
        WREADY => s_axi_cpuControl_WREADY,
        WDATA => s_axi_cpuControl_WDATA,
        WSTRB => s_axi_cpuControl_WSTRB,
        ARVALID => s_axi_cpuControl_ARVALID,
        ARREADY => s_axi_cpuControl_ARREADY,
        ARADDR => s_axi_cpuControl_ARADDR,
        RVALID => s_axi_cpuControl_RVALID,
        RREADY => s_axi_cpuControl_RREADY,
        RDATA => s_axi_cpuControl_RDATA,
        RRESP => s_axi_cpuControl_RRESP,
        BVALID => s_axi_cpuControl_BVALID,
        BREADY => s_axi_cpuControl_BREADY,
        BRESP => s_axi_cpuControl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => mm2s_cpuControl_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        num_of_burst => num_of_burst,
        burst_size => burst_size,
        offset => offset);

    mm2s_memory_map_m_axi_U : component mm2s_memory_map_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEMORY_MAP_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEMORY_MAP_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEMORY_MAP_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEMORY_MAP_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEMORY_MAP_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEMORY_MAP_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEMORY_MAP_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEMORY_MAP_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEMORY_MAP_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEMORY_MAP_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEMORY_MAP_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEMORY_MAP_CACHE_VALUE)
    port map (
        AWVALID => m_axi_memory_map_AWVALID,
        AWREADY => m_axi_memory_map_AWREADY,
        AWADDR => m_axi_memory_map_AWADDR,
        AWID => m_axi_memory_map_AWID,
        AWLEN => m_axi_memory_map_AWLEN,
        AWSIZE => m_axi_memory_map_AWSIZE,
        AWBURST => m_axi_memory_map_AWBURST,
        AWLOCK => m_axi_memory_map_AWLOCK,
        AWCACHE => m_axi_memory_map_AWCACHE,
        AWPROT => m_axi_memory_map_AWPROT,
        AWQOS => m_axi_memory_map_AWQOS,
        AWREGION => m_axi_memory_map_AWREGION,
        AWUSER => m_axi_memory_map_AWUSER,
        WVALID => m_axi_memory_map_WVALID,
        WREADY => m_axi_memory_map_WREADY,
        WDATA => m_axi_memory_map_WDATA,
        WSTRB => m_axi_memory_map_WSTRB,
        WLAST => m_axi_memory_map_WLAST,
        WID => m_axi_memory_map_WID,
        WUSER => m_axi_memory_map_WUSER,
        ARVALID => m_axi_memory_map_ARVALID,
        ARREADY => m_axi_memory_map_ARREADY,
        ARADDR => m_axi_memory_map_ARADDR,
        ARID => m_axi_memory_map_ARID,
        ARLEN => m_axi_memory_map_ARLEN,
        ARSIZE => m_axi_memory_map_ARSIZE,
        ARBURST => m_axi_memory_map_ARBURST,
        ARLOCK => m_axi_memory_map_ARLOCK,
        ARCACHE => m_axi_memory_map_ARCACHE,
        ARPROT => m_axi_memory_map_ARPROT,
        ARQOS => m_axi_memory_map_ARQOS,
        ARREGION => m_axi_memory_map_ARREGION,
        ARUSER => m_axi_memory_map_ARUSER,
        RVALID => m_axi_memory_map_RVALID,
        RREADY => m_axi_memory_map_RREADY,
        RDATA => m_axi_memory_map_RDATA,
        RLAST => m_axi_memory_map_RLAST,
        RID => m_axi_memory_map_RID,
        RUSER => m_axi_memory_map_RUSER,
        RRESP => m_axi_memory_map_RRESP,
        BVALID => m_axi_memory_map_BVALID,
        BREADY => m_axi_memory_map_BREADY,
        BRESP => m_axi_memory_map_BRESP,
        BID => m_axi_memory_map_BID,
        BUSER => m_axi_memory_map_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => mm2s_memory_map_m_axi_U_ap_dummy_ce,
        I_ARVALID => memory_map_ARVALID,
        I_ARREADY => memory_map_ARREADY,
        I_ARADDR => memory_map_ARADDR,
        I_ARID => memory_map_ARID,
        I_ARLEN => memory_map_ARLEN,
        I_ARSIZE => memory_map_ARSIZE,
        I_ARLOCK => memory_map_ARLOCK,
        I_ARCACHE => memory_map_ARCACHE,
        I_ARQOS => memory_map_ARQOS,
        I_ARPROT => memory_map_ARPROT,
        I_ARUSER => memory_map_ARUSER,
        I_ARBURST => memory_map_ARBURST,
        I_ARREGION => memory_map_ARREGION,
        I_RVALID => memory_map_RVALID,
        I_RREADY => memory_map_RREADY,
        I_RDATA => memory_map_RDATA,
        I_RID => memory_map_RID,
        I_RUSER => memory_map_RUSER,
        I_RRESP => memory_map_RRESP,
        I_RLAST => memory_map_RLAST,
        I_AWVALID => memory_map_AWVALID,
        I_AWREADY => memory_map_AWREADY,
        I_AWADDR => memory_map_AWADDR,
        I_AWID => memory_map_AWID,
        I_AWLEN => memory_map_AWLEN,
        I_AWSIZE => memory_map_AWSIZE,
        I_AWLOCK => memory_map_AWLOCK,
        I_AWCACHE => memory_map_AWCACHE,
        I_AWQOS => memory_map_AWQOS,
        I_AWPROT => memory_map_AWPROT,
        I_AWUSER => memory_map_AWUSER,
        I_AWBURST => memory_map_AWBURST,
        I_AWREGION => memory_map_AWREGION,
        I_WVALID => memory_map_WVALID,
        I_WREADY => memory_map_WREADY,
        I_WDATA => memory_map_WDATA,
        I_WID => memory_map_WID,
        I_WUSER => memory_map_WUSER,
        I_WLAST => memory_map_WLAST,
        I_WSTRB => memory_map_WSTRB,
        I_BVALID => memory_map_BVALID,
        I_BREADY => memory_map_BREADY,
        I_BRESP => memory_map_BRESP,
        I_BID => memory_map_BID,
        I_BUSER => memory_map_BUSER);

    buff_U : component mm2s_buff
    generic map (
        DataWidth => 32,
        AddressRange => 252,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0);

    mm2s_mul_32s_32s_32_6_U1 : component mm2s_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => j1_reg_147,
        din1 => burst_size_read_reg_283,
        ce => grp_fu_225_ce,
        dout => grp_fu_225_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_memory_map_ARREADY assign process. --
    ap_reg_ioackin_memory_map_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memory_map_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_memory_map_ARREADY))) then 
                        ap_reg_ioackin_memory_map_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = memory_map_ARREADY)) then 
                        ap_reg_ioackin_memory_map_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_stream_V_TREADY assign process. --
    ap_reg_ioackin_stream_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_stream_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_403) then
                    if (not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                        ap_reg_ioackin_stream_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = stream_V_TREADY)) then 
                        ap_reg_ioackin_stream_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond4_fu_245_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_261_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond_fu_261_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_261_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar_reg_158 assign process. --
    indvar_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond4_reg_336 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_158 <= indvar_next_reg_340;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                indvar_reg_158 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    -- j1_reg_147 assign process. --
    j1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond3_fu_209_p2))) then 
                j1_reg_147 <= j_reg_135;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_16)) then 
                j1_reg_147 <= j_1_fu_277_p2;
            end if; 
        end if;
    end process;

    -- j_reg_135 assign process. --
    j_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_220_p2))) then 
                j_reg_135 <= i_reg_317;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_135 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- k_reg_170 assign process. --
    k_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2)))) then 
                k_reg_170 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond_fu_261_p2))) then 
                k_reg_170 <= k_1_fu_266_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond4_reg_336_pp0_it1 <= exitcond4_reg_336;
                ap_reg_ppstg_indvar_reg_158_pp0_it1 <= indvar_reg_158;
                exitcond4_reg_336 <= exitcond4_fu_245_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                burst_size_read_reg_283 <= burst_size;
                num_of_burst_read_reg_289 <= num_of_burst;
                    p_add_i32_shr_cast3_reg_309(29 downto 0) <= p_add_i32_shr_cast3_fu_205_p1(29 downto 0);
                tmp_4_reg_304 <= tmp_4_fu_201_p1;
                tmp_reg_294 <= tmp_fu_181_p2;
                    tmp_s_reg_299(29 downto 0) <= tmp_s_fu_197_p1(29 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                exitcond_reg_350 <= exitcond_fu_261_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_reg_317 <= i_fu_214_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_340 <= indvar_next_fu_250_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond4_reg_336 = ap_const_lv1_0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                memory_map_addr_read_reg_345 <= memory_map_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_5_reg_325 <= tmp_5_fu_230_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_299(31 downto 30) <= "00";
    p_add_i32_shr_cast3_reg_309(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_230, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_ioackin_memory_map_ARREADY, exitcond4_fu_245_p2, exitcond_fu_261_p2, exitcond_reg_350, ap_reg_ppiten_pp1_it0, ap_sig_ioackin_stream_V_TREADY, ap_reg_ppiten_pp1_it1, tmp_2_fu_220_p2, exitcond3_fu_209_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_209_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_220_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_memory_map_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_14;
            when ap_ST_pp0_stg0_fsm_14 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_14;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond4_fu_245_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_14;
                end if;
            when ap_ST_pp1_stg0_fsm_15 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_261_p2))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_15;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond_fu_261_p2)))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_15;
                end if;
            when ap_ST_st20_fsm_16 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_209_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_209_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_209_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_209_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(memory_map_RVALID, exitcond4_reg_336)
    begin
                ap_sig_bdd_230 <= ((memory_map_RVALID = ap_const_logic_0) and (exitcond4_reg_336 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_262 assign process. --
    ap_sig_bdd_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_262 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_280 assign process. --
    ap_sig_bdd_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_280 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_303 assign process. --
    ap_sig_bdd_303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_303 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_331 assign process. --
    ap_sig_bdd_331_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_331 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_338 assign process. --
    ap_sig_bdd_338_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_338 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_35 assign process. --
    ap_sig_bdd_35_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_35 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_366 assign process. --
    ap_sig_bdd_366_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_366 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_403 assign process. --
    ap_sig_bdd_403_assign_proc : process(exitcond_reg_350, ap_sig_cseq_ST_pp1_stg0_fsm_15, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_403 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_14 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_14_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_15 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_15_assign_proc : process(ap_sig_bdd_303)
    begin
        if (ap_sig_bdd_303) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_338)
    begin
        if (ap_sig_bdd_338) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_35)
    begin
        if (ap_sig_bdd_35) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_16 assign process. --
    ap_sig_cseq_ST_st20_fsm_16_assign_proc : process(ap_sig_bdd_331)
    begin
        if (ap_sig_bdd_331) then 
            ap_sig_cseq_ST_st20_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_262)
    begin
        if (ap_sig_bdd_262) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_366)
    begin
        if (ap_sig_bdd_366) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_280)
    begin
        if (ap_sig_bdd_280) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_memory_map_ARREADY assign process. --
    ap_sig_ioackin_memory_map_ARREADY_assign_proc : process(memory_map_ARREADY, ap_reg_ioackin_memory_map_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memory_map_ARREADY)) then 
            ap_sig_ioackin_memory_map_ARREADY <= memory_map_ARREADY;
        else 
            ap_sig_ioackin_memory_map_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_stream_V_TREADY assign process. --
    ap_sig_ioackin_stream_V_TREADY_assign_proc : process(stream_V_TREADY, ap_reg_ioackin_stream_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_stream_V_TREADY)) then 
            ap_sig_ioackin_stream_V_TREADY <= stream_V_TREADY;
        else 
            ap_sig_ioackin_stream_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- buff_address0 assign process. --
    buff_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg0_fsm_15, ap_reg_ppiten_pp1_it0, tmp_6_fu_256_p1, tmp_8_fu_272_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            buff_address0 <= tmp_6_fu_256_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            buff_address0 <= tmp_8_fu_272_p1(8 - 1 downto 0);
        else 
            buff_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- buff_ce0 assign process. --
    buff_ce0_assign_proc : process(ap_sig_bdd_230, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond_reg_350, ap_sig_cseq_ST_pp1_stg0_fsm_15, ap_reg_ppiten_pp1_it0, ap_sig_ioackin_stream_V_TREADY, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_0 = ap_sig_ioackin_stream_V_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_d0 <= memory_map_addr_read_reg_345;

    -- buff_we0 assign process. --
    buff_we0_assign_proc : process(ap_sig_bdd_230, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond4_reg_336_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_336_pp0_it1)))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_209_p2 <= "1" when (j_reg_135 = tmp_reg_294) else "0";
    exitcond4_fu_245_p2 <= "1" when (indvar_phi_fu_162_p4 = tmp_4_reg_304) else "0";
    exitcond_fu_261_p2 <= "1" when (k_reg_170 = burst_size_read_reg_283) else "0";
    grp_fu_225_ce <= ap_const_logic_1;
    i_fu_214_p2 <= std_logic_vector(unsigned(j_reg_135) + unsigned(ap_const_lv32_1));
    indvar_next_fu_250_p2 <= std_logic_vector(unsigned(indvar_phi_fu_162_p4) + unsigned(ap_const_lv30_1));

    -- indvar_phi_fu_162_p4 assign process. --
    indvar_phi_fu_162_p4_assign_proc : process(indvar_reg_158, ap_sig_cseq_ST_pp0_stg0_fsm_14, exitcond4_reg_336, ap_reg_ppiten_pp0_it1, indvar_next_reg_340)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond4_reg_336 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_162_p4 <= indvar_next_reg_340;
        else 
            indvar_phi_fu_162_p4 <= indvar_reg_158;
        end if; 
    end process;

    j_1_fu_277_p2 <= std_logic_vector(signed(j1_reg_147) + signed(ap_const_lv32_1));
    k_1_fu_266_p2 <= std_logic_vector(unsigned(k_reg_170) + unsigned(ap_const_lv32_1));
    memory_map_ARADDR <= tmp_7_fu_235_p1(32 - 1 downto 0);
    memory_map_ARBURST <= ap_const_lv2_0;
    memory_map_ARCACHE <= ap_const_lv4_0;
    memory_map_ARID <= ap_const_lv1_0;
    memory_map_ARLEN <= p_add_i32_shr_cast3_reg_309;
    memory_map_ARLOCK <= ap_const_lv2_0;
    memory_map_ARPROT <= ap_const_lv3_0;
    memory_map_ARQOS <= ap_const_lv4_0;
    memory_map_ARREGION <= ap_const_lv4_0;
    memory_map_ARSIZE <= ap_const_lv3_0;
    memory_map_ARUSER <= ap_const_lv1_0;

    -- memory_map_ARVALID assign process. --
    memory_map_ARVALID_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_reg_ioackin_memory_map_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_logic_0 = ap_reg_ioackin_memory_map_ARREADY))) then 
            memory_map_ARVALID <= ap_const_logic_1;
        else 
            memory_map_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    memory_map_AWADDR <= ap_const_lv32_0;
    memory_map_AWBURST <= ap_const_lv2_0;
    memory_map_AWCACHE <= ap_const_lv4_0;
    memory_map_AWID <= ap_const_lv1_0;
    memory_map_AWLEN <= ap_const_lv32_0;
    memory_map_AWLOCK <= ap_const_lv2_0;
    memory_map_AWPROT <= ap_const_lv3_0;
    memory_map_AWQOS <= ap_const_lv4_0;
    memory_map_AWREGION <= ap_const_lv4_0;
    memory_map_AWSIZE <= ap_const_lv3_0;
    memory_map_AWUSER <= ap_const_lv1_0;
    memory_map_AWVALID <= ap_const_logic_0;
    memory_map_BREADY <= ap_const_logic_0;

    -- memory_map_RREADY assign process. --
    memory_map_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_14, exitcond4_reg_336, ap_sig_bdd_230, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond4_reg_336 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            memory_map_RREADY <= ap_const_logic_1;
        else 
            memory_map_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    memory_map_WDATA <= ap_const_lv32_0;
    memory_map_WID <= ap_const_lv1_0;
    memory_map_WLAST <= ap_const_logic_0;
    memory_map_WSTRB <= ap_const_lv4_0;
    memory_map_WUSER <= ap_const_lv1_0;
    memory_map_WVALID <= ap_const_logic_0;
    mm2s_cpuControl_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    mm2s_memory_map_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    p_add_i32_shr_cast3_fu_205_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_201_p1),32));
    stream_V_TDATA <= buff_q0;

    -- stream_V_TVALID assign process. --
    stream_V_TVALID_assign_proc : process(exitcond_reg_350, ap_sig_cseq_ST_pp1_stg0_fsm_15, ap_reg_ppiten_pp1_it1, ap_reg_ioackin_stream_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_lv1_0 = exitcond_reg_350) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_0 = ap_reg_ioackin_stream_V_TREADY))) then 
            stream_V_TVALID <= ap_const_logic_1;
        else 
            stream_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_187_p4 <= offset(31 downto 2);
    tmp_2_fu_220_p2 <= "1" when (unsigned(j1_reg_147) < unsigned(num_of_burst_read_reg_289)) else "0";
    tmp_4_fu_201_p0 <= burst_size;
    tmp_4_fu_201_p1 <= tmp_4_fu_201_p0(30 - 1 downto 0);
    tmp_5_fu_230_p2 <= std_logic_vector(unsigned(grp_fu_225_p2) + unsigned(tmp_s_reg_299));
    tmp_6_fu_256_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_158_pp0_it1),64));
        tmp_7_fu_235_p1 <= std_logic_vector(resize(signed(tmp_5_reg_325),64));

        tmp_8_fu_272_p1 <= std_logic_vector(resize(signed(k_reg_170),64));

    tmp_fu_181_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(num_of_burst));
    tmp_s_fu_197_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_187_p4),32));
end behav;
