// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _counter_stream_unusual_s2mm_hls_HH_
#define _counter_stream_unusual_s2mm_hls_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "counter_stream_unusual_s2mm_hls_cpuControl_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CPUCONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CPUCONTROL_DATA_WIDTH = 32>
struct counter_stream_unusual_s2mm_hls : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > counter_TDATA;
    sc_out< sc_logic > counter_TVALID;
    sc_in< sc_logic > counter_TREADY;
    sc_out< sc_lv<1> > counter_TLAST;
    sc_in< sc_logic > s_axi_cpuControl_AWVALID;
    sc_out< sc_logic > s_axi_cpuControl_AWREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_ADDR_WIDTH> > s_axi_cpuControl_AWADDR;
    sc_in< sc_logic > s_axi_cpuControl_WVALID;
    sc_out< sc_logic > s_axi_cpuControl_WREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH> > s_axi_cpuControl_WDATA;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH/8> > s_axi_cpuControl_WSTRB;
    sc_in< sc_logic > s_axi_cpuControl_ARVALID;
    sc_out< sc_logic > s_axi_cpuControl_ARREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_ADDR_WIDTH> > s_axi_cpuControl_ARADDR;
    sc_out< sc_logic > s_axi_cpuControl_RVALID;
    sc_in< sc_logic > s_axi_cpuControl_RREADY;
    sc_out< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH> > s_axi_cpuControl_RDATA;
    sc_out< sc_lv<2> > s_axi_cpuControl_RRESP;
    sc_out< sc_logic > s_axi_cpuControl_BVALID;
    sc_in< sc_logic > s_axi_cpuControl_BREADY;
    sc_out< sc_lv<2> > s_axi_cpuControl_BRESP;
    sc_out< sc_logic > interrupt;


    // Module declarations
    counter_stream_unusual_s2mm_hls(sc_module_name name);
    SC_HAS_PROCESS(counter_stream_unusual_s2mm_hls);

    ~counter_stream_unusual_s2mm_hls();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    counter_stream_unusual_s2mm_hls_cpuControl_s_axi<C_S_AXI_CPUCONTROL_ADDR_WIDTH,C_S_AXI_CPUCONTROL_DATA_WIDTH>* counter_stream_unusual_s2mm_hls_cpuControl_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_30;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > resolution;
    sc_signal< sc_lv<32> > numIteration;
    sc_signal< sc_logic > counter_stream_unusual_s2mm_hls_cpuControl_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<32> > numIteration_read_reg_248;
    sc_signal< sc_lv<32> > resolution_read_reg_254;
    sc_signal< sc_lv<31> > i_1_fu_128_p2;
    sc_signal< sc_lv<31> > i_1_reg_277;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_93;
    sc_signal< sc_lv<1> > tmp_last_V_fu_134_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_282;
    sc_signal< sc_lv<1> > tmp_fu_123_p2;
    sc_signal< sc_lv<32> > next_mul_fu_144_p2;
    sc_signal< sc_lv<32> > next_mul_reg_287;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_109;
    sc_signal< sc_logic > ap_sig_ioackin_counter_TREADY;
    sc_signal< sc_lv<31> > i_reg_92;
    sc_signal< sc_logic > ap_sig_cseq_ST_st11_fsm_10;
    sc_signal< bool > ap_sig_bdd_123;
    sc_signal< sc_lv<32> > tmp_data_reg_103;
    sc_signal< sc_lv<32> > acc_fu_66;
    sc_signal< sc_lv<32> > acc_1_1_fu_149_p2;
    sc_signal< sc_lv<32> > acc_1_2_fu_160_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_136;
    sc_signal< sc_lv<32> > acc_1_3_fu_171_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_144;
    sc_signal< sc_lv<32> > acc_1_4_fu_182_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_152;
    sc_signal< sc_lv<32> > acc_1_5_fu_193_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_160;
    sc_signal< sc_lv<32> > acc_1_6_fu_204_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_bdd_168;
    sc_signal< sc_lv<32> > acc_1_7_fu_215_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_bdd_176;
    sc_signal< sc_lv<32> > acc_1_8_fu_226_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_9;
    sc_signal< bool > ap_sig_bdd_184;
    sc_signal< sc_lv<32> > acc_1_9_fu_237_p2;
    sc_signal< sc_logic > ap_reg_ioackin_counter_TREADY;
    sc_signal< sc_lv<32> > i_cast_fu_119_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st12_fsm_11;
    sc_signal< bool > ap_sig_bdd_265;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_st1_fsm_0;
    static const sc_lv<12> ap_ST_st2_fsm_1;
    static const sc_lv<12> ap_ST_st3_fsm_2;
    static const sc_lv<12> ap_ST_st4_fsm_3;
    static const sc_lv<12> ap_ST_st5_fsm_4;
    static const sc_lv<12> ap_ST_st6_fsm_5;
    static const sc_lv<12> ap_ST_st7_fsm_6;
    static const sc_lv<12> ap_ST_st8_fsm_7;
    static const sc_lv<12> ap_ST_st9_fsm_8;
    static const sc_lv<12> ap_ST_st10_fsm_9;
    static const sc_lv<12> ap_ST_st11_fsm_10;
    static const sc_lv<12> ap_ST_st12_fsm_11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_1_1_fu_149_p2();
    void thread_acc_1_2_fu_160_p2();
    void thread_acc_1_3_fu_171_p2();
    void thread_acc_1_4_fu_182_p2();
    void thread_acc_1_5_fu_193_p2();
    void thread_acc_1_6_fu_204_p2();
    void thread_acc_1_7_fu_215_p2();
    void thread_acc_1_8_fu_226_p2();
    void thread_acc_1_9_fu_237_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_109();
    void thread_ap_sig_bdd_123();
    void thread_ap_sig_bdd_136();
    void thread_ap_sig_bdd_144();
    void thread_ap_sig_bdd_152();
    void thread_ap_sig_bdd_160();
    void thread_ap_sig_bdd_168();
    void thread_ap_sig_bdd_176();
    void thread_ap_sig_bdd_184();
    void thread_ap_sig_bdd_265();
    void thread_ap_sig_bdd_30();
    void thread_ap_sig_bdd_93();
    void thread_ap_sig_cseq_ST_st10_fsm_9();
    void thread_ap_sig_cseq_ST_st11_fsm_10();
    void thread_ap_sig_cseq_ST_st12_fsm_11();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_ap_sig_ioackin_counter_TREADY();
    void thread_counter_TDATA();
    void thread_counter_TLAST();
    void thread_counter_TVALID();
    void thread_counter_stream_unusual_s2mm_hls_cpuControl_s_axi_U_ap_dummy_ce();
    void thread_i_1_fu_128_p2();
    void thread_i_cast_fu_119_p1();
    void thread_next_mul_fu_144_p2();
    void thread_tmp_fu_123_p2();
    void thread_tmp_last_V_fu_134_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
