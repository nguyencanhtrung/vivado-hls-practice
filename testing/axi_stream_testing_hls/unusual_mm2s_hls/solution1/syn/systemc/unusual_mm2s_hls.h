// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _unusual_mm2s_hls_HH_
#define _unusual_mm2s_hls_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "unusual_mm2s_hls_innerBRAM.h"
#include "unusual_mm2s_hls_cpuControl_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CPUCONTROL_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CPUCONTROL_DATA_WIDTH = 32>
struct unusual_mm2s_hls : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > input_s_TDATA;
    sc_in< sc_logic > input_s_TVALID;
    sc_out< sc_logic > input_s_TREADY;
    sc_in< sc_lv<1> > input_s_TLAST;
    sc_out< sc_lv<32> > output_s_TDATA;
    sc_out< sc_logic > output_s_TVALID;
    sc_in< sc_logic > output_s_TREADY;
    sc_out< sc_lv<1> > output_s_TLAST;
    sc_in< sc_logic > s_axi_cpuControl_AWVALID;
    sc_out< sc_logic > s_axi_cpuControl_AWREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_ADDR_WIDTH> > s_axi_cpuControl_AWADDR;
    sc_in< sc_logic > s_axi_cpuControl_WVALID;
    sc_out< sc_logic > s_axi_cpuControl_WREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH> > s_axi_cpuControl_WDATA;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH/8> > s_axi_cpuControl_WSTRB;
    sc_in< sc_logic > s_axi_cpuControl_ARVALID;
    sc_out< sc_logic > s_axi_cpuControl_ARREADY;
    sc_in< sc_uint<C_S_AXI_CPUCONTROL_ADDR_WIDTH> > s_axi_cpuControl_ARADDR;
    sc_out< sc_logic > s_axi_cpuControl_RVALID;
    sc_in< sc_logic > s_axi_cpuControl_RREADY;
    sc_out< sc_uint<C_S_AXI_CPUCONTROL_DATA_WIDTH> > s_axi_cpuControl_RDATA;
    sc_out< sc_lv<2> > s_axi_cpuControl_RRESP;
    sc_out< sc_logic > s_axi_cpuControl_BVALID;
    sc_in< sc_logic > s_axi_cpuControl_BREADY;
    sc_out< sc_lv<2> > s_axi_cpuControl_BRESP;
    sc_out< sc_logic > interrupt;


    // Module declarations
    unusual_mm2s_hls(sc_module_name name);
    SC_HAS_PROCESS(unusual_mm2s_hls);

    ~unusual_mm2s_hls();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    unusual_mm2s_hls_cpuControl_s_axi<C_S_AXI_CPUCONTROL_ADDR_WIDTH,C_S_AXI_CPUCONTROL_DATA_WIDTH>* unusual_mm2s_hls_cpuControl_s_axi_U;
    unusual_mm2s_hls_innerBRAM* innerBRAM_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_25;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > iteration;
    sc_signal< sc_logic > unusual_mm2s_hls_cpuControl_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<31> > i2_reg_164;
    sc_signal< sc_lv<32> > iteration_read_reg_293;
    sc_signal< sc_lv<32> > tmp_fu_175_p2;
    sc_signal< sc_lv<32> > tmp_reg_307;
    sc_signal< sc_lv<1> > exitcond_fu_181_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_93;
    sc_signal< sc_lv<4> > index_1_fu_187_p2;
    sc_signal< sc_lv<4> > index_1_reg_316;
    sc_signal< sc_lv<31> > i_1_fu_202_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_104;
    sc_signal< sc_lv<1> > tmp_1_fu_197_p2;
    sc_signal< bool > ap_sig_bdd_112;
    sc_signal< sc_lv<1> > tmp_5_fu_227_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_122;
    sc_signal< sc_lv<31> > i_2_fu_232_p2;
    sc_signal< sc_lv<31> > i_2_reg_333;
    sc_signal< sc_lv<1> > tmp_9_fu_243_p2;
    sc_signal< sc_lv<1> > tmp_9_reg_343;
    sc_signal< sc_lv<1> > tmp_s_fu_267_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_348;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp1_stg0_fsm_6;
    sc_signal< bool > ap_sig_bdd_141;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it0;
    sc_signal< sc_logic > ap_sig_ioackin_output_s_TREADY;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it1;
    sc_signal< sc_lv<31> > i_3_fu_272_p2;
    sc_signal< sc_lv<1> > tmp_last_V_fu_288_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_362;
    sc_signal< sc_lv<7> > innerBRAM_address0;
    sc_signal< sc_logic > innerBRAM_ce0;
    sc_signal< sc_logic > innerBRAM_we0;
    sc_signal< sc_lv<32> > innerBRAM_d0;
    sc_signal< sc_lv<32> > innerBRAM_q0;
    sc_signal< sc_lv<4> > index_reg_130;
    sc_signal< sc_lv<31> > i_reg_142;
    sc_signal< sc_lv<31> > i1_reg_153;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_195;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_202;
    sc_signal< sc_lv<64> > tmp_3_fu_213_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_238_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_278_p1;
    sc_signal< sc_lv<32> > acc_fu_76;
    sc_signal< sc_lv<32> > acc_1_fu_252_p2;
    sc_signal< sc_logic > ap_reg_ioackin_output_s_TREADY;
    sc_signal< sc_lv<32> > i_cast_fu_193_p1;
    sc_signal< sc_lv<32> > i1_cast_fu_223_p1;
    sc_signal< sc_lv<32> > i2_cast_fu_263_p1;
    sc_signal< sc_lv<1> > tmp_4_fu_283_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_st1_fsm_0;
    static const sc_lv<7> ap_ST_st2_fsm_1;
    static const sc_lv<7> ap_ST_st3_fsm_2;
    static const sc_lv<7> ap_ST_st4_fsm_3;
    static const sc_lv<7> ap_ST_st5_fsm_4;
    static const sc_lv<7> ap_ST_st6_fsm_5;
    static const sc_lv<7> ap_ST_pp1_stg0_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<4> ap_const_lv4_9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_252_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_104();
    void thread_ap_sig_bdd_112();
    void thread_ap_sig_bdd_122();
    void thread_ap_sig_bdd_141();
    void thread_ap_sig_bdd_195();
    void thread_ap_sig_bdd_202();
    void thread_ap_sig_bdd_25();
    void thread_ap_sig_bdd_93();
    void thread_ap_sig_cseq_ST_pp1_stg0_fsm_6();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_ioackin_output_s_TREADY();
    void thread_exitcond_fu_181_p2();
    void thread_i1_cast_fu_223_p1();
    void thread_i2_cast_fu_263_p1();
    void thread_i_1_fu_202_p2();
    void thread_i_2_fu_232_p2();
    void thread_i_3_fu_272_p2();
    void thread_i_cast_fu_193_p1();
    void thread_index_1_fu_187_p2();
    void thread_innerBRAM_address0();
    void thread_innerBRAM_ce0();
    void thread_innerBRAM_d0();
    void thread_innerBRAM_we0();
    void thread_input_s_TREADY();
    void thread_output_s_TDATA();
    void thread_output_s_TLAST();
    void thread_output_s_TVALID();
    void thread_tmp_1_fu_197_p2();
    void thread_tmp_2_fu_278_p1();
    void thread_tmp_3_fu_213_p1();
    void thread_tmp_4_fu_283_p2();
    void thread_tmp_5_fu_227_p2();
    void thread_tmp_6_fu_238_p1();
    void thread_tmp_9_fu_243_p2();
    void thread_tmp_fu_175_p2();
    void thread_tmp_last_V_fu_288_p2();
    void thread_tmp_s_fu_267_p2();
    void thread_unusual_mm2s_hls_cpuControl_s_axi_U_ap_dummy_ce();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
