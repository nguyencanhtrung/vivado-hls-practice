-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unusual_mm2s_hls is
generic (
    C_S_AXI_CPUCONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CPUCONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_s_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_s_TVALID : IN STD_LOGIC;
    input_s_TREADY : OUT STD_LOGIC;
    input_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_s_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_s_TVALID : OUT STD_LOGIC;
    output_s_TREADY : IN STD_LOGIC;
    output_s_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_cpuControl_AWVALID : IN STD_LOGIC;
    s_axi_cpuControl_AWREADY : OUT STD_LOGIC;
    s_axi_cpuControl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_cpuControl_WVALID : IN STD_LOGIC;
    s_axi_cpuControl_WREADY : OUT STD_LOGIC;
    s_axi_cpuControl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH-1 downto 0);
    s_axi_cpuControl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_cpuControl_ARVALID : IN STD_LOGIC;
    s_axi_cpuControl_ARREADY : OUT STD_LOGIC;
    s_axi_cpuControl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_cpuControl_RVALID : OUT STD_LOGIC;
    s_axi_cpuControl_RREADY : IN STD_LOGIC;
    s_axi_cpuControl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CPUCONTROL_DATA_WIDTH-1 downto 0);
    s_axi_cpuControl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cpuControl_BVALID : OUT STD_LOGIC;
    s_axi_cpuControl_BREADY : IN STD_LOGIC;
    s_axi_cpuControl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of unusual_mm2s_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "unusual_mm2s_hls,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.721000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=306,HLS_SYN_LUT=441}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_pp1_stg0_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal iteration : STD_LOGIC_VECTOR (31 downto 0);
    signal unusual_mm2s_hls_cpuControl_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal i2_reg_140 : STD_LOGIC_VECTOR (30 downto 0);
    signal iteration_read_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_160_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_91 : BOOLEAN;
    signal tmp_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_99 : BOOLEAN;
    signal tmp_4_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal i_2_fu_190_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_272 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_ioackin_output_s_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal i_3_fu_229_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_last_V_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal innerBRAM_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal innerBRAM_ce0 : STD_LOGIC;
    signal innerBRAM_we0 : STD_LOGIC;
    signal innerBRAM_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal innerBRAM_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_118 : STD_LOGIC_VECTOR (30 downto 0);
    signal i1_reg_129 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal tmp_2_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_output_s_TREADY : STD_LOGIC := '0';
    signal i_cast_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_cast_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_cast_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component unusual_mm2s_hls_innerBRAM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component unusual_mm2s_hls_cpuControl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        iteration : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    unusual_mm2s_hls_cpuControl_s_axi_U : component unusual_mm2s_hls_cpuControl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CPUCONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CPUCONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cpuControl_AWVALID,
        AWREADY => s_axi_cpuControl_AWREADY,
        AWADDR => s_axi_cpuControl_AWADDR,
        WVALID => s_axi_cpuControl_WVALID,
        WREADY => s_axi_cpuControl_WREADY,
        WDATA => s_axi_cpuControl_WDATA,
        WSTRB => s_axi_cpuControl_WSTRB,
        ARVALID => s_axi_cpuControl_ARVALID,
        ARREADY => s_axi_cpuControl_ARREADY,
        ARADDR => s_axi_cpuControl_ARADDR,
        RVALID => s_axi_cpuControl_RVALID,
        RREADY => s_axi_cpuControl_RREADY,
        RDATA => s_axi_cpuControl_RDATA,
        RRESP => s_axi_cpuControl_RRESP,
        BVALID => s_axi_cpuControl_BVALID,
        BREADY => s_axi_cpuControl_BREADY,
        BRESP => s_axi_cpuControl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => unusual_mm2s_hls_cpuControl_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        iteration => iteration);

    innerBRAM_U : component unusual_mm2s_hls_innerBRAM
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => innerBRAM_address0,
        ce0 => innerBRAM_ce0,
        we0 => innerBRAM_we0,
        d0 => innerBRAM_d0,
        q0 => innerBRAM_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_output_s_TREADY assign process. --
    ap_reg_ioackin_output_s_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_output_s_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ioackin_output_s_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = output_s_TREADY)))) then 
                    ap_reg_ioackin_output_s_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = tmp_9_fu_224_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_4_fu_185_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = tmp_9_fu_224_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_4_fu_185_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = tmp_9_fu_224_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- acc_fu_64 assign process. --
    acc_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                acc_fu_64 <= acc_1_fu_209_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                acc_fu_64 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i1_reg_129 assign process. --
    i1_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i1_reg_129 <= i_2_reg_272;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i1_reg_129 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- i2_reg_140 assign process. --
    i2_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_4_fu_185_p2))) then 
                i2_reg_140 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = tmp_9_fu_224_p2)))) then 
                i2_reg_140 <= i_3_fu_229_p2;
            end if; 
        end if;
    end process;

    -- i_reg_118 assign process. --
    i_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_155_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_99))) then 
                i_reg_118 <= i_1_fu_160_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_118 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_2_reg_272 <= i_2_fu_190_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                iteration_read_reg_245 <= iteration;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_4_fu_185_p2))) then
                tmp_8_reg_282 <= tmp_8_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                tmp_9_reg_287 <= tmp_9_fu_224_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = tmp_9_fu_224_p2)))) then
                tmp_last_V_reg_301 <= tmp_last_V_fu_240_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_155_p2, ap_sig_bdd_99, tmp_4_fu_185_p2, tmp_9_fu_224_p2, tmp_9_reg_287, ap_reg_ppiten_pp1_it0, ap_sig_ioackin_output_s_TREADY, ap_reg_ppiten_pp1_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((tmp_fu_155_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_99))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((tmp_fu_155_p2 = ap_const_lv1_0) and not(ap_sig_bdd_99))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = tmp_4_fu_185_p2)) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_pp1_stg0_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = tmp_9_fu_224_p2)))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = tmp_9_fu_224_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    acc_1_fu_209_p2 <= std_logic_vector(unsigned(innerBRAM_q0) + unsigned(acc_fu_64));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st8_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_91 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(input_s_TVALID, tmp_fu_155_p2)
    begin
                ap_sig_bdd_99 <= ((input_s_TVALID = ap_const_logic_0) and not((tmp_fu_155_p2 = ap_const_lv1_0)));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_5 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_5_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_91)
    begin
        if (ap_sig_bdd_91) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_output_s_TREADY assign process. --
    ap_sig_ioackin_output_s_TREADY_assign_proc : process(output_s_TREADY, ap_reg_ioackin_output_s_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_output_s_TREADY)) then 
            ap_sig_ioackin_output_s_TREADY <= output_s_TREADY;
        else 
            ap_sig_ioackin_output_s_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    i1_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(i1_reg_129),32));
    i2_cast_fu_220_p1 <= std_logic_vector(resize(unsigned(i2_reg_140),32));
    i_1_fu_160_p2 <= std_logic_vector(unsigned(i_reg_118) + unsigned(ap_const_lv31_1));
    i_2_fu_190_p2 <= std_logic_vector(unsigned(i1_reg_129) + unsigned(ap_const_lv31_1));
    i_3_fu_229_p2 <= std_logic_vector(unsigned(i2_reg_140) + unsigned(ap_const_lv31_1));
    i_cast_fu_151_p1 <= std_logic_vector(resize(unsigned(i_reg_118),32));

    -- innerBRAM_address0 assign process. --
    innerBRAM_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_reg_ppiten_pp1_it0, tmp_2_fu_171_p1, tmp_5_fu_196_p1, tmp_s_fu_235_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            innerBRAM_address0 <= tmp_2_fu_171_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            innerBRAM_address0 <= tmp_s_fu_235_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            innerBRAM_address0 <= tmp_5_fu_196_p1(7 - 1 downto 0);
        else 
            innerBRAM_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- innerBRAM_ce0 assign process. --
    innerBRAM_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_99, ap_sig_cseq_ST_st4_fsm_3, tmp_9_reg_287, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_reg_ppiten_pp1_it0, ap_sig_ioackin_output_s_TREADY, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_bdd_99)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_0 = ap_sig_ioackin_output_s_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            innerBRAM_ce0 <= ap_const_logic_1;
        else 
            innerBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    innerBRAM_d0 <= input_s_TDATA;

    -- innerBRAM_we0 assign process. --
    innerBRAM_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_155_p2, ap_sig_bdd_99)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_155_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_99)))) then 
            innerBRAM_we0 <= ap_const_logic_1;
        else 
            innerBRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- input_s_TREADY assign process. --
    input_s_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_155_p2, ap_sig_bdd_99)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_155_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_99)))) then 
            input_s_TREADY <= ap_const_logic_1;
        else 
            input_s_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    output_s_TDATA <= innerBRAM_q0;
    output_s_TLAST <= tmp_last_V_reg_301;

    -- output_s_TVALID assign process. --
    output_s_TVALID_assign_proc : process(tmp_9_reg_287, ap_sig_cseq_ST_pp1_stg0_fsm_5, ap_reg_ppiten_pp1_it1, ap_reg_ioackin_output_s_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_5) and not((ap_const_lv1_0 = tmp_9_reg_287)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_0 = ap_reg_ioackin_output_s_TREADY)))) then 
            output_s_TVALID <= ap_const_logic_1;
        else 
            output_s_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_171_p1 <= std_logic_vector(resize(unsigned(i_reg_118),64));
    tmp_4_fu_185_p2 <= "1" when (signed(i1_cast_fu_181_p1) < signed(iteration_read_reg_245)) else "0";
    tmp_5_fu_196_p1 <= std_logic_vector(resize(unsigned(i1_reg_129),64));
    tmp_8_fu_201_p2 <= std_logic_vector(unsigned(iteration_read_reg_245) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_9_fu_224_p2 <= "1" when (signed(i2_cast_fu_220_p1) < signed(iteration_read_reg_245)) else "0";
    tmp_fu_155_p2 <= "1" when (signed(i_cast_fu_151_p1) < signed(iteration_read_reg_245)) else "0";
    tmp_last_V_fu_240_p2 <= "1" when (i2_cast_fu_220_p1 = tmp_8_reg_282) else "0";
    tmp_s_fu_235_p1 <= std_logic_vector(resize(unsigned(i2_reg_140),64));
    unusual_mm2s_hls_cpuControl_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
end behav;
